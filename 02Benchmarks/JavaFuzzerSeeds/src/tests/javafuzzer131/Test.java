package tests.javafuzzer131;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:51:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=59902L;
    public static double dFld=-74.36010;
    public int iFld=-3;
    public static volatile byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-77);
        FuzzerUtils.init(Test.iArrFld, -249);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1) {

        int i2=176, i3=4, i4=3, i5=-63883, i6=-4680, i7=-50595;
        float f=0.269F, fArr[][]=new float[N][N];
        byte by3=-91;
        short s=-20282;

        FuzzerUtils.init(fArr, 1.257F);

        i1 *= i1;
        i1 *= i1;
        for (i2 = 4; i2 < 231; ++i2) {
            for (i4 = 1; i4 < 7; ++i4) {
                i3 += (i4 * i4);
                for (i6 = 1; i6 < 2; i6 += 2) {
                    switch (((i3 >>> 1) % 3) + 91) {
                    case 91:
                        i7 *= (int)f;
                        i1 |= i1;
                        by3 -= (byte)1.313F;
                        break;
                    case 92:
                        fArr[i4] = fArr[i4 + 1];
                        break;
                    case 93:
                        i3 += (((i6 * i5) + by3) - i6);
                        break;
                    }
                    f += Test.instanceCount;
                    Test.dFld += -3613;
                    s ^= (short)i3;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + by3 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(long l1) {

        int i8=-2, i9=34194, i12=7208, i13=-27027;
        short s1=28987;

        vMeth(i8);
        Test.instanceCount = (long)1.14733;
        i8 += i8;
        Test.iArrFld[(i8 >>> 1) % N] -= i8;
        Test.dFld = -8109647581559078735L;
        s1 <<= s1;
        i9 = 1;
        while ((i9 += 2) < 220) {
            int i10=-183;
            i8 += (((i9 * i8) + i10) - i10);
        }
        for (int i11 : Test.iArrFld) {
            i12 = 4;
            do {
                i13 = 2;
                do {
                    i8 = i12;
                    i8 = (int)l1;
                    i11 = -92;
                    Test.instanceCount >>>= -136;
                } while (--i13 > 0);
            } while ((i12 -= 2) > 0);
        }
        long meth_res = l1 + i8 + s1 + i9 + i12 + i13;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(byte by1, long l, int i) {

        int i14=11425, i15=-19582, i16=8;
        double d=62.90508, dArr[]=new double[N];
        float f2=-85.315F, f3=49.885F, fArr1[]=new float[N];
        short s2=-14390;

        FuzzerUtils.init(fArr1, 90.370F);
        FuzzerUtils.init(dArr, 99.89488);

        i += iMeth1(l);
        i14 = 1;
        do {
            for (d = 1; d < 4; ++d) {
                i += (int)(d * d);
                try {
                    i15 = (175 / i);
                    i15 = (216 % Test.iArrFld[(int)(d + 1)]);
                    i15 = (i / -62162);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (long)f2;
                if (false) {
                    for (f3 = 1; 2 > f3; ++f3) {
                        i16 = -170;
                        i16 += i;
                        dArr[(int)(f3 - 1)] += i14;
                        i15 += (int)(((f3 * i16) + i14) - f3);
                    }
                }
                i = (int)l;
                i15 += (int)Test.instanceCount;
                s2 *= (short)10L;
            }
        } while (++i14 < 379);
        long meth_res = by1 + l + i + i14 + Double.doubleToLongBits(d) + i15 + Float.floatToIntBits(f2) +
            Float.floatToIntBits(f3) + i16 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=-17;
        double d1=2.41284;
        int i17=-11, i18=6, i19=-9, i20=1, i21=21727, i22=32410, i23=243, i24=-29, i25=91, i26=-1, i27=50, i28=-73,
            i29=21;
        float f4=-3.604F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1536080209L);

        by = (byte)(-iMeth((byte)(124), Test.instanceCount, -9));
        iFld = (int)Test.instanceCount;
        Test.iArrFld[(iFld >>> 1) % N] -= (int)Test.instanceCount;
        for (d1 = 15; d1 < 277; d1++) {
            switch (((iFld >>> 1) % 8) + 70) {
            case 70:
                Test.instanceCount -= i17;
                for (i18 = 4; i18 < 96; i18++) {
                    for (i20 = (int)(d1); i20 < 2; ++i20) {
                        Test.instanceCount -= Test.instanceCount;
                    }
                }
                for (i22 = 5; i22 < 96; ++i22) {
                    Test.instanceCount <<= Test.instanceCount;
                    for (i24 = 2; i24 > 1; --i24) {
                        Test.instanceCount += Test.instanceCount;
                        Test.dFld -= f4;
                        i19 = (int)-44952L;
                        b = b;
                        lArr[i24] = Test.instanceCount;
                        b = b;
                        iFld += iFld;
                    }
                    if (b) {
                        lArr[(int)(d1)] += (long)f4;
                        i26 = 1;
                        do {
                            i19 = i27;
                            if (b) continue;
                            f4 += (((i26 * i22) + Test.instanceCount) - i26);
                        } while (++i26 < 2);
                        i21 = (int)-14L;
                        Test.instanceCount += i22;
                    }
                    for (i28 = 2; 1 < i28; --i28) {
                        f4 *= i19;
                        i17 += (i28 * i28);
                    }
                }
            case 71:
                Test.instanceCount = Test.instanceCount;
                break;
            case 72:
                Test.instanceCount = -14;
                break;
            case 73:
                iFld |= i18;
                break;
            case 74:
            case 75:
                i23 = i18;
                break;
            case 76:
                Test.iArrFld[(int)(d1 + 1)] = i29;
                break;
            case 77:
                by %= (byte)(Test.instanceCount | 1);
            default:
                i25 *= i18;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
