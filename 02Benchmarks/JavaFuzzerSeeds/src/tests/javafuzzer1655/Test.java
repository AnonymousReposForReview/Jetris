package tests.javafuzzer1655;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:47:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3437093560L;
    public double dFld=0.10880;
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.dArrFld, 7.16839);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=34, i4=64870, i5=196;

        for (i3 = 7; 352 > i3; ++i3) {
            Test.instanceCount += i3;
        }
        i4 ^= i5;
        vMeth2_check_sum += i3 + i4 + i5;
    }

    public static void vMeth1() {

        int i1=-160, i2=54629, i6=205, i7=237;
        double d=60.8673;
        float f=-51.947F;
        short s=-27957;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2197677808L);

        lArr[(i1 >>> 1) % N] |= (Test.iArrFld[(i1 >>> 1) % N]--);
        d = (Test.dArrFld[(i1 >>> 1) % N]++);
        f = Test.iArrFld[(i1 >>> 1) % N];
        i2 = 1;
        while (++i2 < 370) {
            s += (short)(((i2 * f) + f) - i2);
            vMeth2();
            i1 -= i1;
            if (b) {
                i1 -= i2;
                for (i6 = 5; i6 > 1; i6 -= 3) {
                    Test.iArrFld[i2] = i2;
                    i7 ^= i6;
                    b = b;
                    if (b) continue;
                    Test.dArrFld[i2 - 1] = i1;
                }
            } else {
                Test.iArrFld[i2 + 1] = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i2 + s + i6 + i7 + (b ? 1 : 0)
            + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i) {

        float f1=-113.307F;
        int i8=-11, i9=-61825, i10=-38505, i11=19627, i12=-7, i13=-145, i14=-13, iArr[][]=new int[N][N], iArr1[]=new
            int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr, 245);
        FuzzerUtils.init(iArr1, -93);

        vMeth1();
        i |= i;
        f1 += i;
        for (i8 = 4; 318 > i8; ++i8) {
            dFld += Test.instanceCount;
            for (i10 = 1; 5 > i10; ++i10) {
                Test.instanceCount += i10;
                switch (((i10 % 10) * 5) + 17) {
                case 57:
                    i12 = 1;
                    do {
                        i = i10;
                        i += i8;
                        iArr = iArr;
                    } while (++i12 < 2);
                    for (i13 = 1; i13 < 2; i13++) {
                        Test.instanceCount += (((i13 * i9) + i14) - Test.instanceCount);
                    }
                    break;
                case 18:
                case 32:
                    Test.iArrFld[i10 + 1] = i;
                case 51:
                    i *= i9;
                    break;
                case 43:
                    iArr1 = FuzzerUtils.int1array(N, (int)-61);
                    break;
                case 66:
                    i9 <<= (int)Test.instanceCount;
                case 31:
                case 37:
                    lArrFld[i10] = i9;
                    break;
                case 64:
                    b1 = b1;
                case 55:
                    fArrFld[i10 - 1] = f1;
                    break;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i15=-84, i16=-31, i17=-55, i18=0, i19=10, i20=38770, i21=7988, i22=-134;
        float f2=109.229F, f3=127.912F;
        boolean b2=true;
        short s1=23147;

        vMeth(i15);
        f2 = i15;
        switch ((((-242 >>> 1) % 1) * 5) + 48) {
        case 52:
            i15 += i15;
            for (i16 = 3; i16 < 359; i16++) {
                i15 += (i16 - i15);
                b2 = b2;
                for (i18 = 3; i18 < 71; ++i18) {
                    i15 = i19;
                    switch (((i18 % 2) * 5) + 36) {
                    case 44:
                        Test.instanceCount += 54298L;
                        Test.iArrFld[i16] -= i15;
                        for (i20 = 1; i20 < 2; i20++) {
                            i21 = i17;
                        }
                        break;
                    case 38:
                        i15 = (int)f2;
                        break;
                    default:
                        Test.instanceCount += i16;
                        Test.iArrFld[i18] *= i19;
                        i21 = i17;
                        i15 += i17;
                    }
                    i17 = (int)f2;
                    Test.iArrFld[i18] >>>= -2;
                    i17 += (i18 * i18);
                    for (f3 = 2; f3 > 1; --f3) {
                        Test.instanceCount *= s1;
                        i21 = 198;
                        b2 = b2;
                        i17 -= (int)Test.instanceCount;
                        i19 = (int)dFld;
                        i17 -= (int)189L;
                        s1 += (short)f3;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
