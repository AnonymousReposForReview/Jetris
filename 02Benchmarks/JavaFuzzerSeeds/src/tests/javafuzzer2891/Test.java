package tests.javafuzzer2891;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:22:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17946L;
    public static float fFld=-40.248F;
    public static double dFld=1.74260;
    public int iFld=106;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 15722);
        FuzzerUtils.init(Test.fArrFld, -74.821F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6, int i7, long l) {

        int i8=-213, i9=51372, i10=245, i11=0, i12=-145, i13=2;
        byte by=-57;

        for (i8 = 6; 236 > i8; i8++) {
            for (i10 = 1; 7 > i10; ++i10) {
                i6 = -7;
                i11 += (i10 * i8);
                i11 <<= (int)l;
                Test.fFld += i10;
                l += i10;
                Test.dFld -= i8;
                i11 = by;
                Test.iArrFld = Test.iArrFld;
                for (i12 = i10; 2 > i12; i12++) {
                    short s=19699;
                    Test.instanceCount = i6;
                    i6 = (int)l;
                    i13 += (int)(-127.302F + (i12 * i12));
                    s += (short)(-5 + (i12 * i12));
                }
            }
        }
        long meth_res = i6 + i7 + l + i8 + i9 + i10 + i11 + by + i12 + i13;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2, double d1) {

        int i3=-18158, i4=-153, i5=5011, i14=2, i15=-10;
        double d2=1.128763;
        long l1=7L, lArr[]=new long[N];
        boolean b=true;

        FuzzerUtils.init(lArr, -7698920328467929954L);

        for (i3 = 4; i3 < 290; ++i3) {
            i5 = 1;
            while (++i5 < 6) {
                i4 = (Math.abs(iMeth1(i4, i5, Test.instanceCount)) - i3);
                try {
                    i2 = (i4 / Test.iArrFld[i3 - 1]);
                    i2 = (Test.iArrFld[i5 + 1] % i5);
                    i2 = (-132 % Test.iArrFld[i3]);
                } catch (ArithmeticException a_e) {}
                i2 -= i4;
                i2 = i5;
            }
        }
        lArr[(i2 >>> 1) % N] -= Test.instanceCount;
        i14 = 1;
        do {
            i2 -= (int)Test.instanceCount;
            for (d2 = 1; d2 < 4; d2++) {
                Test.fFld = i2;
                lArr[i14 - 1] = 3370;
                i15 += (int)(d2 - i14);
                Test.iArrFld[i14] += (int)l1;
                b = b;
            }
        } while (++i14 < 389);
        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i14 + Double.doubleToLongBits(d2) +
            i15 + l1 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth() {

        double d=-22.98572;
        int i=12;

        d = (((i + Test.instanceCount) - i) + (i + (i - Test.instanceCount)));
        vMeth(i, i, Test.dFld);
        long meth_res = Double.doubleToLongBits(d) + i;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=47745, i17=33779, i18=5, i19=-9, i20=6799, i21=73, i22=187;
        float f=-47.754F;
        byte by1=9;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 29588L);

        iMeth();
        iFld <<= iFld;
        for (i16 = 2; i16 < 345; ++i16) {
            iFld = i16;
            Test.instanceCount += i16;
            iFld <<= (int)Test.instanceCount;
            f = 1;
            while (++f < 73) {
                i18 = 1;
                while (++i18 < 1) {
                    by1 = (byte)i18;
                }
                for (i19 = 1; i19 < 1; i19++) {
                    iFld -= i20;
                }
                Test.fFld += (f * i20);
                iFld = i19;
                iFld += (61090 + (f * f));
                for (i21 = 1; i21 < 1; i21++) {
                    iFld = (int)f;
                    Test.fArrFld[i16 + 1] -= i21;
                    switch ((int)(((f % 8) * 5) + 82)) {
                    case 104:
                        Test.instanceCount += (((i21 * Test.fFld) + i19) - Test.instanceCount);
                        iFld *= 99;
                        break;
                    case 107:
                        i20 = i18;
                        by1 <<= by1;
                        Test.instanceCount += (((i21 * Test.fFld) + Test.instanceCount) - Test.instanceCount);
                        Test.iArrFld[(int)(f + 1)] <<= i22;
                        break;
                    case 99:
                        i17 *= by1;
                        lArr1[i16] &= Test.instanceCount;
                    case 110:
                        i22 += (i21 + i19);
                        if (b1) break;
                        iFld *= 166;
                        i17 -= i20;
                        break;
                    case 108:
                        bArrFld[i21] = b1;
                        break;
                    case 103:
                        lArr1[(int)(f)] += Test.instanceCount;
                        break;
                    case 97:
                        i20 -= (int)Test.fFld;
                    case 100:
                        Test.iArrFld[i16] >>= i21;
                        break;
                    default:
                        i17 = i18;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
