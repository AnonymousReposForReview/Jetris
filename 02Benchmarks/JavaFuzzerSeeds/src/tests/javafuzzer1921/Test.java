package tests.javafuzzer1921;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:55:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-149L;
    public static int iFld=113;
    public static int iFld1=-9;
    public static double dFld=2.13013;
    public float fFld=2.580F;
    public static short sArrFld[]=new short[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-18433);
        FuzzerUtils.init(Test.fArrFld, 2.161F);
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        boolean b=false;
        int i6=25532, i7=-46054, i8=-100, i9=21025, i10=-59944, iArr1[]=new int[N];
        float f2=1.970F;
        double d=-2.39258;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -9L);
        FuzzerUtils.init(iArr1, 213);

        b = b;
        Test.iFld1 = Test.iFld1;
        Test.instanceCount += Test.iFld;
        for (i6 = 4; i6 < 172; i6++) {
            for (f2 = 1; f2 < 9; ++f2) {
                switch ((i6 % 6) + 51) {
                case 51:
                    Test.fArrFld[i6 - 1] = Test.iFld;
                    break;
                case 52:
                    Test.iFld += (int)f2;
                    for (i9 = 2; i9 > f2; --i9) {
                        lArr1[i9] = Test.instanceCount;
                        Test.iFld1 += 5;
                        Test.iFld += (i9 * i9);
                        Test.instanceCount -= -1;
                        i7 >>= (int)-42154L;
                        i10 = Test.iFld;
                    }
                case 53:
                    iArr1[(int)(f2 + 1)] = (int)d;
                    break;
                case 54:
                    if (b) break;
                    break;
                case 55:
                case 56:
                    i8 = 31235;
                    break;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(byte by, long l1) {

        int i1=209, i2=-22530, i3=-179, i4=-65451, i5=-158, i11=11807, iArr[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -61121);
        FuzzerUtils.init(lArr, 148L);

        Test.iFld = (Test.sArrFld[(Test.iFld >>> 1) % N]--);
        Test.iFld1 = (int)4084128085L;
        for (i1 = 15; 379 > i1; ++i1) {
            for (i3 = 1; i3 < 5; ++i3) {
                float f1=2.945F;
                f1 *= iArr[(i4 >>> 1) % N];
                Test.instanceCount += (long)(f1 - (--iArr[i3 + 1]));
                lArr[i3 - 1] = (long)(-229 + ((l1 + i1) - (f1 - l1)));
                if (b1) {
                    i5 = 1;
                    while (++i5 < 2) {
                        f1 *= (f1 + ((6816100791902440093L - (f1 * -85L)) - -18));
                        i4 *= (int)((Test.iFld1++) * ((l1++) - (-53210 * (i1 - l1))));
                        Test.instanceCount = lMeth();
                        Test.iFld = i11;
                        Test.iFld = -229;
                        i4 = (int)Test.instanceCount;
                    }
                } else {
                    f1 += i11;
                }
            }
        }
        vMeth_check_sum += by + l1 + i1 + i2 + i3 + i4 + i5 + i11 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, float f, int i) {

        byte by1=-19;
        int i12=244, i13=-50987, i14=-97, i15=4, i16=-12, i17=6962, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -82);

        vMeth(by1, l);
        i12 = 1;
        while (++i12 < 235) {
            for (i13 = 1; 7 > i13; i13++) {
                i14 += -222;
                i += (int)Test.instanceCount;
                Test.dFld *= Test.dFld;
            }
            Test.iFld1 += i12;
            try {
                i = (Test.iFld1 / i12);
                iArr2[i12] = (i14 % 48698);
                i14 = (i % 154);
            } catch (ArithmeticException a_e) {}
        }
        i15 = 223;
        while (--i15 > 0) {
            if (Test.iFld != 0) {
            }
            i16 = 1;
            do {
                l <<= 6L;
                i17 = 1;
                while (++i17 < 1) {
                    l += (i17 * i17);
                    i = by1;
                }
            } while (++i16 < 7);
        }
        long meth_res = l + Float.floatToIntBits(f) + i + by1 + i12 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-160, i19=14, i20=8799, i21=-47, i22=-8, i23=91, i24=-31158, i25=12, i26=-83, i27=-1;
        boolean b2=true;
        short s=18497, s1=27394, s2=12401;
        byte by2=56;

        iMeth(14L, fFld, Test.iFld1);
        Test.iArrFld[(Test.iFld >>> 1) % N] <<= (int)Test.instanceCount;
        for (i18 = 9; i18 < 387; ++i18) {
            Test.iFld = Test.iFld;
            b2 = b2;
        }
        for (i20 = 22; i20 < 381; i20++) {
            i22 = 70;
            do {
                Test.iFld1 += (i22 + Test.instanceCount);
                i19 = s;
            } while (--i22 > 0);
            for (i23 = 2; i23 < 70; i23++) {
                long l2=7311391088090246862L;
                switch ((i23 % 7) + 11) {
                case 11:
                    Test.iFld1 += by2;
                    fFld += (((i23 * i19) + i19) - i20);
                case 12:
                    i24 = (int)Test.instanceCount;
                    break;
                case 13:
                    b2 = b2;
                    switch (((i18 >>> 1) % 8) + 40) {
                    case 40:
                        Test.iFld1 = (int)Test.instanceCount;
                        i24 = (int)l2;
                        for (i25 = 1; i25 < 2; i25++) {
                            Test.fArrFld[(-6703 >>> 1) % N] = i22;
                            Test.instanceCount = Test.iFld;
                            switch ((i25 % 9) + 25) {
                            case 25:
                                by2 = (byte)i26;
                                Test.dFld = Test.instanceCount;
                                Test.instanceCount += (i25 | i20);
                                break;
                            case 26:
                                Test.iFld += (i25 | Test.instanceCount);
                                b2 = b2;
                                i26 -= i24;
                                break;
                            case 27:
                                s *= (short)Test.dFld;
                                b2 = b2;
                                break;
                            case 28:
                                Test.iFld = (int)2L;
                                break;
                            case 29:
                                if (true) break;
                            case 30:
                                Test.iArrFld[i20 - 1] -= -7;
                                break;
                            case 31:
                                i24 = i22;
                                break;
                            case 32:
                                i19 = s1;
                                break;
                            case 33:
                                l2 += Test.instanceCount;
                                break;
                            default:
                                i21 -= i20;
                            }
                        }
                    case 41:
                        Test.iFld1 += (int)Test.instanceCount;
                        break;
                    case 42:
                        fFld = 89763437L;
                        break;
                    case 43:
                        s2 = (short)i23;
                        break;
                    case 44:
                        l2 += i25;
                        break;
                    case 45:
                        fFld += 49016;
                        break;
                    case 46:
                        b2 = b2;
                        break;
                    case 47:
                        i24 <<= i26;
                    default:
                        i27 = -180;
                    }
                    break;
                case 14:
                    i21 += (i23 - i20);
                    break;
                case 15:
                    i27 = (int)Test.instanceCount;
                    break;
                case 16:
                    try {
                        Test.iArrFld[i20] = (8965 % i25);
                        Test.iArrFld[i20 + 1] = (i23 / 1550356829);
                        i24 = (i19 % -152);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 17:
                    i19 += i23;
                default:
                    i21 <<= -12;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
