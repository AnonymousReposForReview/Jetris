package tests.javafuzzer1214;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:35:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-72L;
    public static byte byFld=9;
    public static float fFld=-55.35F;
    public static int iFld=12;
    public double dFld=1.126384;
    public static double dFld1=20.129132;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, -84.479F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1) {

        long l1=62421L, l2=290652188L;
        int i4=-5527, i5=231, i6=13, i7=51815, i8=225, iArr[]=new int[N];
        float f=0.971F;
        byte by=-110;

        FuzzerUtils.init(iArr, 170);

        Test.fArrFld[(13 >>> 1) % N] += Test.instanceCount;
        for (l1 = 183; l1 > 1; l1 -= 2) {
            f = i4;
            i4 <<= (int)l1;
            Test.instanceCount *= i4;
            d1 += Test.instanceCount;
            for (i5 = 17; i5 > 1; i5 -= 2) {
                for (i7 = 1; i7 < 3; i7++) {
                    i4 -= (int)Test.instanceCount;
                    iArr[i7] += (int)f;
                    i4 = i4;
                    switch ((int)((l1 % 10) + 109)) {
                    case 109:
                        l2 *= i8;
                        i4 = i8;
                        break;
                    case 110:
                        i4 >>= 12;
                    case 111:
                    case 112:
                        i8 += (((i7 * l1) + i7) - l2);
                        break;
                    case 113:
                        iArr[i7 + 1] = i8;
                        break;
                    case 114:
                        by -= (byte)i4;
                        break;
                    case 115:
                        i8 = -62061;
                        break;
                    case 116:
                        i4 = -8;
                    case 117:
                        i6 += 14;
                        break;
                    case 118:
                        d1 = -5;
                        break;
                    default:
                        i8 ^= i7;
                    }
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + l1 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + l2 +
            by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i3) {

        double d=-1.8228;
        boolean b=false;
        int i9=-54794, i10=13, i11=59453, i12=102, i13=-30, i14=-13, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4765535238981390687L);
        FuzzerUtils.init(iArr1, -67);

        d -= (((--lArr[(-5 >>> 1) % N]) + i3) - (i3--));
        b = Test.bArrFld[(i3 >>> 1) % N];
        vMeth2(d);
        for (i9 = 378; i9 > 20; --i9) {
            i10 = 60;
            l -= -14;
            i10 = i9;
            iArr1 = FuzzerUtils.int1array(N, (int)5133);
            for (i11 = 5; i11 > 1; i11--) {
                i12 += i11;
                try {
                    i10 = (i9 % i11);
                    i3 = (i10 / i3);
                    i12 = (i11 % 199);
                } catch (ArithmeticException a_e) {}
                for (i13 = 1; 2 > i13; i13++) {
                    i14 = i10;
                    i12 &= Test.byFld;
                }
                d = Test.instanceCount;
            }
        }
        vMeth1_check_sum += l + i3 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i9 + i10 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2) {


        vMeth1(Test.instanceCount, i2);
        vMeth_check_sum += i2;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=-4955, i15=-26389, i16=205, i17=-35, i18=-46, i19=4;
        boolean b1=false;
        double d2=0.127280;
        short s=6516;

        for (i = 14; i < 398; i++) {
            vMeth(i);
            Test.fArrFld[i + 1] = i;
            Test.instanceCount = (long)Test.fFld;
            switch ((i % 9) + 4) {
            case 4:
                i1 = i;
                Test.instanceCount >>= Test.instanceCount;
                i1 += (((i * i) + i1) - i1);
                break;
            case 5:
                for (i15 = 4; 66 > i15; ++i15) {
                    try {
                        iArrFld[i15 - 1] = (i1 / 90);
                        i1 = (242 / i);
                        i1 = (-186 % i1);
                    } catch (ArithmeticException a_e) {}
                    i1 = i;
                    Test.instanceCount = i15;
                    i1 >>= (int)Test.instanceCount;
                    b1 = b1;
                    i17 += (((i15 * Test.instanceCount) + i17) - i1);
                    for (i18 = 1; i18 < 2; i18++) {
                        switch (((i % 1) * 5) + 107) {
                        case 111:
                            iArrFld = iArrFld;
                            i19 *= i17;
                            b1 = b1;
                            Test.byFld -= (byte)d2;
                            break;
                        default:
                            i16 *= (int)183L;
                            iArrFld[i15 - 1] >>>= (int)Test.instanceCount;
                        }
                        i17 -= Test.byFld;
                        Test.fFld -= 137;
                        Test.iFld = (int)Test.instanceCount;
                        iArrFld[i15] = (int)dFld;
                        Test.instanceCount %= ((long)(dFld) | 1);
                        d2 *= i;
                        Test.fFld -= i;
                    }
                }
                break;
            case 6:
                Test.dFld1 += s;
            case 7:
                Test.iFld += (i * i);
                break;
            case 8:
                i16 += i17;
                break;
            case 9:
                Test.byFld += (byte)i;
                break;
            case 10:
                if (b1) continue;
                break;
            case 11:
                Test.fFld = i1;
                break;
            case 12:
                Test.instanceCount += i;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
