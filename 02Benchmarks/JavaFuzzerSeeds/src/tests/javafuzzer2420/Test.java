package tests.javafuzzer2420;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:22:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=630498567L;
    public static float fFld=1.837F;
    public static boolean bFld=true;
    public static int iFld=-44;
    public long lArrFld[]=new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        int i5=-233, i6=0, i7=2, i8=65481, iArr[]=new int[N];
        double d=89.17272;
        short s=-6513;
        byte by=-14;

        FuzzerUtils.init(iArr, -62986);

        for (int i4 : iArr) {
            if (i3 != 0) {
                vMeth_check_sum += i3 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + s + by +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
            for (i5 = 1; i5 < 4; i5++) {
                d = i5;
                Test.instanceCount <<= i5;
                switch (((i5 % 1) * 5) + 71) {
                case 75:
                    iArr[i5 - 1] = i6;
                    Test.instanceCount = 10;
                }
                i3 <<= (int)-6L;
                i3 += (((i5 * i4) + Test.fFld) - i4);
                switch (((i5 % 1) * 5) + 35) {
                case 38:
                    try {
                        iArr[i5 + 1] = (i5 / i4);
                        i4 = (-95 % i4);
                        i4 = (-106 % iArr[i5 - 1]);
                    } catch (ArithmeticException a_e) {}
                    for (i7 = i5; i7 < 2; ++i7) {
                        s = (short)i8;
                    }
                    Test.instanceCount = by;
                    break;
                default:
                    Test.bFld = false;
                }
            }
        }
        vMeth_check_sum += i3 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + s + by + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l) {

        int i9=-14, i10=-10, i11=-20, i12=-55843;
        double d1=10.12077;
        long l1=-2511680263L, l2=-2821521204L;
        byte by1=23;
        short s1=23972;

        vMeth(i9);
        l = (long)d1;
        i9 = i9;
        i10 = 1;
        while (++i10 < 265) {
            Test.bFld = true;
            Test.fFld = 215;
            l1 += (i10 * i10);
        }
        i9 = i10;
        i9 = i9;
        i9 += by1;
        i11 = 1;
        do {
            for (l2 = i11; 9 > l2; ++l2) {
                l = 648960039L;
                s1 -= (short)108;
                l1 += (long)Test.fFld;
            }
        } while (++i11 < 187);
        long meth_res = l + i9 + Double.doubleToLongBits(d1) + i10 + l1 + by1 + i11 + l2 + i12 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i1, int i2, float f) {


        iMeth(Test.instanceCount);
        i1 &= i2;
        vSmallMeth_check_sum += i1 + i2 + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=24, i13=182, i14=-13, i15=55747, i16=-11, i17=64396, i18=-25769, i19=-8, iArr1[]=new int[N];
        short s2=-9546;
        byte by2=-14;
        long l3=11L, l4=-4236L;

        FuzzerUtils.init(iArr1, 171);

        Test.instanceCount = (--i);
        i = (i++);
        for (int smallinvoc=0; smallinvoc<369; smallinvoc++) vSmallMeth(i, i, 21.706F);
        for (i13 = 13; i13 < 307; ++i13) {
            i14 += (((i13 * s2) + i14) - by2);
            switch (((Test.iFld >>> 1) % 5) + 44) {
            case 44:
                i14 -= i14;
                break;
            case 45:
                i15 = 1;
                do {
                    for (l3 = 1; l3 < 1; l3++) {
                        i14 += Test.iFld;
                        i14 += (int)l3;
                        Test.instanceCount += -4;
                        Test.iFld += (11 + (l3 * l3));
                        if (Test.bFld) break;
                    }
                    lArrFld[i13 + 1] += i;
                    for (i17 = 1; i17 < 1; ++i17) {
                        i18 -= i14;
                        i14 *= i16;
                        i16 = i17;
                        i += i17;
                        Test.instanceCount += (((i17 * by2) + Test.instanceCount) - i);
                        l4 *= i;
                        Test.instanceCount = Test.instanceCount;
                        Test.bFld = Test.bFld;
                    }
                    try {
                        i = (iArr1[i13] / -56);
                        i = (Test.iFld % i14);
                        i14 = (i13 / i16);
                    } catch (ArithmeticException a_e) {}
                    switch (((-12 >>> 1) % 1) + 57) {
                    case 57:
                        i19 = 1;
                        do {
                            Test.instanceCount = i14;
                            iArr1[i19] <<= i17;
                            if (true) continue;
                        } while (++i19 < 1);
                        break;
                    default:
                        Test.bFld = Test.bFld;
                    }
                } while (++i15 < 86);
            case 46:
                i14 >>>= i14;
                break;
            case 47:
                i = (int)l3;
                break;
            case 48:
                Test.fFld = i17;
            default:
                if (false) continue;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
