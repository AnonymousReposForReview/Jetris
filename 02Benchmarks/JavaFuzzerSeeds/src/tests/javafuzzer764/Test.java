package tests.javafuzzer764;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:10:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1445543209L;
    public static byte byFld=24;
    public static float fFld=105.214F;
    public static int iFld=26637;
    public static boolean bFld=true;
    public short sFld=25504;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -36);
        FuzzerUtils.init(Test.sArrFld, (short)-7099);
        FuzzerUtils.init(Test.lArrFld, -198L);
        FuzzerUtils.init(Test.byArrFld, (byte)70);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long vMeth3_check_sum = 0;

    public static void vMeth1() {


        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
        Test.iFld = (int)(~(long)(-(Test.iFld + Test.fFld)));
        Test.iFld -= (int)((Test.iFld++) * Test.instanceCount);
        vMeth1_check_sum += 0;
    }

    public static void vMeth3() {

        short s=8524;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 87);

        Test.instanceCount -= Test.iFld;
        Test.sArrFld[(Test.iFld >>> 1) % N] -= s;
        Test.iArrFld = iArr;
        Test.iFld <<= Test.iFld;
        Test.byFld = (byte)22;
        iArr[(Test.iFld >>> 1) % N] += (int)Test.fFld;
        vMeth3_check_sum += s + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth2(int i2, int i3, int i4) {

        int i5=-11, i6=169, i7=31458, i8=-9;
        double d1=-1.43837;
        short s1=30216;

        Test.instanceCount = (--i3);
        for (i5 = 8; i5 < 179; i5++) {
            Test.instanceCount ^= (Test.instanceCount + (-Math.abs(i6)));
            Test.byFld = (byte)((Test.iArrFld[i5 - 1] - (i4 + Test.instanceCount)) * (d1 - (--i6)));
            vMeth3();
            i3 = (int)Test.instanceCount;
            Test.fFld *= Test.iFld;
            for (i7 = 1; i7 < 9; i7++) {
                i6 -= i6;
                d1 += 13;
                i2 -= -25151;
                Test.instanceCount -= i5;
                s1 *= (short)i8;
                Test.iFld *= i7;
                Test.lArrFld = Test.lArrFld;
            }
        }
        vMeth2_check_sum += i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + s1;
    }

    public void vMeth(int i1, double d) {

        int i9=3, i10=216, i11=0, i12=12077;

        Test.iArrFld[(i1 >>> 1) % N] <<= (int)Test.instanceCount;
        vMeth1();
        try {
            vMeth2(i1, -13235, -57354);
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i1 = Test.iFld;
            Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        }
        finally {
            d *= Test.iFld;
        }
        i1 = Test.iFld;
        Test.iArrFld[(i1 >>> 1) % N] -= (int)-62.996F;
        Test.iFld -= (int)Test.fFld;
        for (i9 = 1; i9 < 345; i9++) {
            for (i11 = 5; 1 < i11; i11 -= 2) {
                Test.byArrFld[i9 + 1] -= (byte)-60;
            }
            Test.lArrFld[i9] *= Test.instanceCount;
            Test.fFld += 77.35F;
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12;
    }

    public void mainTest(String[] strArr1) {

        int i=-16471, i13=-5677, i14=-39259, i15=31851, i16=0, i17=-34432, i18=19291, i19=0, i20=37547, i21=11493;
        double d2=-97.71932;

        Test.byFld = (byte)i;
        if (Test.bFld) {
            if (Test.bFld) {
                i = (int)(((-(Test.instanceCount--)) + (i * i)) + ((Test.iArrFld[(i >>> 1) % N] -=
                    (int)Test.instanceCount) - (Test.fFld -= Test.instanceCount)));
                vMeth(93, d2);
                Test.iFld = i;
                i = (int)0L;
            } else {
                i = Test.iFld;
                i &= (int)Test.instanceCount;
                for (i13 = 4; 211 > i13; i13++) {
                    Test.iFld = i13;
                    for (i15 = 2; i15 < 121; i15++) {
                        Test.iFld += (int)Test.instanceCount;
                        Test.iArrFld[i15] >>= (int)-5L;
                        i14 = sFld;
                        i -= i15;
                        Test.lArrFld[i13 + 1] /= (i | 1);
                    }
                }
                for (i17 = 3; i17 < 331; i17++) {
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount -= i14;
                    i16 = (int)Test.instanceCount;
                    for (i19 = 77; i19 > i17; i19--) {
                        Test.iArrFld[i19] -= (int)Test.instanceCount;
                        i21 = 1;
                        while (++i21 < 1) {
                            Test.iFld <<= (int)3069239032657717923L;
                            i20 = (int)Test.instanceCount;
                            Test.iFld = (int)Test.fFld;
                            i14 += (i21 * Test.iFld);
                            Test.iFld += (i21 ^ i);
                        }
                        Test.iFld += 14;
                    }
                }
            }
        } else if (Test.bFld) {
            Test.instanceCount -= i16;
        } else {
            Test.bFld = true;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  vMeth3 ->  vMeth3 vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
