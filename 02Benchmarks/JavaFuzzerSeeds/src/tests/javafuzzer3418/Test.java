package tests.javafuzzer3418;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:50:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-202537511L;
    public static int iFld=113;
    public static float fFld=0.580F;
    public static boolean bFld=false;
    public volatile int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 1);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i=3;

        i *= (int)(--Test.instanceCount);
        vSmallMeth_check_sum += i;
    }

    public static int iMeth1(long l2, int i10, long l3) {

        int i11=4451, i12=-60520, i13=8, i14=-191, i15=14310, i17=-9, i18=-14;
        boolean b=false;
        short s=-28774;

        for (i11 = 8; i11 < 276; ++i11) {
            Test.fFld -= Test.iFld;
            i10 = i10;
            Test.bArrFld[i11 - 1] = b;
            for (i13 = 1; i13 < 6; ++i13) {
                double d=-113.48961;
                i14 += i13;
                d *= i15;
                d -= l3;
            }
            Test.instanceCount = l3;
            i15 *= Test.iFld;
        }
        for (i17 = 8; 239 > i17; ++i17) {
            switch ((i17 % 1) + 3) {
            case 3:
                if (b) break;
                l3 += (((i17 * s) + i13) - i13);
                i18 = i11;
                break;
            }
        }
        long meth_res = l2 + i10 + l3 + i11 + i12 + (b ? 1 : 0) + i13 + i14 + i15 + i17 + i18 + s;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(byte by, int i5) {

        int i6=10, i7=13, i8=-14, i9=191, i19=-24262, i20=226;
        float f=79.254F;
        double d1=108.46006;
        short s1=-7698;

        for (i6 = 4; i6 < 123; ++i6) {
            for (i8 = 1; i8 < 13; ++i8) {
                Test.instanceCount += (((i8 * i7) + Test.instanceCount) - i6);
                if ((Test.iArrFld1[i6 - 1] + i5) >= i7) break;
                f += (((i8 * i9) + Test.iFld) - f);
                switch (((iMeth1(-2684827356071311662L, -27798, Test.instanceCount) >>> 1) % 6) + 40) {
                case 40:
                    for (i19 = 1; i19 < 2; ++i19) {
                        if (Test.bFld) continue;
                        Test.instanceCount *= -177L;
                        d1 += s1;
                    }
                    if (Test.bFld) {
                        Test.instanceCount = 0;
                        d1 *= 653L;
                        i7 = (int)Test.instanceCount;
                        Test.iFld = Test.iFld;
                    } else if (Test.bFld) {
                        i9 >>= i19;
                    }
                    break;
                case 41:
                    if (Test.bFld) break;
                    break;
                case 42:
                    Test.instanceCount -= i5;
                    break;
                case 43:
                    Test.iFld = i7;
                    break;
                case 44:
                    by += (byte)(i8 | Test.instanceCount);
                    break;
                case 45:
                    Test.iFld += (int)f;
                    break;
                }
            }
        }
        long meth_res = by + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + i19 + i20 + Double.doubleToLongBits(d1)
            + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i4, long l, long l1) {

        byte by1=26;
        int i21=14, i22=-2, i23=55174, i24=7, i25=10;

        i4 = iMeth((byte)(-67), Test.iFld);
        by1 -= (byte)Test.iFld;
        for (i21 = 14; 372 > i21; ++i21) {
            if (Test.iFld != 0) {
            }
            Test.fFld += (i21 * i21);
            i23 = 1;
            do {
                for (i24 = 1; 1 > i24; i24++) {
                    l += (i24 * i24);
                    Test.fFld *= i24;
                    i4 += -9;
                    Test.instanceCount <<= i23;
                }
                if (Test.bFld) {
                    Test.instanceCount ^= Test.iFld;
                    l <<= i22;
                    Test.iArrFld1 = Test.iArrFld1;
                }
            } while (++i23 < 5);
        }
        long meth_res = i4 + l + l1 + by1 + i21 + i22 + i23 + i24 + i25;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=149, i2=-14, i3=14136, i26=-16147, i27=-24040, i28=-179, i29=-44, i30=-11, i31=24, i32=-105;
        byte by2=30;
        long l4=211L, lArr[]=new long[N];
        short s2=24218;
        double d2=1.115413;

        FuzzerUtils.init(lArr, -62766L);

        for (int smallinvoc=0; smallinvoc<177; smallinvoc++) vSmallMeth();
        i1 = (i1 = i1);
        for (i2 = 17; 288 > i2; ++i2) {
            iArrFld[i2] = (iArrFld[i2] = iArrFld[i2]);
            Test.instanceCount = iArrFld[i2][i2];
            iArrFld[i2 - 1] = iArrFld[i2];
            vSmallMeth();
            fMeth(i2, Test.instanceCount, -50110740530532845L);
            by2 += (byte)Test.instanceCount;
            Test.instanceCount = i1;
            for (l4 = 4; l4 < 93; ++l4) {
                Test.instanceCount += l4;
                lArr[i2 + 1] = l4;
                Test.iArrFld1 = Test.iArrFld1;
                s2 += (short)5453;
                for (i27 = 2; i27 > l4; --i27) {
                    i3 += (((i27 * Test.instanceCount) + l4) - i2);
                    Test.fFld += 52526;
                    Test.instanceCount = l4;
                    lArr[(int)(l4)] -= Test.iFld;
                }
                if (Test.bFld) continue;
                i28 = Test.iFld;
                d2 = Test.fFld;
            }
            for (i29 = 93; i29 > 4; i29 -= 3) {
                Test.instanceCount = i30;
                for (i31 = 1; i31 < 4; ++i31) {
                    by2 -= (byte)s2;
                    i3 *= i29;
                    Test.instanceCount ^= i29;
                    i3 += (i31 * i31);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
