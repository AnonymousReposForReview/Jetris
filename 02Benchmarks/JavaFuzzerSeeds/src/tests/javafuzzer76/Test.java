package tests.javafuzzer76;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:51:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public volatile int iFld=-36104;
    public static double dFld=-88.77027;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 251);
        FuzzerUtils.init(Test.fArrFld, -1.889F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i5=-5406, i6=99, i7=44852, i8=42561, i9=23095, i10=-140;
        byte by1=33;
        float f1=-110.771F, f2=0.333F;
        short s=-21910;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2197881636L);

        i5 -= by1;
        lArr1[(28433 >>> 1) % N] -= (long)f1;
        for (i6 = 2; i6 < 133; i6++) {
            Test.iArrFld[i6] = i6;
            switch ((((i6 >>> 1) % 8) * 5) + 100) {
            case 115:
                for (f2 = i6; f2 < 12; f2 += 2) {
                    f1 += -69.720F;
                    by1 *= (byte)i5;
                    f1 += Test.instanceCount;
                    for (i9 = 1; i9 < 1; ++i9) {
                        Test.instanceCount += i9;
                        lArr1[i9 + 1] = Test.instanceCount;
                        lArr1[i6 + 1] += s;
                        s += (short)i9;
                    }
                    i7 = (int)Test.instanceCount;
                }
                break;
            case 126:
                i10 -= (int)Test.dFld;
            case 113:
                Test.iArrFld[i6] = (int)f1;
            case 129:
                i8 = i10;
                break;
            case 136:
                i5 = i10;
                break;
            case 140:
                i7 = (int)Test.instanceCount;
                break;
            case 118:
                i8 = i8;
                break;
            case 121:
                Test.instanceCount >>= i8;
                break;
            }
        }
        long meth_res = i5 + by1 + Float.floatToIntBits(f1) + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + s +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i1=-12, i2=135, i3=6, i4=11, iArr[]=new int[N];
        byte by=29;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 5576);
        FuzzerUtils.init(fArr, -100.415F);
        FuzzerUtils.init(lArr, -149L);

        for (i1 = 370; i1 > 18; i1--) {
            i2 += (-13 + (i1 * i1));
            iArr[i1 - 1] <<= 158;
        }
        for (float f : fArr) {
            for (i3 = 4; i3 > 1; i3--) {
                iArr[i3] = (((by * by) | (iArr[i3 - 1]--)) + (--i4));
            }
            i4 = i1;
            f = lArr[(i1 >>> 1) % N];
            fArr[(i1 >>> 1) % N] -= lMeth();
            Test.iArrFld[(-189 >>> 1) % N] <<= i4;
            fArr[(i3 >>> 1) % N] += i3;
            i4 = i1;
            lArr[(i2 >>> 1) % N] >>>= i2;
            f = i4;
        }
        iArr[(i1 >>> 1) % N] *= -240;
        vMeth_check_sum += i1 + i2 + i3 + i4 + by + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i, long l) {


        vMeth();
        i = i;
        vSmallMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        double d=0.71453;

        d -= (--iFld);
        for (int smallinvoc=0; smallinvoc<711; smallinvoc++) vSmallMeth(8473, -249L);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
