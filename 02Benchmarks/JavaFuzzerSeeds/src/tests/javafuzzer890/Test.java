package tests.javafuzzer890;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:18:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7826447410760190744L;
    public static int iFld=-5;
    public static float fFld=0.508F;
    public static boolean bFld=false;
    public static byte byFld=-105;
    public static int iFld1=-14;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static short sArrFld[][]=new short[N][N];
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.dArrFld, -109.46506);
        FuzzerUtils.init(Test.sArrFld, (short)-26743);
        FuzzerUtils.init(Test.byArrFld, (byte)3);
        FuzzerUtils.init(Test.lArrFld, -2260116815006582312L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vMeth(double d) {


        Test.iFld = (int)(((Test.iFld - d) * (Test.iFld - -183)) * (Test.iFld -= Integer.reverseBytes(Test.iFld)));
        vMeth_check_sum += Double.doubleToLongBits(d);
    }

    public static int iMeth(int i9, int i10, long l) {

        long l1=-21787L;
        int i11=-58536, i12=-252, i13=-5;
        double d2=17.76435;
        short s1=3994;

        for (l1 = 11; l1 < 358; l1++) {
            Test.iFld += i10;
            i9 <<= -76;
            Test.fFld = Test.fFld;
            Test.iArrFld[(int)(l1)] = i11;
            d2 -= d2;
            for (i12 = 1; i12 < 5; ++i12) {
                i10 -= i13;
                Test.instanceCount >>= -1925856548480326071L;
                Test.fFld += s1;
                i11 -= 38469;
                Test.bFld = Test.bFld;
                Test.instanceCount -= i12;
            }
            i13 = i13;
            Test.fFld *= i9;
        }
        long meth_res = i9 + i10 + l + l1 + i11 + Double.doubleToLongBits(d2) + i12 + i13 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3, short s, int i4) {

        int i6=3, i7=-160, i8=-3, i14=6;
        float f=-47.768F, fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 0.300F);
        FuzzerUtils.init(lArr, 36L);

        for (int i5 : Test.iArrFld) {
            i4 += (int)fArr[(i4 >>> 1) % N];
            for (i6 = 4; 1 < i6; i6--) {
                i7 = (int)fArr[i6 - 1];
                Test.iArrFld[i6 + 1] += (int)((f--) - Integer.reverseBytes(i8 + -52));
                lArr[i6 - 1][i6 + 1] >>>= (Test.iArrFld[i6] - iMeth(i7, i4, Test.instanceCount));
            }
            switch (((-237 >>> 1) % 1) + 67) {
            case 67:
                try {
                    Test.iFld = (i3 / i8);
                    Test.iFld = (-134068946 % Test.iArrFld[(14547 >>> 1) % N]);
                    i3 = (-69 / i8);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                Test.instanceCount <<= i3;
            }
            i8 <<= 61;
            i14 = 4;
            do {
                Test.iArrFld[i14 - 1] = i7;
                s = (short)f;
                Test.iArrFld[i14] += i5;
                Test.iArrFld[i14] = (int)Test.instanceCount;
            } while (--i14 > 0);
        }
        vMeth1_check_sum += i3 + s + i4 + i6 + i7 + Float.floatToIntBits(f) + i8 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static double dMeth() {

        short s2=31329;
        int i15=151, i16=69, i17=-237;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        vMeth1(Test.iFld, s2, Test.iFld);
        i15 = 1;
        while (++i15 < 186) {
            Test.iFld += (int)Test.fFld;
            Test.iArrFld[i15 - 1] = Test.iFld;
            Test.sArrFld[i15][i15 + 1] += (short)Test.iFld;
            i16 = 1;
            while (++i16 < 9) {
                Test.byFld = (byte)Test.fFld;
                Test.iFld *= (int)2.555F;
                Test.iFld <<= 8;
                Test.iFld = (int)Test.instanceCount;
                i17 = 1;
                while (++i17 < 1) {
                    Test.instanceCount += (i17 * i17);
                    bArr[i17] = Test.bFld;
                    Test.iFld = i17;
                    Test.iFld += (i17 * i17);
                }
            }
        }
        long meth_res = s2 + i15 + i16 + i17 + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=52456, i1=14, i2=122, i18=92, i19=42351, i20=108, i21=65, i22=8, i23=187, iArr[][]=new int[N][N];
        short s3=30778;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr, -48899);
        FuzzerUtils.init(bArr1, false);

        i -= (Test.iArrFld[(i >>> 1) % N]++);
        for (i1 = 145; i1 > 6; i1--) {
            double d1=1.43488;
            vMeth(Math.abs(d1));
            vMeth(dMeth());
            Test.fFld *= Test.instanceCount;
            switch ((i1 % 7) + 46) {
            case 46:
                for (i18 = 9; i18 < 180; i18++) {
                    if (Test.bFld) {
                        i19 = Test.iFld;
                        if (Test.bFld) {
                            i2 = (int)Test.instanceCount;
                            i = i;
                            Test.iFld += s3;
                            i19 ^= Test.iFld1;
                        }
                        Test.instanceCount -= Test.byFld;
                    } else {
                        i19 <<= (int)Test.instanceCount;
                        Test.byArrFld[i1 - 1] -= (byte)i1;
                        Test.fFld = Test.fFld;
                    }
                    i <<= (int)Test.instanceCount;
                    Test.iFld <<= 9;
                    for (i20 = 1; i20 < 2; ++i20) {
                        iArr = iArr;
                        d1 = i1;
                        Test.iArrFld[i1 - 1] = i20;
                        d1 += i20;
                        Test.iFld1 -= i18;
                    }
                    for (i22 = 1; i22 < 2; ++i22) {
                        if (true) {
                            iArr[i22 + 1][i18] += i18;
                            Test.bFld = Test.bFld;
                        } else if (Test.bFld) {
                            i += i20;
                        } else {
                            i = i23;
                        }
                    }
                }
                break;
            case 47:
                i2 -= i20;
                break;
            case 48:
                bArr1[i1 - 1] = true;
                break;
            case 49:
                Test.lArrFld[i1 + 1] = i18;
                break;
            case 50:
                Test.instanceCount -= i1;
            case 51:
                d1 = i21;
                break;
            case 52:
                Test.instanceCount = Test.instanceCount;
                break;
            default:
                Test.iFld1 = i;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
