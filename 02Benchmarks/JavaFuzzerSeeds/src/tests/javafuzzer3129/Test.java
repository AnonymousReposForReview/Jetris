package tests.javafuzzer3129;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:27:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-35L;
    public static short sFld=-9454;
    public static boolean bFld=false;
    public static byte byFld=25;
    public static double dFld=-1.55903;
    public static long lFld=-11L;
    public volatile long lArrFld[]=new long[N];
    public static volatile boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        float f1=-1.813F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -3L);

        lArr1[(i8 >>> 1) % N][(-11399 >>> 1) % N] = 1760;
        f1 += i8;
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth() {

        int i2=11, i3=-95, i4=0, i5=-17201, i6=1, i7=12, i9=40067, i10=157, i11=-4, i12=46259, iArr[]=new int[N],
            iArr1[]=new int[N];
        double d=-2.121087;
        float f2=14.266F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 49278);
        FuzzerUtils.init(lArr, 6L);
        FuzzerUtils.init(iArr1, -32577);

        for (i2 = 385; i2 > 15; i2--) {
            for (i4 = 1; i4 < 5; ++i4) {
                i5 = iArr[i4 - 1];
            }
            Test.instanceCount <<= (long)(Test.sFld - ((-(i4 - d)) + (++lArr[(i5 >>> 1) % N])));
        }
        for (i6 = 6; i6 < 306; ++i6) {
            vMeth1(i6);
            iArr = iArr;
            switch (((-16321 >>> 1) % 7) + 101) {
            case 101:
                for (i9 = 1; i9 < 6; i9++) {
                    for (i11 = 1; i11 < 2; i11++) {
                        iArr[i9 + 1] = (int)d;
                        switch (((i4 >>> 1) % 4) + 21) {
                        case 21:
                            Test.bFld = Test.bFld;
                            Test.bFld = Test.bFld;
                            break;
                        case 22:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 23:
                            i12 += i5;
                            break;
                        case 24:
                            iArr[i9] += Test.sFld;
                            break;
                        }
                    }
                }
                break;
            case 102:
                iArr1[i6] >>= i3;
                break;
            case 103:
                iArr[(i4 >>> 1) % N] = i11;
                break;
            case 104:
                i7 += (i6 * i6);
            case 105:
                i5 ^= (int)Test.instanceCount;
                break;
            case 106:
                f2 = Test.byFld;
            case 107:
                i7 += (int)(-9434L + (i6 * i6));
                break;
            default:
                Test.instanceCount -= i5;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i9 + i10 + i11 + i12 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i1) {

        int i14=14, i15=-73, i16=235, iArr2[]=new int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 10);
        FuzzerUtils.init(lArr2, 13L);

        Test.sFld -= (short)(-(i1--));
        l >>= (long)(iMeth() * 0.1012F);
        i1 = (int)-1.507F;
        for (int i13 : iArr2) {
            l >>= -187;
            switch ((((i13 >>> 1) % 10) * 5) + 22) {
            case 34:
                Test.dFld -= Test.dFld;
                for (i14 = 4; 1 < i14; i14 -= 3) {
                    float f3=1.574F;
                    i15 += (int)f3;
                    i15 = (int)Test.dFld;
                    iArr2[i14] += i15;
                }
                i16 = 1;
                while (++i16 < 4) {
                    if (i13 != 0) {
                        vMeth_check_sum += l + i1 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr2) +
                            FuzzerUtils.checkSum(lArr2);
                        return;
                    }
                    Test.instanceCount *= i13;
                    Test.instanceCount = Test.instanceCount;
                }
            case 24:
                l >>>= i16;
            case 58:
            case 53:
                i13 &= -48266;
            case 46:
                i13 >>= i16;
                break;
            case 27:
                Test.bArrFld[(i13 >>> 1) % N][(i15 >>> 1) % N] = Test.bFld;
                break;
            case 71:
                lArr2[(i16 >>> 1) % N] -= i16;
                break;
            case 67:
                Test.instanceCount = -1897099522L;
            case 72:
                i13 = Test.sFld;
                break;
            case 38:
                i15 = i13;
                break;
            }
        }
        vMeth_check_sum += l + i1 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=48664, i17=151, i18=-11, i19=-42917, i20=11, i21=-3, i22=14, iArr3[]=new int[N];
        float f=1.760F, f4=-15.574F;
        long l2=4293515124L, l3=11L;
        double d1=125.101055;

        FuzzerUtils.init(iArr3, 25917);

        lArrFld[(237 >>> 1) % N] >>= (long)(Math.abs(i) - ((i * i) - (f - i)));
        vMeth(Test.instanceCount, i);
        for (f4 = 6; f4 < 382; f4++) {
            f = Test.lFld;
            f *= i;
            i17 ^= i17;
            Test.lFld >>= i;
            i = -110;
            if (true) continue;
            i17 = (int)l2;
            for (i18 = 67; i18 > 2; i18--) {
                f = i19;
                Test.instanceCount += i;
                Test.instanceCount += (-34520L + (i18 * i18));
                for (l3 = 1; l3 < 2; ++l3) {
                    f -= i17;
                }
                lArrFld[(int)(f4 - 1)] *= l3;
                Test.byFld >>>= (byte)i19;
                for (d1 = 1; d1 < 2; d1++) {
                    i21 += (int)d1;
                }
                Test.bFld = Test.bFld;
                i19 -= i;
                i22 = 1;
                do {
                    f += (i22 * i22);
                    iArr3[(int)(f4 + 1)] = i22;
                    l2 += i22;
                    iArr3[i18 - 1] ^= (int)l2;
                    i += -25154;
                    i20 -= i21;
                    i17 -= (int)f4;
                } while (++i22 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
