package tests.javafuzzer2821;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:56:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1254082889273241079L;
    public static float fFld=115.58F;
    public long lFld=-243L;
    public double dFld=2.87533;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, int i10) {

        int i11=28042, i12=20, i13=8, i14=49878, i15=-158, iArr[]=new int[N];
        double d4=1.11896, d5=63.56094;
        short s=8332;
        boolean b2=false;

        FuzzerUtils.init(iArr, -208);

        i9 = i9;
        for (i11 = 6; i11 < 266; i11++) {
            for (i13 = 6; i13 > 1; i13 -= 2) {
                for (d4 = i11; 3 > d4; d4 += 3) {
                    i15 += (int)d4;
                    i12 = i9;
                    if (i9 != 0) {
                        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d4) + i15 +
                            Double.doubleToLongBits(d5) + s + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    d5 += Test.instanceCount;
                    if (b2) {
                        iArr[i13 + 1] = s;
                        Test.fFld = Test.instanceCount;
                        Test.instanceCount *= (long)d5;
                        i10 += (int)d4;
                        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d4) + i15 +
                            Double.doubleToLongBits(d5) + s + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                        return;
                    } else if (b2) {
                        i14 += (int)Test.instanceCount;
                        i12 = -105;
                    } else if (b2) {
                        i14 += i13;
                    } else {
                        i9 += (int)(d4 - i9);
                    }
                }
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d4) + i15 +
            Double.doubleToLongBits(d5) + s + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i6=21510, i7=7, i8=-38686, i16=0, i17=235, i18=37, i19=-68, iArr1[]=new int[N];
        double d3=0.13588;
        short s1=20549;

        FuzzerUtils.init(iArr1, 53);

        for (i6 = 245; 10 < i6; i6--) {
            if ((((d3 + Test.instanceCount) * (i7 = i6)) + (i7++)) == (-((-(i6 + Test.fFld)) + d3))) continue;
            i8 = 1;
            while ((i8 += 2) < 7) {
                vMeth1(i8, 32474);
                Test.instanceCount |= Test.instanceCount;
                i7 += i8;
            }
            for (i16 = 1; i16 < 7; i16++) {
                s1 = (short)i7;
                for (i18 = 2; i18 > i6; i18--) {
                    Test.instanceCount *= i6;
                    d3 *= -94;
                    i7 = i19;
                    Test.fFld *= i8;
                    iArr1[i18 - 1] += -1;
                    i7 = i18;
                }
            }
        }
        long meth_res = i6 + i7 + Double.doubleToLongBits(d3) + i8 + i16 + i17 + s1 + i18 + i19 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i1) {

        float f=-1.58F, f1=-2.636F;
        int i2=8086, i3=0, i4=24620, i5=-109;
        double d1=2.5854, d2=112.89178, dArr[]=new double[N];
        boolean b1=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -1217512396L);
        FuzzerUtils.init(dArr, 0.117280);

        for (f = 5; f < 312; ++f) {
            for (i3 = 1; i3 < 5; i3++) {
                i1 = (int)f;
                for (d1 = 1; 2 > d1; ++d1) {
                    i2 += (28 + (d1 * d1));
                    i2 += (int)(d1 + l);
                    l *= (long)(f1++);
                    i2 += (int)(((d1 * l) + i1) - f);
                    d2 = -146;
                    i5 |= -32946;
                    if (b1) continue;
                    Test.instanceCount = Math.max(lMeth(), l);
                    lArr[i3][(int)(f)] ^= i5;
                }
            }
            lArr[(int)(f + 1)][(int)(f + 1)] <<= Test.instanceCount;
            dArr = dArr;
        }
        vMeth_check_sum += l + i1 + Float.floatToIntBits(f) + i2 + i3 + i4 + Double.doubleToLongBits(d1) + i5 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i=240, i20=-176, i21=-38943, i22=-25741, i23=9, i24=183, i25=-221, i26=-12, iArr2[]=new int[N];
        double d=-105.21991;
        byte by=57;
        short s2=-18111;

        FuzzerUtils.init(iArr2, -13572);

        b = (i == (i - (8 / (((long)(i - d)) | 1))));
        vMeth(Test.instanceCount, i);
        by -= (byte)Test.instanceCount;
        i20 = 1;
        do {
            Test.instanceCount += (165 + (i20 * i20));
            i -= s2;
            i >>= i20;
            for (i21 = i20; i21 < 80; i21++) {
                Test.instanceCount *= i20;
                i22 += i21;
                Test.instanceCount <<= Test.instanceCount;
                i22 = (int)-814080371L;
                for (i23 = 1; i23 < 1; ++i23) {
                    i24 = i20;
                }
                switch (((i23 >>> 1) % 9) + 74) {
                case 74:
                    for (i25 = 1; i25 < 1; ++i25) {
                        i22 *= (int)d;
                        iArr2[(13 >>> 1) % N] /= (int)(Test.instanceCount | 1);
                        Test.instanceCount <<= Test.instanceCount;
                        Test.fFld += (i25 - i21);
                    }
                    i22 += i;
                    i26 >>= i;
                    break;
                case 75:
                    dArrFld[i21 + 1] = Test.instanceCount;
                    i24 = -18229;
                    lFld *= lFld;
                    break;
                case 76:
                    if (b) break;
                    s2 -= (short)Test.fFld;
                    lFld = (long)dFld;
                    break;
                case 77:
                    i24 += (i21 ^ Test.instanceCount);
                    lFld >>= i26;
                    break;
                case 78:
                    i = i25;
                    break;
                case 79:
                    Test.instanceCount += i21;
                    break;
                case 80:
                    i *= i24;
                    break;
                case 81:
                    by += (byte)(((i21 * i21) + s2) - i21);
                case 82:
                    dFld += i23;
                    break;
                }
            }
        } while (++i20 < 314);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
