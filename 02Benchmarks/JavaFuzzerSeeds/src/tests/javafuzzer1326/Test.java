package tests.javafuzzer1326;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:21:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8546533596718268699L;
    public static float fFld=72.416F;
    public static boolean bFld=false;
    public volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld1[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -104.913F);
        FuzzerUtils.init(Test.iArrFld1, 48333);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, int i10, long l2) {

        int i11=-7, i12=-4, i13=1, i14=-37725, i15=-5;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3169014054L);

        for (i11 = 9; i11 < 149; i11++) {
            Test.fArrFld[i11 + 1] -= Test.fFld;
            lArr[i11 + 1] += Test.instanceCount;
            i13 = 11;
            while (--i13 > 0) {
                Test.iArrFld1 = FuzzerUtils.int2array(N, (int)11);
                Test.fFld += i13;
                lArr[i11] += i12;
            }
            for (i14 = 1; 11 > i14; ++i14) {
                switch ((i14 % 2) + 27) {
                case 27:
                    i10 += (-101 + (i14 * i14));
                    i15 = (int)l2;
                    i10 |= i14;
                    d *= i15;
                case 28:
                default:
                    d += i12;
                    i10 += i12;
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i10 + l2 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l, int i9, long l1) {

        double d1=0.107212;
        int i16=-199, i17=44785, i18=118;
        short s=-17719;
        boolean b=true;

        vMeth2(d1, i9, l);
        i9 = (int)l;
        for (i16 = 5; i16 < 309; i16 += 3) {
            i9 += i16;
            Test.iArrFld1[i16][i16] = i9;
            switch ((((i16 >>> 1) % 2) * 5) + 94) {
            case 97:
                if (i17 != 0) {
                    vMeth1_check_sum += l + i9 + l1 + Double.doubleToLongBits(d1) + i16 + i17 + i18 + s + (b ? 1 : 0);
                    return;
                }
                break;
            case 103:
                l1 = l1;
                i9 += (((i16 * i9) + i16) - i16);
            }
            i17 -= (int)l;
            Test.iArrFld1[i16 - 1][i16] = (int)-1.83F;
            i18 *= s;
            l1 <<= i9;
            if (b) break;
            Test.fFld = (float)d1;
        }
        vMeth1_check_sum += l + i9 + l1 + Double.doubleToLongBits(d1) + i16 + i17 + i18 + s + (b ? 1 : 0);
    }

    public void vMeth() {

        int i6=32, i7=-1, i8=4505, i19=11301, i20=31715, i21=-22;
        byte by=42;
        boolean b1=true;
        double d2=-10.97474;
        long l3=-36129L;
        short s1=-8526;

        i6 = (int)(Test.instanceCount - Math.max(-(i6 + i6), by * i6));
        for (i7 = 10; i7 < 165; i7++) {
            vMeth1(Test.instanceCount, i19, -3535235415L);
            for (i20 = 1; i20 < 10; ++i20) {
                i21 += (int)12L;
                if (b1) break;
                Test.instanceCount = i21;
                d2 = i19;
                iArrFld[i7 - 1] <<= i8;
                i6 <<= (int)Test.instanceCount;
                l3 = 1;
                while (++l3 < 2) {
                    switch ((int)((l3 % 3) + 7)) {
                    case 7:
                        Test.instanceCount *= s1;
                        break;
                    case 8:
                        i19 += (int)(l3 * l3);
                        i8 = 7;
                    case 9:
                        Test.instanceCount |= i21;
                    }
                }
            }
        }
        vMeth_check_sum += i6 + by + i7 + i8 + i19 + i20 + i21 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + l3 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i=-216, i2=4, i3=192, i4=7, i5=-13, i22=18603, i23=-4;
        byte by1=-8, byArr[]=new byte[N];
        double d3=96.81496, dArr[]=new double[N];
        short s2=14875;
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)89);
        FuzzerUtils.init(fArr, 0.618F);
        FuzzerUtils.init(dArr, 0.103936);

        if (Test.bFld) {
            byArr[(i >>> 1) % N] >>= (byte)i;
            i |= (int)(--Test.instanceCount);
            for (int i1 : iArrFld) {
                for (i2 = 1; i2 < 63; i2++) {
                    fArr[i2 - 1] = Math.abs(-130L);
                    for (i4 = 2; i4 > i2; i4--) {
                        vMeth();
                        switch (((i4 % 1) * 5) + 81) {
                        case 85:
                            by1 = (byte)i3;
                            lArrFld[i2 - 1] |= i1;
                            if (Test.bFld) break;
                            break;
                        default:
                            i5 = (int)Test.instanceCount;
                        }
                        i5 += (((i4 * i) + Test.fFld) - Test.fFld);
                    }
                    Test.instanceCount += 7869;
                    for (i22 = 2; i2 < i22; --i22) {
                        iArrFld = iArrFld;
                        i3 += (i22 | i5);
                        Test.bFld = Test.bFld;
                        i23 = i2;
                        d3 += -161;
                        i23 %= (int)(i23 | 1);
                        Test.instanceCount -= s2;
                        iArrFld[i2 - 1] -= i2;
                        if (Test.bFld) break;
                    }
                    i += i1;
                    Test.instanceCount += (i2 ^ Test.instanceCount);
                    Test.fFld -= i4;
                    Test.instanceCount <<= i1;
                    Test.instanceCount = i2;
                }
            }
        } else if (Test.bFld) {
            iArrFld[(i23 >>> 1) % N] -= (int)-2782964757L;
        } else if (true) {
            dArr[(i4 >>> 1) % N] -= i23;
        } else {
            s2 = (short)i22;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
