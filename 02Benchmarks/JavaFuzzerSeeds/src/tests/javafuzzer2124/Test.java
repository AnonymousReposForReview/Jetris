package tests.javafuzzer2124;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:13:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-32L;
    public static int iFld=-46085;
    public static boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3881);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8, int i9) {

        int i10=-61276, i11=-173, i12=-75, iArr1[]=new int[N];
        double d=2.42517;
        float f1=39.273F;
        short s1=19916;

        FuzzerUtils.init(iArr1, 48);

        for (i10 = 1; i10 < 177; i10++) {
            switch (((i10 % 8) * 5) + 92) {
            case 129:
                switch ((i10 % 7) + 41) {
                case 41:
                    iArr1 = iArr1;
                    i12 = 1;
                    while (++i12 < 9) {
                        d -= 924025692L;
                        Test.instanceCount ^= i8;
                    }
                    iArr1[i10] <<= (int)Test.instanceCount;
                    break;
                case 42:
                    i11 += 110;
                    if (i9 != 0) {
                    }
                    f1 *= i10;
                    i8 >>= (int)-12L;
                    break;
                case 43:
                    Test.iFld += (((i10 * i11) + i11) - i10);
                    i9 += i10;
                    Test.iFld = i12;
                    break;
                case 44:
                    d = i7;
                case 45:
                    f1 -= i7;
                case 46:
                    if (i8 != 0) {
                    }
                    break;
                case 47:
                    Test.instanceCount += (((i10 * f1) + i9) - Test.iFld);
                default:
                    d += i12;
                }
            case 108:
                Test.instanceCount -= -4822808059338171199L;
                break;
            case 117:
                iArr1[i10 - 1] >>= (int)Test.instanceCount;
                break;
            case 103:
                Test.instanceCount += 12L;
                break;
            case 95:
                i7 = i7;
                break;
            case 124:
                iArr1[i10] |= 6;
            case 99:
                try {
                    i9 = (iArr1[i10 + 1] % i8);
                    i7 = (228 % i11);
                    iArr1[i10 - 1] = (i12 / 16243);
                } catch (ArithmeticException a_e) {}
                break;
            case 97:
                Test.instanceCount += Test.instanceCount;
                break;
            default:
                s1 += (short)(i10 * i10);
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, short s) {

        int i3=160, i4=23870, i5=8, i6=-3, i13=6, i14=-254, i15=151, i16=103, iArr2[]=new int[N];
        float f2=57.44F;
        double d1=-19.128796;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 66);

        for (i3 = 14; i3 < 242; i3++) {
            for (i5 = 1; i5 < 7; i5++) {
                Test.instanceCount *= iMeth(14, i5, Test.iFld);
                i13 = 2;
                do {
                    Test.instanceCount *= i14;
                    if (i2 != 0) {
                        vMeth1_check_sum += i2 + s + i3 + i4 + i5 + i6 + i13 + i14 + Float.floatToIntBits(f2) + i15 +
                            i16 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr) +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i6 >>= i14;
                    Test.instanceCount += i13;
                    Test.iFld &= i6;
                } while (--i13 > 0);
                bArr[i3] = Test.bFld;
                f2 = Test.instanceCount;
                switch (((i3 % 6) * 5) + 109) {
                case 110:
                    for (i15 = 2; 1 < i15; i15--) {
                        Test.instanceCount &= Test.iFld;
                        Test.instanceCount >>= i14;
                    }
                    break;
                case 123:
                    Test.iFld -= i6;
                    break;
                case 112:
                    i2 -= i16;
                case 136:
                    i2 -= (int)d1;
                    break;
                case 135:
                    iArr2[i3] = i6;
                    break;
                case 121:
                    if (Test.bFld) break;
                    break;
                default:
                    i16 += i2;
                }
            }
        }
        vMeth1_check_sum += i2 + s + i3 + i4 + i5 + i6 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i1) {

        int i18=141, i19=116, i20=-5, i21=2141, i22=-9, i23=-73, i24=0;
        float f3=-1.311F;

        vMeth1(i1, (short)(-3402));
        for (int i17 : Test.iArrFld) {
            for (i18 = 4; i18 > 1; i18--) {
                Test.instanceCount = i18;
            }
            Test.instanceCount = Test.instanceCount;
        }
        Test.instanceCount *= Test.instanceCount;
        Test.iFld <<= i18;
        Test.bFld = true;
        i20 = 1;
        do {
            for (i21 = 1; i21 < 7; i21++) {
                for (i23 = 1; i23 < 2; ++i23) {
                    i22 += (i23 + i20);
                    Test.iArrFld[i23 - 1] <<= i1;
                }
                i22 -= (int)f3;
                if (i1 != 0) {
                    vMeth_check_sum += i1 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f3);
                    return;
                }
            }
        } while (++i20 < 220);
        vMeth_check_sum += i1 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.691F;
        int i=-42, i26=84, i27=-13, i28=9619, i29=-66, i30=-43174, iArr[]=new int[N];
        short s2=22552;
        double d2=-22.8010;
        byte by=109;

        FuzzerUtils.init(iArr, -8);

        iArr[(Test.iFld >>> 1) % N] = (int)(((Test.iFld + -502599817L) * f) - (-Math.max(Test.iFld, i)));
        vMeth(Test.iFld);
        s2 += (short)1.118357;
        for (int i25 : Test.iArrFld) {
            d2 = s2;
            Test.instanceCount -= (long)-89.29121;
            for (i26 = 3; i26 < 63; ++i26) {
                f -= -27;
                i27 -= (int)d2;
                switch (((i26 % 10) * 5) + 36) {
                case 66:
                case 63:
                    i25 = i27;
                    for (i28 = 2; 1 < i28; i28 -= 2) {
                        Test.instanceCount = Test.instanceCount;
                        i29 += (i28 | i27);
                        iArr[i28] -= (int)94.20973;
                        Test.instanceCount *= (long)f;
                        Test.instanceCount -= i29;
                    }
                    i25 += by;
                    break;
                case 52:
                    i30 = 1;
                    do {
                        iArr[i30] = (int)Test.instanceCount;
                        i25 <<= (int)-57265L;
                        iArr[i30] *= i30;
                        Test.instanceCount += (-29606 + (i30 * i30));
                        i27 -= i25;
                        f -= i26;
                        iArr[i26 + 1] >>= Test.iFld;
                    } while (++i30 < 2);
                    Test.iFld = i27;
                    Test.iArrFld[i26] += -56;
                    Test.instanceCount = Test.iFld;
                case 56:
                    i25 <<= (int)2540456024L;
                    break;
                case 64:
                    f += i26;
                case 67:
                    iArr[i26 - 1] <<= i29;
                    break;
                case 61:
                case 48:
                    s2 += (short)116;
                    break;
                case 46:
                    f = i30;
                case 72:
                    Test.instanceCount += i26;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
