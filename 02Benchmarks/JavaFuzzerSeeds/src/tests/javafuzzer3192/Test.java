package tests.javafuzzer3192;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:37:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2786732809L;
    public static int iFld=84;
    public static double dFld=42.97775;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -51596);
        FuzzerUtils.init(Test.lArrFld, 1L);
        FuzzerUtils.init(Test.dArrFld, -12.33090);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i7, int i8, int i9) {

        int i10=28918, i11=-8887, i12=7, i13=4;
        float f1=124.511F;
        byte by1=48;
        boolean b=false;

        Test.instanceCount &= i9;
        for (i10 = 8; i10 < 254; i10++) {
            boolean b1=false;
            Test.iArrFld[i10 - 1] -= -16712;
            for (i12 = 1; i12 < 7; ++i12) {
                i9 -= i7;
                Test.dFld -= 3;
                Test.iFld = i13;
                i8 += (int)Test.instanceCount;
                Test.instanceCount -= i11;
                Test.instanceCount += (long)f1;
                Test.instanceCount *= i12;
            }
            by1 = (byte)45042;
            b = b1;
            Test.dFld = i10;
            i8 = i11;
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + by1 + (b ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(byte by, int i) {

        int i1=37803, i2=-63630, i3=-4, i4=6, i5=93, i6=-195, iArr[]=new int[N];
        short s=-7664;
        boolean b2=false;
        float f2=63.431F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(lArr, 6L);

        for (i1 = 9; i1 < 151; ++i1) {
            iArr[i1 - 1] = (s--);
            for (i3 = 1; 11 > i3; i3++) {
                Test.iFld ^= (int)((lArr[i1] * (-4860 + (-224 - (++Test.dFld)))) - Test.iFld);
                for (i5 = 1; i5 < 2; i5 += 3) {
                    switch ((i1 % 1) + 94) {
                    case 94:
                        by *= (byte)(--i6);
                        Test.dFld *= (-(iArr[i3 + 1] = (--i6)));
                        i &= i2;
                        break;
                    default:
                        fMeth(Test.iFld, i4, i4);
                        Test.instanceCount = 5L;
                        if (b2) continue;
                    }
                    i &= i1;
                    Test.instanceCount = -40;
                    f2 += i5;
                }
            }
        }
        long meth_res = by + i + i1 + i2 + s + i3 + i4 + i5 + i6 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f) {

        byte by2=106;
        int i14=40954, i15=3, iArr1[]=new int[N];
        boolean b3=false;
        short s1=-26116;

        FuzzerUtils.init(iArr1, 10);

        Test.iFld = (int)(((--Test.iFld) / ((long)(f) | 1)) * iMeth1(by2, Test.iFld));
        Test.instanceCount = 3385908451342416216L;
        Test.iFld = -49644;
        for (i14 = 4; i14 < 224; ++i14) {
            Test.lArrFld[i14 - 1] += i14;
            Test.iFld = i15;
            Test.instanceCount += -3L;
            f -= i14;
            switch ((((i15 >>> 1) % 1) * 5) + 31) {
            case 35:
                iArr1[i14 - 1] <<= Test.iFld;
            default:
                b3 = b3;
                switch ((i14 % 8) + 100) {
                case 100:
                    Test.iFld ^= Test.iFld;
                    break;
                case 101:
                    Test.instanceCount += i14;
                    Test.iFld = (int)Test.instanceCount;
                    break;
                case 102:
                    Test.iFld += (int)f;
                case 103:
                    Test.lArrFld[i14] = Test.iFld;
                    break;
                case 104:
                case 105:
                    Test.instanceCount = s1;
                    break;
                case 106:
                    Test.instanceCount >>= Test.instanceCount;
                    break;
                case 107:
                    Test.dArrFld[i14 - 1] = f;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + by2 + i14 + i15 + (b3 ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=-32488, i17=608, i18=-7689, i19=12, i20=137, i21=-7, i22=8, i23=-9;
        boolean b4=true, bArr[]=new boolean[N];
        short s2=-3766;
        byte by3=-109;

        FuzzerUtils.init(bArr, false);

        iMeth(0.930F);
        for (i16 = 4; 145 > i16; i16++) {
            for (i18 = 10; i18 < 178; ++i18) {
                float f3=1.712F;
                i20 *= i19;
                i19 = (int)1040138369L;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.iArrFld[i21 - 1] += i21;
                    bArr[i21] = b4;
                }
                Test.lArrFld = Test.lArrFld;
                Test.instanceCount -= -7;
                f3 += i18;
                i23 = 1;
                do {
                    i19 = 2;
                    Test.iFld += (((i23 * i18) + i18) - i16);
                    i20 *= (int)f3;
                    switch ((((i17 >>> 1) % 4) * 5) + 17) {
                    case 36:
                        i20 += s2;
                        i22 += i17;
                        break;
                    case 37:
                        Test.instanceCount >>= Test.instanceCount;
                        i20 = i18;
                        Test.instanceCount -= i23;
                        i20 = i18;
                    case 18:
                        Test.instanceCount = i22;
                        i19 = (int)Test.instanceCount;
                        break;
                    case 31:
                        switch (((-170 >>> 1) % 6) + 11) {
                        case 11:
                            i17 = (int)Test.instanceCount;
                            break;
                        case 12:
                            f3 += (((i23 * i17) + Test.instanceCount) - i23);
                            Test.lArrFld[i23] += i23;
                            break;
                        case 13:
                            by3 *= (byte)i19;
                        case 14:
                            Test.dFld += Test.dFld;
                            break;
                        case 15:
                            i19 -= (int)Test.dFld;
                        case 16:
                            i22 += (int)f3;
                        }
                        break;
                    default:
                        i22 += (116 + (i23 * i23));
                    }
                } while (++i23 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
