package tests.javafuzzer1355;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:38:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static double dFld=74.15345;
    public static boolean bFld=true;
    public static short sFld=-18312;
    public volatile int iFld=153;
    public static byte byFld=-55;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.lArrFld, 602006558L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        long l1=2383051050273531056L, l2=14L;
        int i3=-33273, i4=181, i5=53128;
        short s=2112, s1=25847;
        float f1=-28.517F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)29);

        for (l1 = 14; 255 > l1; l1++) {
            i4 = 1;
            do {
                s = (short)l1;
                Test.dFld = l1;
                Test.iArrFld = Test.iArrFld;
                Test.lArrFld[i4] *= 58435;
                Test.dFld = i4;
            } while (++i4 < 7);
            l2 = 1;
            do {
                s += (short)l2;
                s1 += (short)48;
                switch (((i3 >>> 1) % 2) + 90) {
                case 90:
                    i5 = 1;
                    while (++i5 < 1) {
                        i3 -= (int)f1;
                        if (Test.bFld) break;
                        byArr[i5] += (byte)Test.dFld;
                    }
                    break;
                case 91:
                    i3 = 2;
                    break;
                }
            } while (++l2 < 7);
        }
        long meth_res = l1 + i3 + i4 + s + l2 + s1 + i5 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i1=7, i2=-27709, i6=-27882, i7=-59600, i8=57, i9=-61443, i10=15, i11=-12;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 4957772299193716225L);
        FuzzerUtils.init(dArr, 111.39748);

        i1 = (int)(-lArr[(i1 >>> 1) % N]);
        i2 = 1;
        while (++i2 < 134) {
            Test.instanceCount += i2;
            i1 = iMeth();
        }
        i1 = -1;
        for (i6 = 304; i6 > 9; i6 -= 2) {
            for (i8 = 1; i8 < 11; i8++) {
                Test.instanceCount += i8;
            }
            Test.iArrFld[i6 + 1] -= -70;
        }
        i9 = (int)Test.instanceCount;
        for (i10 = 15; i10 < 301; i10++) {
            dArr = dArr;
            i9 += i10;
            Test.instanceCount = -8L;
            i9 = i10;
        }
        long meth_res = i1 + i2 + i6 + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, long l, float f) {

        double d=0.3353;
        int i12=48883, i13=-30433, i14=0, i15=-41753, i16=134;

        d = lMeth();
        for (i12 = 17; i12 < 357; ++i12) {
            f += i12;
            Test.iArrFld[i12] = (int)Test.dFld;
            i14 = 1;
            while (++i14 < 5) {
                Test.instanceCount += i13;
                Test.sFld += (short)(i14 | Test.instanceCount);
                for (i15 = 1; i15 < 1; ++i15) {
                    i16 -= i14;
                    i13 += i16;
                    i13 += (((i15 * i12) + i15) - i12);
                    i13 >>= i;
                    try {
                        i16 = (i12 % -1594308257);
                        i13 = (i15 % i12);
                        i = (i14 / i14);
                    } catch (ArithmeticException a_e) {}
                }
                if (Test.bFld) continue;
                Test.iArrFld[i12 - 1] = i15;
            }
        }
        vMeth_check_sum += i + l + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        float f2=0.432F, fArr[]=new float[N];
        int i17=-248, i18=34370, i19=-1468, i20=32847, i21=85, i22=25, i23=-12, i24=200, i25=46196, i26=9, i27=-162,
            i28=-3;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 0.443F);

        vMeth(iFld, -30L, f2);
        iFld -= iFld;
        iFld = (int)f2;
        for (i17 = 5; i17 < 360; ++i17) {
            Test.bFld = Test.bFld;
            for (i19 = 4; i19 < 71; ++i19) {
                i20 += (6 + (i19 * i19));
                for (i21 = 2; i21 > 1; i21--) {
                    iFld >>>= 41308;
                }
                i18 >>= i19;
                i22 += (int)(-11L + (i19 * i19));
            }
            i20 *= (int)f2;
        }
        for (i23 = 8; i23 < 141; i23 += 3) {
            Test.lArrFld[i23 - 1] += 9;
            Test.instanceCount <<= -9;
            if (false) break;
            for (i25 = 231; i25 > 12; i25 -= 2) {
                if (Test.bFld) {
                    i20 += -5;
                    Test.instanceCount = (long)f2;
                    for (i27 = 1; i27 < 6; i27++) {
                        if (Test.bFld) break;
                        Test.instanceCount = Test.sFld;
                        i26 = (int)Test.instanceCount;
                        Test.dFld = i27;
                        bArr[i27 + 1][i23] = Test.bFld;
                        switch ((i23 % 5) + 90) {
                        case 90:
                            i22 = i27;
                            fArr = fArr;
                            Test.byFld = (byte)i23;
                            break;
                        case 91:
                            Test.instanceCount += (((i27 * i20) + Test.instanceCount) - Test.byFld);
                        case 92:
                            Test.byFld = (byte)i25;
                            break;
                        case 93:
                            if (true) break;
                            break;
                        case 94:
                            bArr[i23 - 1][i27 + 1] = Test.bFld;
                            break;
                        }
                    }
                } else if (Test.bFld) {
                    Test.iArrFld = Test.iArrFld;
                } else if (Test.bFld) {
                    Test.iArrFld[i23] = i20;
                } else {
                    i22 = i20;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
