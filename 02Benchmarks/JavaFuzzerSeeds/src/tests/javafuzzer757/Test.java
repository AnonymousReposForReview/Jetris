package tests.javafuzzer757;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:10:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4027933665L;
    public static int iFld=11;
    public static double dFld=2.79326;
    public static int iFld1=-21;
    public byte byFld=-121;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];
    public byte byArrFld[]=new byte[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3585);
        FuzzerUtils.init(Test.dArrFld, 122.127956);
        FuzzerUtils.init(Test.lArrFld, 7419540076372610269L);
        FuzzerUtils.init(Test.iArrFld1, 68);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f2=1.18F;
        int i7=-13, i8=42625, i9=23, i10=-163, i11=-72, i12=13, i13=-89;

        Test.iArrFld[(200 >>> 1) % N] >>= (int)-240L;
        Test.iFld = Test.iFld;
        f2 *= (float)Test.dFld;
        for (i7 = 5; i7 < 254; ++i7) {
            Test.iFld |= Test.iFld;
            i9 = 7;
            do {
                Test.iFld *= i7;
            } while (--i9 > 0);
            Test.iFld -= (int)-81.23F;
            Test.iFld = i7;
            for (i10 = 1; i10 < 7; i10++) {
                i11 += (int)6L;
                for (i12 = 1; i12 < 2; i12++) {
                    Test.iArrFld[i10 + 1] = 57812;
                    Test.dFld = Test.iFld;
                    Test.dArrFld[i10] = i9;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + i12 + i13;
    }

    public static float fMeth(float f1, int i6) {

        int i14=-2, i15=37, i16=6, i17=-1;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 61.877F);

        vMeth();
        fArr[(Test.iFld >>> 1) % N][(i6 >>> 1) % N] -= i6;
        Test.lArrFld[(i6 >>> 1) % N] += (long)f1;
        for (i14 = 2; i14 < 270; ++i14) {
            for (i16 = 1; 6 > i16; i16 += 3) {
                f1 += Test.iFld;
                Test.iFld1 <<= 14;
                Test.instanceCount += i16;
                i6 >>= i16;
                try {
                    i6 = (Test.iFld1 % i16);
                    i17 = (135 % i15);
                    i17 = (i14 % i6);
                } catch (ArithmeticException a_e) {}
                Test.iFld1 = Test.iFld;
            }
            Test.iFld1 = i17;
            if (false) break;
        }
        i15 = i15;
        Test.iFld += Test.iFld1;
        long meth_res = Float.floatToIntBits(f1) + i6 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(long l1, int i1, int i2) {

        int i3=-66, i4=-94, i5=39964, i18=-199, i19=-28022, i20=1, iArr[]=new int[N];
        boolean b=true;
        float f3=0.480F;

        FuzzerUtils.init(iArr, -192);

        i3 = 388;
        while ((i3 -= 2) > 0) {
            for (i4 = 1; i4 < 8; ++i4) {
                b = b;
                switch (((((iArr[(Test.iFld >>> 1) % N] += i4) >>> 1) % 2) * 5) + 116) {
                case 118:
                    if ((-(iArr[i3]--)) != (l1 - fMeth(f3, Test.iFld1))) continue;
                    i2 += i4;
                    if (b) {
                        Test.iFld &= Test.iFld1;
                        Test.iArrFld1[i4] = (int)Test.instanceCount;
                    }
                    break;
                case 123:
                    for (i18 = 1; i18 < 2; i18++) {
                        f3 += (-59316L + (i18 * i18));
                        i5 += (i18 + f3);
                        f3 += Test.iFld;
                        Test.dArrFld[i4] += i5;
                        i20 %= (int)(i19 | 1);
                    }
                }
            }
        }
        long meth_res = l1 + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.474F, f4=-93.764F;
        int i=-227, i21=-10, i22=0, i23=9, i24=8, i25=11, i26=5, i27=231;
        long l=3983579908L;
        short s=25877;

        for (f = 9; f < 229; ++f) {
            i &= (int)((l--) - (lMeth(l, -171, 36400) * i));
            for (i21 = 2; 114 > i21; ++i21) {
                i += (int)29664L;
                switch ((int)((f % 2) + 74)) {
                case 74:
                    f4 = 50944;
                    for (i23 = 1; 2 > i23; ++i23) {
                        byArrFld[(int)(f)] >>>= (byte)l;
                        i22 += i23;
                        Test.iFld1 *= (int)l;
                        Test.iFld1 = Test.iFld;
                        Test.iFld1 = (int)f;
                        f4 -= byFld;
                    }
                    i += (int)l;
                    break;
                case 75:
                    Test.lArrFld[(int)(f + 1)] = 188;
                    break;
                default:
                    if (Test.bFld) break;
                    if (Test.bFld) {
                        for (i25 = 1; i25 < 2; ++i25) {
                            i += i25;
                            Test.iArrFld1[i25 - 1] -= 145;
                            Test.bFld = Test.bFld;
                            Test.iFld = i23;
                            if (Test.bFld) continue;
                            i22 = byFld;
                            l += s;
                            if (Test.bFld) {
                                i27 = i26;
                                l += i25;
                                fArrFld[(int)(f)][i21 - 1] = l;
                            } else if (Test.bFld) {
                                Test.instanceCount = i25;
                            } else {
                                i -= i22;
                            }
                        }
                    } else if (Test.bFld) {
                        fArrFld[i21 - 1][i21 + 1] -= l;
                    } else if (Test.bFld) {
                        Test.lArrFld = Test.lArrFld;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
