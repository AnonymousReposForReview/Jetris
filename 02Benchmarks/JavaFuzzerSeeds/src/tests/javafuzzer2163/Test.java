package tests.javafuzzer2163;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:42:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1100410351849639788L;
    public static boolean bFld=true;
    public static int iFld=198;
    public static short sFld=14620;
    public static float fFld=-126.156F;
    public static double dFld=2.56355;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.73660);
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2, int i3, int i4) {

        int i5=42405, i6=5, i7=32153, i8=151;
        float f2=-15.898F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 32.23F);

        for (i5 = 2; i5 < 171; i5++) {
            Test.iFld = -91;
            f2 = 0L;
            for (i7 = 9; i7 > 1; i7--) {
                Test.instanceCount *= -3115654839L;
                i2 *= (int)f2;
                switch ((((i4 >>> 1) % 2) * 5) + 93) {
                case 97:
                    i6 += i6;
                    Test.bFld = Test.bFld;
                    i2 += (i7 * i7);
                    fArr = FuzzerUtils.float1array(N, (float)0.22F);
                case 101:
                    f2 = 27959;
                    Test.sFld += (short)(14 + (i7 * i7));
                    i6 = i3;
                default:
                    Test.dArrFld[i7] *= i6;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(float f1) {

        byte by=-34;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 0);

        Test.bFld = (((f1 * Test.iFld) * (Test.instanceCount + Test.iFld)) < (Test.iFld++));
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        Test.bFld = Test.bFld;
        Test.iFld = Test.iFld;
        Test.instanceCount += (long)2.886F;
        Test.iFld += Test.iFld;
        Test.iFld = Test.iFld;
        Test.instanceCount -= Test.iFld;
        Test.iFld -= -8;
        by = (byte)Test.iFld;
        Test.iFld >>= (int)Test.instanceCount;
        iArr[(Test.iFld >>> 1) % N] += (int)Test.instanceCount;
        f1 += Test.iFld;
        Test.iFld = (int)Test.instanceCount;
        long meth_res = Float.floatToIntBits(f1) + by + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        float f=0.327F;
        int i1=-127, i9=3, i10=63128, iArr1[]=new int[N];
        byte by1=-79;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 59455);
        FuzzerUtils.init(lArr, -183L);

        f = 238;
        while (--f > 0) {
            i1 *= (int)fMeth(f);
        }
        Test.fFld *= 51;
        try {
            iArr1[(i1 >>> 1) % N] = 10462;
            i1 <<= Test.iFld;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i9 = 237;
            do {
                lArr[i9] |= i1;
                i10 = 19;
                while (--i10 > 0) {
                    Test.iFld += (((i10 * i9) + i9) - Test.instanceCount);
                    Test.iFld ^= Test.iFld;
                    i1 += (i10 ^ i10);
                    i1 += (((i10 * i1) + i1) - i9);
                    Test.iFld ^= by1;
                    Test.iFld = i10;
                }
            } while ((i9 -= 3) > 0);
        }
        finally {
            Test.fFld -= i9;
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i9 + i10 + by1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=11358, i11=-170, i12=-23687, i13=1, i14=19971, i15=-38924, i16=-8662, i17=-164, i18=8;
        byte by2=-53;
        double d=2.56794;

        i = (int)Test.instanceCount;
        Test.instanceCount += (((51 - iMeth()) * Test.instanceCount) + i);
        for (i11 = 1; i11 < 347; i11++) {
            switch (((i11 >>> 1) % 1) + 83) {
            case 83:
                for (i13 = 73; i13 > 3; i13--) {
                    by2 -= (byte)d;
                }
                for (i15 = 2; i15 < 73; ++i15) {
                    Test.dFld = i12;
                    if (Test.bFld) break;
                    Test.fFld += -8;
                    i += i15;
                    Test.iArrFld[i15] -= 65168;
                    i16 = i;
                    if (Test.bFld) continue;
                    for (i17 = 1; i17 < 2; i17++) {
                        i16 = by2;
                        Test.iArrFld[i17 + 1] = i12;
                        i18 = i15;
                        i12 = i14;
                        i14 >>= (int)964319443983168490L;
                        i16 ^= i13;
                        i14 = i16;
                        if (true) break;
                    }
                    Test.instanceCount = Test.sFld;
                    Test.iArrFld[i11] *= 130;
                }
                break;
            default:
                i %= (int)2.71222;
                Test.iArrFld[i11 + 1] = Test.iFld;
            }
            i12 += (int)Test.fFld;
            i12 = i13;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
