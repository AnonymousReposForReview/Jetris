package tests.javafuzzer1488;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:18:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-196L;
    public static volatile int iFld=13;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.722F);
        FuzzerUtils.init(Test.iArrFld, 51629);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f1=-103.724F;
        double d1=30.17462;
        int i4=139, i5=9, i6=-18, i7=-50411, i8=-13, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 50444);

        f1 *= (float)d1;
        Test.iFld = (int)Test.instanceCount;
        for (i4 = 284; i4 > 1; i4--) {
            for (i6 = 1; i6 < 6; ++i6) {
                Test.instanceCount <<= Test.iFld;
                i8 = Test.iFld;
                iArr = iArr;
                Test.fArrFld[i4] -= i8;
                i5 *= (int)-2372816073L;
                Test.iFld = (int)Test.instanceCount;
                b = b;
            }
            i8 <<= -33;
        }
        Test.instanceCount -= i4;
        iArr[(i5 >>> 1) % N] += (int)d1;
        f1 /= (i5 | 1);
        vMeth1_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(int i2) {

        int i3=-12, i9=-48402, i10=-11, i11=-127, iArr1[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, 17980);

        i2 *= (int)(Math.abs(++Test.instanceCount) * (-(i2 * i2)));
        i3 = 1;
        while (++i3 < 149) {
            vMeth1();
            Test.instanceCount -= Test.instanceCount;
            i2 -= i2;
            iArr1[i3] = i2;
            switch ((i3 % 2) + 36) {
            case 36:
                for (i9 = 11; i9 > 1; i9--) {
                    try {
                        iArr1[i9 - 1] = (i10 % iArr1[i3 + 1]);
                        i2 = (i10 % 61108);
                        iArr1[i9 + 1] = (i10 / -93);
                    } catch (ArithmeticException a_e) {}
                    i2 *= (int)Test.instanceCount;
                    i11 = 1;
                    do {
                        i2 = (int)Test.instanceCount;
                        Test.iFld += (int)Test.instanceCount;
                    } while (++i11 < 2);
                    Test.instanceCount = i10;
                    i2 -= (int)Test.instanceCount;
                }
                break;
            case 37:
                if (b1) continue;
                break;
            default:
                iArr1[i3] = (int)Test.instanceCount;
            }
        }
        long meth_res = i2 + i3 + i9 + i10 + i11 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i1) {

        double d2=-54.3029;
        int i12=151, i13=226, i14=-58203, i15=-2, iArr2[]=new int[N];
        float f3=53.372F;
        byte by=89;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 50949);
        FuzzerUtils.init(lArr, -8228052595771204777L);

        fMeth(21411);
        i1 = (int)d2;
        for (i12 = 8; i12 < 135; i12++) {
            switch (((i12 % 2) * 5) + 34) {
            case 39:
            case 37:
                Test.instanceCount += i13;
                break;
            }
            i13 += (i12 * i12);
            f3 = 1;
            do {
                short s=-9599;
                i13 /= (int)(i1 | 1);
                Test.iArrFld[i12] = (int)-2L;
                switch ((i12 % 6) + 66) {
                case 66:
                    d2 -= 50;
                    for (i14 = 1; i14 > 1; i14 -= 2) {
                        Test.instanceCount += Test.instanceCount;
                        Test.iFld += 14808;
                    }
                    iArr2[(int)(f3)] *= -24785;
                    break;
                case 67:
                    s += (short)(((f3 * Test.instanceCount) + i15) - i14);
                    break;
                case 68:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 69:
                    Test.iArrFld[i12 + 1] = i12;
                    break;
                case 70:
                    Test.iFld |= (int)Test.instanceCount;
                case 71:
                    Test.instanceCount <<= by;
                    break;
                default:
                    lArr[(int)(f3 - 1)] |= -4701105609361385939L;
                }
            } while (++f3 < 12);
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d2) + i12 + i13 + Float.floatToIntBits(f3) + i14 + i15 + by +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-83.9F;
        int i=43222, i16=-3, i17=8, i18=62928, i19=-2, i20=-10, i21=6, i22=10, i23=15, i24=7, i25=250, i26=126;
        double d=90.48172;
        short s1=10776;
        byte by1=-27;
        long l=-6035656799876376966L;

        Test.instanceCount = -131;
        f += (float)((Math.abs(i) - (-197 + (i * i))) - (--d));
        vMeth(Test.iFld);
        s1 >>= (short)i;
        Test.instanceCount = s1;
        s1 = (short)i;
        i = Test.iFld;
        for (i16 = 3; i16 < 204; i16++) {
            for (i18 = i16; 125 > i18; ++i18) {
                i -= (int)f;
                s1 += (short)i;
                for (i20 = 1; i20 < 1; i20++) {
                    f += (16219 + (i20 * i20));
                    Test.iArrFld[i20] += i17;
                    i = i17;
                    i17 <<= i18;
                }
                Test.iArrFld[i16] -= (int)d;
            }
            for (i22 = 1; i22 < 125; i22++) {
                by1 += (byte)-2.751F;
                for (i24 = 1; i24 < 2; i24++) {
                    i >>>= (int)Test.instanceCount;
                    i21 += (((i24 * i20) + Test.instanceCount) - f);
                    i17 = i;
                    Test.instanceCount += i24;
                    i25 += (-59630 + (i24 * i24));
                    i17 += (int)d;
                    Test.instanceCount += (i24 * i24);
                }
                for (l = 2; 1 < l; l -= 2) {
                    i *= by1;
                    Test.instanceCount += (((l * i24) + by1) - Test.iFld);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
