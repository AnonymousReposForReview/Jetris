package tests.javafuzzer2624;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3857932500L;
    public static int iFld=57850;
    public static short sFld=3498;
    public static volatile double dFld=-127.76410;
    public static byte byFld=61;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -49.133F);
        FuzzerUtils.init(Test.iArrFld, 150);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i10=-25, i11=62453, i12=-51495, i13=3, i14=14553, i15=-14, iArr1[][]=new int[N][N];
        double d1=-107.72458;
        byte by2=32;
        float f2=-2.47F;
        boolean b=false;

        FuzzerUtils.init(iArr1, 1427);

        i10 = 1;
        while (++i10 < 207) {
            for (d1 = 1; d1 < 8; ++d1) {
                int i16=-119;
                switch ((int)((d1 % 10) + 49)) {
                case 49:
                    i11 += i10;
                    switch (((Test.iFld >>> 1) % 5) + 44) {
                    case 44:
                        Test.instanceCount -= by2;
                        iArr1 = iArr1;
                        for (i12 = 1; i12 < 2; ++i12) {
                            i11 += (i12 ^ i12);
                            i13 += -20647;
                            Test.fArrFld[i10 + 1] = f2;
                        }
                        break;
                    case 45:
                        for (i14 = 1; i14 < 2; ++i14) {
                            i15 += -10;
                            Test.iFld ^= (int)Test.instanceCount;
                            by2 /= (byte)(i13 | 1);
                        }
                        break;
                    case 46:
                        Test.iFld = Test.sFld;
                        break;
                    case 47:
                        f2 = i16;
                        break;
                    case 48:
                        by2 += (byte)d1;
                        break;
                    default:
                        if (b) continue;
                    }
                    break;
                case 50:
                case 51:
                    Test.instanceCount -= i16;
                case 52:
                    if (b) continue;
                case 53:
                    iArr1[i10 - 1][i10 + 1] ^= -14360;
                    break;
                case 54:
                    try {
                        iArr1[(int)(d1)][(i15 >>> 1) % N] = (i10 % i11);
                        i11 = (i14 % i14);
                        iArr1[(int)(d1)][i10 + 1] = (Test.iFld / -1438379265);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 55:
                    i15 += (91 + (d1 * d1));
                    break;
                case 56:
                case 57:
                    i15 *= Test.sFld;
                case 58:
                    i16 += (int)((long)d1 | i16);
                    break;
                }
            }
        }
        long meth_res = i10 + Double.doubleToLongBits(d1) + i11 + by2 + i12 + i13 + Float.floatToIntBits(f2) + i14 +
            i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i8=-109, i9=-14, i17=14;
        float f1=0.427F, fArr[]=new float[N];
        byte by1=85;
        double d2=0.83053;
        boolean b1=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, -2.725F);
        FuzzerUtils.init(lArr, 101L);

        Test.instanceCount = (long)((Test.instanceCount + (Test.iFld++)) + (fArr[(Test.iFld >>> 1) % N] * Test.iFld));
        lArr[(Test.iFld >>> 1) % N][(-241 >>> 1) % N] >>= Test.iFld;
        i8 = 1;
        while (++i8 < 299) {
            for (f1 = i8; f1 < 6; ++f1) {
                switch ((int)(((f1 % 4) * 5) + 5)) {
                case 21:
                    Test.iFld += (int)(f1 * f1);
                    i9 -= ((--by1) - iMeth());
                    break;
                case 12:
                    Test.iArrFld[(int)(f1 - 1)] += i8;
                    for (d2 = 1; d2 < 1; d2++) {
                        if (b1) continue;
                        i9 += (int)d2;
                        Test.instanceCount *= Test.instanceCount;
                        lArr[i8][i8] %= 14;
                        Test.iFld += i9;
                        i9 = Test.sFld;
                    }
                case 7:
                    lArr[(int)(f1)][(int)(f1)] = 47685;
                    break;
                case 6:
                    Test.dFld *= Test.instanceCount;
                    break;
                default:
                    i9 *= Test.iFld;
                }
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i9 + by1 + Double.doubleToLongBits(d2) + i17 + (b1 ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i2=14, i3=172, i4=-229, i5=-9, i7=47620, i18=-5, iArr[]=new int[N];
        float f=-1.288F;
        byte by=7;
        double d=0.92664;

        FuzzerUtils.init(iArr, 6);

        for (i2 = 4; i2 < 180; i2++) {
            i3 += i3;
            for (i4 = 1; i4 < 9; i4++) {
                int i6=-214;
                i6 <<= ((iArr[i2 - 1]--) ^ (i3 - (--iArr[i2 + 1])));
            }
            i5 = i3;
            for (f = 1; f < 9; ++f) {
                Test.instanceCount <<= by;
            }
            i7 += (int)(((i5 * i2) - (i2 - 0.953F)) - iArr[i2]);
        }
        iArr[(i7 >>> 1) % N] -= (int)d;
        vMeth1();
        i3 >>= Test.sFld;
        i18 = 1;
        while (++i18 < 307) {
            i3 += (i18 ^ i5);
            if (i4 != 0) {
                vMeth_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i7 + by + Double.doubleToLongBits(d) +
                    i18 + FuzzerUtils.checkSum(iArr);
                return;
            }
            i5 -= (int)3686616282L;
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i7 + by + Double.doubleToLongBits(d) + i18 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i1=21021, i19=11, i20=-77, i21=43615, i22=61865, i23=23772, i24=-185, i25=2, i26=-173, i27=-157,
            i28=68;
        float f3=56.72F;
        boolean b2=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 56616L);

        for (i = 5; i < 230; ++i) {
            vMeth();
            Test.iFld &= i1;
            Test.byFld = (byte)Test.iFld;
        }
        for (i19 = 12; i19 < 314; ++i19) {
            for (i21 = 83; i21 > 5; --i21) {
                i22 = i20;
                i20 *= (int)Test.instanceCount;
                for (i23 = 1; i23 < 2; i23++) {
                    lArr1[i19] += i24;
                }
            }
            Test.instanceCount = i23;
            if (b2) {
                if (false) continue;
                Test.instanceCount -= i22;
            } else if (b2) {
                f3 += i1;
                i22 = (int)Test.instanceCount;
                for (i25 = 4; i25 < 83; i25++) {
                    Test.iArrFld[i25 - 1] -= (int)Test.instanceCount;
                    i27 += i25;
                    Test.sFld += (short)i20;
                    if (b2) continue;
                    try {
                        i20 = (Test.iArrFld[i19] % i21);
                        i22 = (i27 % -245);
                        i22 = (i21 / -120);
                    } catch (ArithmeticException a_e) {}
                    f3 += f3;
                    i28 = 1;
                    while (++i28 < 2) {
                        i22 %= (int)((long)(Test.dFld) | 1);
                        i1 += -118;
                        Test.iArrFld = Test.iArrFld;
                        Test.instanceCount >>= i19;
                        i24 -= i;
                        Test.iArrFld[i28] -= (int)f3;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
