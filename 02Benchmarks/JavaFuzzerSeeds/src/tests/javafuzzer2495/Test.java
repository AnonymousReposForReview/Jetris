package tests.javafuzzer2495;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:25:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=77L;
    public static float fFld=0.381F;
    public static boolean bFld=false;
    public static double dFld=-68.44394;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 7887296368373478430L);
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.sArrFld, (short)-12104);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3, byte by) {

        boolean b=false;
        int i4=26133, i5=63719, i6=-13, i7=7, iArr1[]=new int[N];
        short s=13212;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(dArr, -1.100231);

        Test.instanceCount -= i2;
        Test.fFld = 5617700705868844889L;
        iArr1[(177 >>> 1) % N] *= (int)201L;
        i2 *= i2;
        switch ((((-1 >>> 1) % 1) * 5) + 92) {
        case 97:
            Test.fFld -= i2;
            break;
        }
        b = b;
        for (i4 = 15; i4 < 268; ++i4) {
            for (i6 = i4; i6 < 6; i6++) {
                iArr1[i4] = i7;
                i5 += (i6 | (long)Test.fFld);
                Test.instanceCount >>= i7;
                Test.instanceCount *= s;
                iArr1[i4 + 1] -= i3;
                dArr[i6 - 1] = i2;
            }
        }
        vMeth1_check_sum += i2 + i3 + by + (b ? 1 : 0) + i4 + i5 + i6 + i7 + s + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i1) {

        byte by1=117;
        double d1=-1.51560;
        int i8=174, i9=40, i10=-190, iArr[]=new int[N];
        long lArr[]=new long[N], lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -52);
        FuzzerUtils.init(lArr, 434754561L);
        FuzzerUtils.init(lArr1, 86L);

        if (Test.bFld) {
            i1 <<= iArr[(i1 >>> 1) % N];
            vMeth1(i1, i1, by1);
            i1 = i1;
            i1 = i1;
        } else {
            iArr[(i1 >>> 1) % N] >>= i1;
        }
        d1 = 0.801F;
        for (i8 = 5; i8 < 263; ++i8) {
            lArr[i8 - 1] = i8;
            lArr[i8 + 1] += Test.instanceCount;
            i10 = 1;
            while ((i10 += 2) < 6) {
                lArr1 = lArr1;
                Test.instanceCount = i9;
                Test.instanceCount = Test.instanceCount;
            }
            i9 >>= (int)Test.instanceCount;
        }
        vMeth_check_sum += i1 + by1 + Double.doubleToLongBits(d1) + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
    }

    public boolean bMeth(double d) {

        int i11=-107, i12=-9, i13=-4, i14=-14, i15=-1, i16=-15706;
        byte by2=-104;

        vMeth(i11);
        Test.fFld += i11;
        Test.instanceCount = Test.instanceCount;
        Test.instanceCount += (long)d;
        for (i12 = 2; i12 < 123; ++i12) {
            Test.lArrFld[i12] = i13;
            for (i14 = 1; i14 < 13; i14++) {
                i15 += i14;
                i16 = 1;
                while (++i16 < 2) {
                    try {
                        Test.iArrFld[i14] = (-102 / i13);
                        i11 = (i13 / i15);
                        i13 = (-8925 % i15);
                    } catch (ArithmeticException a_e) {}
                }
            }
            by2 -= (byte)i14;
            Test.fFld -= 7;
            i15 = (int)d;
            try {
                i11 = (i13 / 119);
                i13 = (41478 % i11);
                i13 = (-197 / Test.iArrFld[i12 - 1]);
            } catch (ArithmeticException a_e) {}
            i13 += (i12 * i16);
        }
        long meth_res = Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + i16 + by2;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        float f=-56.144F, f1=56.226F;
        int i=-220, i17=-51861, i18=81, i19=-49793, i20=197, i21=-7154, i22=0, i23=-8;
        long l=48L, l1=-6744152566152609017L;
        byte by3=112;

        for (f = 202; f > 5; f -= 2) {
            bMeth(Test.dFld);
            i = i;
            Test.fFld = i;
            Test.fFld -= Test.instanceCount;
            for (i17 = 3; i17 < 256; i17++) {
                i18 += i17;
                i18 -= (int)Test.instanceCount;
            }
        }
        Test.instanceCount += (long)f;
        Test.iArrFld[(i18 >>> 1) % N] <<= i;
        try {
            i += (int)l;
        }
        catch (ArithmeticException exc1) {
            i += (int)1.1349;
            Test.iArrFld[(i >>> 1) % N] = -133;
            for (i19 = 2; 217 > i19; i19++) {
                Test.instanceCount += l;
            }
        }
        Test.iArrFld[(i >>> 1) % N] = (int)f;
        Test.fFld = i17;
        i18 -= (int)Test.instanceCount;
        i21 = 1;
        while (++i21 < 317) {
            for (f1 = i21; 79 > f1; ++f1) {
                if (Test.bFld) continue;
                l = i17;
                Test.sArrFld[(int)(f1)][i21 + 1] -= (short)Test.dFld;
                i20 = i17;
                for (l1 = 1; l1 < 1; l1++) {
                    i23 += (int)(l1 + i18);
                    by3 += (byte)(l1 * l1);
                    Test.lArrFld[(int)(f1)] *= i19;
                    Test.instanceCount %= (l | 1);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
