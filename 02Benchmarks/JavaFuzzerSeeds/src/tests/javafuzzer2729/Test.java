package tests.javafuzzer2729;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:23:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=637198426L;
    public static double dFld=-68.111168;
    public int iFld=117;
    public volatile short sFld=-24709;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=2, i7=-13, i8=-38899, iArr1[]=new int[N];
        byte by=-68;
        float f1=0.404F;
        double d=-65.84941, d1=-12.22025;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(lArr, -8374232812892274815L);

        switch (((i6 >>> 1) % 2) + 26) {
        case 26:
            by <<= (byte)-1;
            switch ((((i6 >>> 1) % 7) * 5) + 15) {
            case 19:
                i7 = 1;
                while (++i7 < 358) {
                    f1 = Test.instanceCount;
                    Test.dFld %= ((long)(Test.dFld) | 1);
                    by = (byte)Test.instanceCount;
                    i8 = 1;
                    do {
                        i6 = (int)d;
                        i6 -= i8;
                        iArr1[i8 - 1] = i8;
                    } while (++i8 < 5);
                    d1 = 1;
                    while (++d1 < 5) {
                        lArr = lArr;
                        i6 += i8;
                        iArr1[i7 - 1] <<= i7;
                    }
                }
                break;
            case 30:
                lArr[(i8 >>> 1) % N] -= Test.instanceCount;
                break;
            case 22:
                Test.instanceCount = i7;
                break;
            case 43:
                iArr1[(-4 >>> 1) % N] <<= i8;
            case 24:
                i6 >>>= 59368;
                break;
            case 39:
                i6 += (int)77L;
                break;
            case 42:
                i6 += i6;
                break;
            }
            break;
        case 27:
            f1 = (float)Test.dFld;
            break;
        default:
            Test.instanceCount = i7;
        }
        vMeth1_check_sum += i6 + by + i7 + Float.floatToIntBits(f1) + i8 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i2) {

        int i3=-12696, i4=-43591, i9=1, i10=-1, i11=24969, i12=-31613, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8414);

        for (i3 = 19; i3 < 380; ++i3) {
            i2 = (int)Test.instanceCount;
            i2 = i4;
            vMeth1();
        }
        for (i9 = 8; i9 < 391; ++i9) {
            i10 += (i9 * i9);
            i2 |= (int)Test.instanceCount;
            i10 += (i9 ^ i3);
            for (i11 = i9; 4 > i11; ++i11) {
                i2 = (int)-6L;
                if (true) {
                    Test.lArrFld = Test.lArrFld;
                    i10 = -30;
                    i2 -= i11;
                } else {
                    iArr[i9 - 1] -= i9;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, float f) {


        iMeth(i1);
        i1 += i1;
        vMeth_check_sum += i1 + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr3) {

        float f2=-2.584F;
        int i13=44171, i14=5, i15=10, i17=-61022, i18=-6, i19=10, i20=12, iArr2[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr2, 73);

        vMeth(iFld, f2);
        iFld = iFld;
        for (i13 = 7; i13 < 358; ++i13) {
            i15 = 1;
            do {
                int i16=13;
                iArr2[i13 + 1] /= (int)(iFld | 1);
                i14 = i14;
                i14 += (i15 * i15);
                i14 -= (int)Test.instanceCount;
                iArr2[i15] = (int)Test.instanceCount;
                Test.lArrFld[i13] = Test.instanceCount;
                iFld += (((i15 * Test.instanceCount) + Test.instanceCount) - i13);
                iArr2[i13 + 1] = (int)Test.instanceCount;
                try {
                    iFld = (i16 / iFld);
                    i16 = (iArr2[i13 + 1] / -20);
                    i14 = (-155 / i15);
                } catch (ArithmeticException a_e) {}
            } while (++i15 < 72);
            for (i17 = 72; i17 > i13; i17 -= 2) {
                Test.dFld *= Test.instanceCount;
            }
            sFld <<= (short)Test.instanceCount;
            iFld &= (int)Test.instanceCount;
            Test.instanceCount = Test.instanceCount;
            iFld += i13;
            i14 = sFld;
            i18 -= i15;
            i14 *= (int)17699L;
            iArr2[i13] += i14;
        }
        i18 = i15;
        for (i19 = 150; i19 > 5; i19 -= 3) {
            byte by1=103;
            i20 = i13;
            b = b;
            by1 += (byte)(((i19 * Test.instanceCount) + sFld) - i17);
            f2 += iFld;
            b = false;
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
