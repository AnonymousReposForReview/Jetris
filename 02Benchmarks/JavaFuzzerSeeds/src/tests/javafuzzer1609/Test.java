package tests.javafuzzer1609;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:01:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7689717953788802152L;
    public static int iFld=49909;
    public short sFld=11628;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -36);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=-102, i6=-22012, i7=208, i8=-218, i9=14;
        byte by=57;
        short s=-16631;

        switch ((((130 >>> 1) % 1) * 5) + 73) {
        case 76:
            for (i5 = 10; i5 < 264; i5++) {
                i6 = i5;
                switch ((i5 % 2) + 30) {
                case 30:
                    i7 = 1;
                    do {
                        if (i7 != 0) {
                            vMeth1_check_sum += i5 + i6 + i7 + by + i8 + i9 + s;
                            return;
                        }
                        Test.instanceCount |= 0;
                        i6 = by;
                        i6 -= (int)Test.instanceCount;
                        for (i8 = i7; i8 < 1; i8 += 3) {
                            try {
                                Test.iArrFld[i7 - 1] = (i9 / 1052402387);
                                i6 = (i8 / 1423339441);
                                Test.iArrFld[i8] = (i9 / Test.iArrFld[i7 - 1]);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount += (((i8 * i6) + i5) - i7);
                            i6 -= s;
                            Test.instanceCount = Test.instanceCount;
                            i6 = i7;
                        }
                    } while (++i7 < 6);
                    break;
                case 31:
                    i9 = -16319;
                default:
                    i6 += (((i5 * Test.instanceCount) + by) - i5);
                }
            }
            break;
        }
        vMeth1_check_sum += i5 + i6 + i7 + by + i8 + i9 + s;
    }

    public void vMeth(int i1, int i2, float f) {

        int i3=9, i4=14, i10=13922, i11=-13991, i12=3, i13=214, i14=220, i15=-6445;
        double d=50.111223;

        for (i3 = 9; i3 < 235; i3++) {
            vMeth1();
            i2 -= (int)Test.instanceCount;
            i2 = (int)-23561L;
        }
        for (i10 = 393; i10 > 15; --i10) {
            for (i12 = 1; i12 < 4; i12++) {
                switch ((i12 % 1) + 2) {
                case 2:
                    for (i14 = 1; i14 < 2; i14++) {
                        Test.instanceCount += i14;
                        d += i11;
                        Test.iArrFld[i10] = (int)f;
                        i11 = Test.iFld;
                        i15 *= (int)-44.575F;
                        Test.iArrFld[i14 - 1] >>>= i3;
                        i1 -= i11;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i10 + i11 + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(d);
    }

    public int iMeth() {

        float f1=71.686F;
        int i16=199, i17=-92, i18=1, i19=5, i20=-64543;
        double d1=0.93231, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -8.115409);
        FuzzerUtils.init(lArr, 23153L);

        vMeth(-63430, Test.iFld, f1);
        for (i16 = 313; i16 > 2; i16--) {
            switch (((i16 % 5) * 5) + 112) {
            case 128:
                i17 *= (int)f1;
                for (i18 = 1; i18 < 5; i18++) {
                    dArr[i16] %= (i18 | 1);
                    lArr[i18] -= i16;
                    d1 = i16;
                    i17 <<= Test.iFld;
                    Test.instanceCount = i17;
                    i19 += (int)Test.instanceCount;
                    d1 = i17;
                    i20 = 1;
                    while (++i20 < 2) {
                        lArr = lArr;
                        i19 >>= (int)Test.instanceCount;
                    }
                }
                break;
            case 127:
                Test.instanceCount += (i16 * i16);
                break;
            case 123:
                d1 = i17;
                break;
            case 115:
                Test.instanceCount += i17;
                break;
            case 130:
                d1 *= i17;
                break;
            default:
                i19 += i16;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d1) + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=92, i21=4058, i22=-133;
        double d2=-111.46184;
        float f2=0.21F;

        i = iMeth();
        Test.iFld = Test.iFld;
        for (i21 = 1; i21 < 379; ++i21) {
            d2 *= f2;
            i22 += sFld;
            Test.iFld = Test.iFld;
            i = (int)-11L;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
