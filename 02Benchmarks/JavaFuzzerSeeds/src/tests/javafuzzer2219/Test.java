package tests.javafuzzer2219;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:23:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static int iFld=-56848;
    public float fFld=120.556F;
    public volatile boolean bFld=false;
    public static short sFld=-9265;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -22.369F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, int i7) {

        int i8=-219, i9=-13, i10=13, i11=59998;
        float f2=-2.418F;
        byte by=-92;
        double d=-37.16832;

        i7 -= i7;
        Test.instanceCount = -96;
        for (i8 = 6; i8 < 223; i8++) {
            for (i10 = 1; i10 < 7; i10++) {
                float f3=2.131F;
                i9 = i11;
                f2 = 1;
                do {
                    Test.instanceCount = i8;
                    Test.instanceCount = (long)f2;
                    Test.instanceCount = i8;
                } while (++f2 < 2);
                i9 = (int)Test.instanceCount;
                Test.instanceCount <<= i10;
                f3 -= 124;
                f3 = 62780;
                by += (byte)d;
                Test.instanceCount += i10;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + by + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f, int i, float f1) {

        int i1=7, i2=-24158, i3=243, i4=237, i5=2, i12=-197, i13=-10, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -11);

        Test.instanceCount &= i;
        for (i1 = 12; 201 > i1; ++i1) {
            i3 = 1;
            while (++i3 < 8) {
                for (i4 = 1; i4 < 1; i4++) {
                    iArr[i3] &= (i2++);
                    i2 = Math.min(207, (int)(-Math.sqrt(-90.70162)));
                    try {
                        i2 = (-166 / iArr[i4]);
                        iArr[i1 - 1] = (i4 % i3);
                        i2 = (i2 / i4);
                    } catch (ArithmeticException a_e) {}
                    i >>= iMeth(i1, -138);
                }
                i2 >>>= i2;
                i5 = i1;
                for (i12 = 1; i12 < 1; i12++) {
                    int i14=-167;
                    i2 -= (int)11L;
                    i13 = i;
                    i13 = (int)Test.instanceCount;
                    i14 += (int)(2.679F + (i12 * i12));
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i + Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + i5 + i12 + i13
            + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        float f4=30.548F;
        long l=-42962L, l1=-13731L;
        int i15=-171, i16=157, i17=11, i18=37410, iArr1[][]=new int[N][N];
        short s=-14265;

        FuzzerUtils.init(iArr1, -1);

        Test.instanceCount += Test.instanceCount;
        vMeth1(f4, Test.iFld, -33.338F);
        for (l = 231; l > 4; --l) {
            for (i16 = 1; 7 > i16; i16++) {
                i15 += (((i16 * s) + f4) - i17);
                i15 = i15;
                iArr1[i16 + 1][(int)(l - 1)] = Test.iFld;
                Test.instanceCount *= i15;
                try {
                    i17 = (i17 / -1315053420);
                    Test.iFld = (i16 % -24673);
                    i17 = (91 % iArr1[i16 - 1][(int)(l - 1)]);
                } catch (ArithmeticException a_e) {}
                i15 >>= i17;
                i17 /= -183;
                iArr1[(int)(l + 1)][(int)(l - 1)] -= (int)Test.instanceCount;
                for (l1 = l; l1 < 2; l1++) {
                    i18 += (int)(l1 * l1);
                    i18 += (int)(l1 + i15);
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f4) + l + i15 + i16 + i17 + s + l1 + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=0, i20=6, i21=-77, i22=-5, i23=8, i24=-8685, i25=223, i26=17111, i27=-44508;
        double d1=0.108190;

        vMeth();
        Test.iFld = Test.iFld;
        for (i19 = 6; 379 > i19; i19++) {
            Test.fArrFld = Test.fArrFld;
            i21 = 68;
            do {
                i20 &= (int)Test.instanceCount;
                i20 = i19;
                i22 = 1;
                do {
                    Test.instanceCount += (-222 + (i22 * i22));
                    d1 *= i19;
                    Test.instanceCount += i19;
                    Test.instanceCount -= Test.iFld;
                    i20 = i20;
                    Test.iFld += (i22 * Test.iFld);
                    i23 = (int)fFld;
                    if (bFld) break;
                } while (++i22 < 1);
                iArrFld[i19 - 1] = 73;
                iArrFld[i21 + 1] *= 22270;
            } while (--i21 > 0);
        }
        for (i24 = 5; i24 < 266; i24++) {
            Test.iFld = i25;
            i23 += (int)Test.instanceCount;
            Test.iFld -= i24;
            Test.iFld <<= -52178;
        }
        Test.sFld += (short)i24;
        iArrFld = iArrFld;
        for (i26 = 342; i26 > 16; i26 -= 3) {
            iArrFld[i26 + 1] = (int)d1;
            try {
                i20 = (i22 % -6323);
                Test.iFld = (i19 % i19);
                iArrFld[i26] = (i19 / -17419);
            } catch (ArithmeticException a_e) {}
        }
        iArrFld[(i25 >>> 1) % N] = i19;
        fFld = 32068;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
