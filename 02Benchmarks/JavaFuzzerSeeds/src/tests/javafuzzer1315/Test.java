package tests.javafuzzer1315;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:10:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static int iFld=14343;
    public static float fFld=-23.969F;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.50F);
        FuzzerUtils.init(Test.dArrFld, 2.13095);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5) {

        float f=0.578F;
        int i6=5, i7=16, i8=1, i9=-175, i10=-8, iArr[]=new int[N];
        short s=-28033;

        FuzzerUtils.init(iArr, -78);

        for (f = 6; f < 212; f++) {
            s += (short)i5;
            i5 += (int)(((f * i6) + i5) - i5);
            i5 >>= i5;
            i5 = (int)f;
            i6 += -54657;
            Test.instanceCount >>>= Test.instanceCount;
            i6 <<= (int)-30675L;
        }
        i7 = 1;
        while (++i7 < 333) {
            i6 += i7;
        }
        for (i8 = 3; i8 < 398; ++i8) {
            i10 = 1;
            while (++i10 < 4) {
                boolean b1=true;
                i9 += i10;
                b1 = b1;
                try {
                    iArr[i10 + 1] = (i8 % i9);
                    i6 = (-38063 % i10);
                    i6 = (i7 % 252);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f) + i6 + s + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        double d1=0.104012, d2=-121.78717;
        int i11=-8, i12=-98, i13=-8;
        byte by1=-22;
        boolean b2=false;
        float f1=-2.544F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-9641);

        d1 = iMeth1(i11);
        by1 *= by1;
        i11 -= i11;
        for (d2 = 4; d2 < 125; d2++) {
            Test.instanceCount = i11;
            if (b2) break;
            i11 -= i12;
            Test.fArrFld = Test.fArrFld;
            f1 = i12;
            sArr = sArr;
            Test.iFld = Test.iFld;
            Test.instanceCount = Test.instanceCount;
            i13 = 1;
            while (++i13 < 13) {
                l += (i13 ^ (long)f1);
                i12 += i13;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d1) + i11 + by1 + Double.doubleToLongBits(d2) + i12 + (b2 ? 1 : 0)
            + Float.floatToIntBits(f1) + i13 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3) {

        int i4=-33, i14=-144, i15=3;
        boolean b=false;
        double d3=97.55014;
        float f2=-2.533F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.127F);

        i4 = 1;
        while (++i4 < 196) {
            if (b ^ (iMeth(Test.instanceCount) <= d3)) {
                Test.instanceCount += (long)fArr[i4 + 1];
            } else {
                d3 /= (Test.instanceCount | 1);
                for (i14 = 1; i14 < 8; i14++) {
                    i15 = -4864;
                }
            }
            i15 *= i4;
            i15 += (i4 - Test.instanceCount);
            if (i15 != 0) {
                vMeth_check_sum += i3 + i4 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + i14 + i15 +
                    Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
            Test.instanceCount -= Test.instanceCount;
            f2 *= (float)d3;
            i3 <<= i3;
            i3 = (int)12L;
            if (true) continue;
            Test.instanceCount >>= Test.instanceCount;
        }
        vMeth_check_sum += i3 + i4 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + i14 + i15 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-107, i1=64345, i2=-25365, i16=-17931, i17=51, i18=-106, i19=232, i20=2, i21=-217;
        byte by=22;
        double d=-22.126229;
        long l1=-5267236254377764935L, lArr[]=new long[N];
        boolean b3=false;

        FuzzerUtils.init(lArr, -235L);

        i = 1;
        while (++i < 224) {
            by = (byte)(((i1 + Test.instanceCount) % (Math.max(i1, i) | 1)) - Math.abs(i1++));
            i1 += (-8 + (i * i));
        }
        i2 = 1;
        while (++i2 < 225) {
            Test.instanceCount = (iArrFld[i2 - 1] - (++Test.instanceCount));
            Test.instanceCount += (long)(i * d);
        }
        vMeth(Test.iFld);
        l1 = 1;
        do {
            Test.fFld = i1;
            Test.instanceCount = l1;
            for (i16 = 66; i16 > 3; i16 -= 2) {
                i1 -= i1;
                lArr[i16 - 1] = (long)d;
                Test.instanceCount = 774230661L;
                by = (byte)i1;
                for (i18 = (int)(l1); i18 < 3; ++i18) {
                    Test.iFld += (((i18 * i) + Test.instanceCount) - i16);
                    i1 = (int)1.101796;
                    i19 += (-166 + (i18 * i18));
                    i19 = i17;
                    i1 <<= i19;
                    b3 = b3;
                    i19 += (i18 - i18);
                    i1 %= (int)(Test.instanceCount | 1);
                    Test.fFld = 25;
                }
                for (i20 = i16; i20 < 3; i20++) {
                    Test.iFld += (((i20 * l1) + i21) - i19);
                    Test.dArrFld[i16 - 1] = l1;
                    b3 = b3;
                    i17 += (int)(-12L + (i20 * i20));
                }
            }
        } while (++l1 < 382);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
