package tests.javafuzzer3296;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:40:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3868097878L;
    public boolean bFld=true;
    public static double dFld=116.25123;
    public static short sFld=22861;
    public long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.44887);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by1, long l) {

        float f1=114.1022F;
        int i2=-13, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -44169L);
        FuzzerUtils.init(iArr2, 252);

        f1 -= i2;
        lArr[(i2 >>> 1) % N] = Test.instanceCount;
        lArr[(i2 >>> 1) % N] -= (long)-2.530F;
        i2 = i2;
        iArr2[(i2 >>> 1) % N] -= (int)1.569F;
        vMeth2_check_sum += by1 + l + Float.floatToIntBits(f1) + i2 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1() {

        byte by2=-40;
        int i3=50857, i4=47739, i5=8, i6=9601, i7=99, iArr3[]=new int[N];
        boolean b=true;
        float f2=-41.346F;
        short s=32535;

        FuzzerUtils.init(iArr3, 12);

        vMeth2(by2, Test.instanceCount);
        for (i3 = 11; i3 < 326; i3++) {
            for (i5 = 1; i5 < 5; ++i5) {
                if (b) continue;
                iArr3[i5] += (int)Test.dFld;
                i7 = 1;
                while (++i7 < 2) {
                    Test.instanceCount += Test.sFld;
                    i6 -= (int)f2;
                    i6 -= i6;
                    i4 -= i4;
                    s += (short)(((i7 * Test.instanceCount) + Test.instanceCount) - i6);
                    iArr3[i3 + 1] <<= -59098;
                    i6 += (i7 * i6);
                }
                Test.dArrFld[(i3 >>> 1) % N] = 25;
                i6 *= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += by2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + i7 + Float.floatToIntBits(f2) + s +
            FuzzerUtils.checkSum(iArr3);
    }

    public static void vMeth(int i1, byte by) {

        float f3=41.433F, f4=0.720F;
        int i8=34, i9=-99, i10=0, i11=17596, i12=-44112, i13=167, iArr1[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, -54020);

        iArr1[(i1 >>> 1) % N] = (int)Test.instanceCount;
        vMeth1();
        for (f3 = 5; f3 < 174; f3++) {
            iArr1[(int)(f3 - 1)] = i1;
            iArr1[(int)(f3 + 1)] *= (int)-20505L;
            Test.instanceCount <<= Test.instanceCount;
        }
        i8 = (int)Test.dFld;
        for (i9 = 10; i9 < 225; i9 += 2) {
            for (i11 = 1; 15 > i11; i11++) {
                i8 += (((i11 * Test.instanceCount) + f3) - Test.instanceCount);
                switch (((i12 >>> 1) % 4) + 67) {
                case 67:
                    if (b1) {
                        Test.instanceCount %= (i13 | 1);
                        i10 += i12;
                        i12 = 34;
                    } else {
                        iArr1[i9 - 1] *= (int)Test.instanceCount;
                    }
                    break;
                case 68:
                    f4 = Test.instanceCount;
                    break;
                case 69:
                    i10 += (i11 + i11);
                    break;
                case 70:
                    i10 <<= (int)Test.instanceCount;
                    break;
                }
            }
        }
        vMeth_check_sum += i1 + by + Float.floatToIntBits(f3) + i8 + i9 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=2.561F;
        int i=-244, i15=65147, i16=-11, i17=-2962, iArr[]=new int[N];
        byte by3=94, byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -31205);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)55);

        for (f = 7; f < 196; f += 3) {
            iArr[(int)(f - 1)] = (int)lArrFld[(int)(f)];
            if (bFld = (true != (bFld = (i == i)))) {
                i += (int)(((f * Test.instanceCount) + f) - i);
            } else if (true) {
                bArr = (bArr = (bArr = (bArr = bArr)));
            } else {
                if (bFld) {
                    Test.dFld *= lArrFld[(int)(f)];
                } else if (bFld) {
                    vMeth(i, (byte)(-76));
                    iArr[(int)(f - 1)] *= 8909;
                    i += i;
                } else if (true) {
                    Test.dArrFld[(int)(f - 1)] = i;
                    i15 = 397;
                    do {
                        i -= 5;
                        Test.instanceCount -= -6;
                        byArr[i15] >>= (byte)8L;
                        Test.sFld += (short)(i15 - Test.instanceCount);
                    } while ((i15 -= 3) > 0);
                    Test.instanceCount = i;
                }
                i = i;
            }
            lArrFld[(int)(f - 1)] <<= i;
            iArr[(int)(f)] = i;
            i += -8;
        }
        switch ((((i >>> 1) % 8) * 5) + 68) {
        case 73:
            i = i15;
            break;
        case 85:
            i16 = 1;
            do {
                i += i16;
                i17 = 1;
                do {
                    Test.dArrFld[i17 + 1] = Test.instanceCount;
                } while ((i17 += 3) < 153);
                i += (i16 * i16);
                Test.instanceCount = Test.instanceCount;
            } while (++i16 < 164);
            i += by3;
            break;
        case 93:
            iArr = iArr;
            break;
        case 103:
            i <<= -27;
            break;
        case 107:
            Test.sFld = (short)i15;
            break;
        case 79:
            lArrFld[(i >>> 1) % N] = (long)-2.972F;
        case 95:
            by3 += (byte)i;
            break;
        case 98:
            iArr[(i16 >>> 1) % N] <<= i;
            break;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
