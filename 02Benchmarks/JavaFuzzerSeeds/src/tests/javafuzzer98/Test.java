package tests.javafuzzer98;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:21:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1992109093L;
    public volatile byte byFld=127;
    public static short sFld=-29639;
    public static boolean bFld=false;
    public static byte byFld1=-89;
    public static float fFld=-2.228F;
    public int iFld=-23487;
    public volatile int iArrFld[]=new int[N];
    public volatile float fArrFld[][]=new float[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.50352);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l2, int i10) {

        float f1=2.854F, f2=2.846F;
        int i11=5, i12=-30578, i13=4, i15=-20488, i16=-24355, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 16740);

        i10 = (int)l2;
        i10 += (int)-1.60169;
        for (f1 = 5; 292 > f1; f1++) {
            i11 += (int)(f1 * f1);
            f2 = -54365;
            Test.sFld += (short)f1;
            for (i12 = 6; i12 > 1; --i12) {
                i13 *= 0;
            }
            if (Test.bFld) break;
            i11 = -55160;
            i13 *= Test.byFld1;
        }
        for (int i14 : iArr) {
            for (i15 = 1; i15 < 4; ++i15) {
                i16 = 24822;
                l2 -= i13;
            }
        }
        vMeth2_check_sum += l2 + i10 + Float.floatToIntBits(f1) + i11 + Float.floatToIntBits(f2) + i12 + i13 + i15 +
            i16 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1(int i7, long l, long l1) {

        int i8=8, i9=40853, i17=-245, i18=247, i19=7;
        double d=-113.102359;

        for (i8 = 6; i8 < 202; ++i8) {
            vMeth2(Test.instanceCount, i7);
            Test.sFld = (short)20;
            i7 &= i9;
            Test.fFld = (float)d;
            i17 = 1;
            do {
                fArrFld[i17] = fArrFld[i17 - 1];
                Test.instanceCount = i9;
                Test.fFld *= Test.sFld;
                Test.sFld &= (short)i8;
            } while (++i17 < 8);
            i7 += (i8 - Test.fFld);
        }
        if (Test.bFld) {
            for (i18 = 11; 181 > i18; ++i18) {
                i7 >>= byFld;
                l += i9;
            }
        } else {
            Test.instanceCount += 56531;
            vMeth1_check_sum += i7 + l + l1 + i8 + i9 + Double.doubleToLongBits(d) + i17 + i18 + i19;
            return;
        }
        vMeth1_check_sum += i7 + l + l1 + i8 + i9 + Double.doubleToLongBits(d) + i17 + i18 + i19;
    }

    public void vMeth(int i, int i1, int i2) {

        float f=-113.1021F;
        int i3=-10, i4=60, i5=-4, i6=-9;
        short s=-30358;
        double d1=-1.21829;

        f = i1;
        for (i3 = 1; i3 < 123; i3++) {
            switch ((i3 % 4) + 9) {
            case 9:
                for (i5 = 1; i5 < 13; i5++) {
                    f = (--i4);
                    byFld = (byte)((++i6) * ((byFld++) >> (i6 + s)));
                    iArrFld[i5 - 1] /= (int)(Long.reverseBytes(Test.instanceCount) | 1);
                    if (Test.bFld) {
                        vMeth1(i2, Test.instanceCount, Test.instanceCount);
                        Test.instanceCount -= i6;
                        i1 -= i4;
                        try {
                            i2 = (-111 % iArrFld[i5 + 1]);
                            i2 = (iArrFld[i3] % 120);
                            iArrFld[i3] = (76 / i1);
                        } catch (ArithmeticException a_e) {}
                    } else {
                        i1 = i;
                        Test.sFld += (short)d1;
                        Test.dArrFld[i5 + 1] -= i4;
                    }
                }
                break;
            case 10:
                i2 %= (int)(i6 | 1);
            case 11:
                i2 = (int)3557724000355216809L;
                break;
            case 12:
                i1 <<= i4;
                break;
            default:
                i1 *= i3;
            }
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + s + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i20=-6, i21=-4, i22=-8505, i23=-20685, i24=191, i25=11, i26=20, i27=12069, i28=-46189;
        double d2=17.14032, d3=-2.55827;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)93);

        vMeth(iFld, iFld, iFld);
        i20 = 1;
        while (++i20 < 256) {
            iArrFld[i20 - 1] -= (int)d2;
            iArrFld[(55973 >>> 1) % N] %= (int)(iFld | 1);
            for (i21 = i20; i21 < 98; ++i21) {
                iArrFld[i20 + 1] += (int)-7278601443381608619L;
                iArrFld[i21 - 1] = (int)Test.instanceCount;
                for (i23 = 1; i23 < 1; i23++) {
                    Test.fFld *= Test.fFld;
                    i24 = i20;
                    i24 += (i23 | i20);
                    byArr[i23 - 1] = (byte)i22;
                    Test.sFld += (short)i23;
                    Test.instanceCount += (((i23 * iFld) + i21) - i23);
                    iFld += (((i23 * iFld) + i24) - byFld);
                }
                iFld *= 46373;
                i24 = i23;
                iFld = i22;
                iFld -= i24;
            }
            iFld += (int)d2;
            i25 = 1;
            do {
                Test.fFld *= i23;
                i24 = 11;
                Test.instanceCount *= Test.instanceCount;
                Test.fFld += i25;
            } while (++i25 < 98);
            i24 = (int)Test.instanceCount;
            for (d3 = 4; 98 > d3; d3++) {
                for (i27 = 1; i27 < 2; ++i27) {
                    iArrFld[i20 - 1] += (int)Test.fFld;
                    i24 = i23;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
