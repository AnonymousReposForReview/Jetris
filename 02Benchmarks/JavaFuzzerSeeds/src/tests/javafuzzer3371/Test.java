package tests.javafuzzer3371;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:52:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public float fFld=2.601F;
    public double dFld=2.31740;
    public long lFld=6136762083256739227L;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2) {

        double d1=23.72062;
        int i3=7, i4=4, i5=8664, i7=-52119, i8=-1086, i9=-13, i10=9, iArr[]=new int[N];
        float f=73.989F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -436);
        FuzzerUtils.init(lArr, -7002994089228962499L);

        switch ((((i2 >>> 1) % 8) * 5) + 107) {
        case 122:
            i2 = i2;
            for (d1 = 217; d1 > 1; --d1) {
                i2 += (int)Test.instanceCount;
                for (i4 = 1; i4 < 7; i4++) {
                    i3 += i4;
                }
                for (i7 = 1; 7 > i7; ++i7) {
                    f = i3;
                    for (i9 = 1; i9 < 2; ++i9) {
                        Test.instanceCount += (((i9 * i8) + i10) - i8);
                        i8 <<= i9;
                        iArr[i7 - 1] = i8;
                        i10 *= 41246;
                        if (i7 != 0) {
                            vMeth2_check_sum += i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i7 + i8 +
                                Float.floatToIntBits(f) + i9 + i10 + FuzzerUtils.checkSum(iArr) +
                                FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        i2 -= i8;
                    }
                }
            }
            break;
        case 117:
            i2 = (int)f;
            break;
        case 113:
            i5 = (int)f;
            break;
        case 110:
            i8 -= i10;
            break;
        case 123:
            i3 -= -132;
            break;
        case 108:
            Test.instanceCount -= i4;
        case 116:
            lArr[(0 >>> 1) % N] -= Test.instanceCount;
            break;
        case 130:
            lArr[(i2 >>> 1) % N] = i10;
        }
        vMeth2_check_sum += i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i7 + i8 + Float.floatToIntBits(f) + i9 +
            i10 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i, double d) {

        int i1=-20213, i11=5, i12=-119, i13=3, i14=30109, iArr1[]=new int[N];
        float f1=0.371F;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -12L);
        FuzzerUtils.init(iArr1, -5);

        i1 = 1;
        while (++i1 < 264) {
            long l=4L;
            vMeth2(i);
            i = i1;
            lArr1[i1 + 1] = l;
            for (i11 = 1; i11 < 6; ++i11) {
                f1 += i;
                iArr1[i11 - 1] = 49187;
                for (i13 = 1; i13 < 2; i13++) {
                    iArr1 = iArr1;
                }
                d = i1;
                switch (((i11 % 4) * 5) + 102) {
                case 109:
                    b = b;
                    f1 = i13;
                    break;
                case 104:
                    Test.instanceCount = 17923;
                    if (b) continue;
                    break;
                case 113:
                    lArr1 = lArr1;
                case 106:
                    l *= i1;
                }
            }
        }
        vMeth1_check_sum += i + Double.doubleToLongBits(d) + i1 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + (b
            ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i15=177, i16=-50, i17=-2083, i18=-127, iArr2[]=new int[N];
        double d2=-1.63557;
        byte by=-56;
        float f2=-127.802F, fArr[]=new float[N];
        boolean b1=true;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(fArr, 0.615F);
        FuzzerUtils.init(lArr2, -6623287912047693518L);

        vMeth1(i15, d2);
        i15 += (int)d2;
        i15 = (int)d2;
        i15 *= i15;
        i15 <<= by;
        for (i16 = 11; i16 < 343; i16++) {
            iArr2[i16 + 1] *= i16;
            i18 = 1;
            do {
                try {
                    iArr2[i16] = (i16 / -175);
                    i15 = (-220 / iArr2[i16 - 1]);
                    i17 = (-40 % i18);
                } catch (ArithmeticException a_e) {}
                fArr[(i16 >>> 1) % N] += f2;
                i15 ^= i17;
                if (b1) continue;
                iArr2[i18] -= (int)-4168731261L;
                i15 += (((i18 * i18) + i17) - i18);
                lArr2[i16 - 1] += -86;
            } while ((i18 += 2) < 5);
        }
        vMeth_check_sum += i15 + Double.doubleToLongBits(d2) + by + i16 + i17 + i18 + Float.floatToIntBits(f2) + (b1 ?
            1 : 0) + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        int i19=7, i20=-4, i21=-2, i22=208, i23=192, iArr3[]=new int[N];
        byte by1=36;
        float f3=-1.442F;
        short s=-14094;
        boolean b2=true;
        long lArr3[]=new long[N];

        FuzzerUtils.init(iArr3, 18);
        FuzzerUtils.init(lArr3, -22221L);

        vMeth();
        iArr3[(i19 >>> 1) % N] -= i19;
        for (i20 = 13; i20 < 224; i20++) {
            by1 = (byte)i19;
            for (f3 = 1; f3 < 119; ++f3) {
                i23 = 2;
                do {
                    Test.instanceCount = Test.instanceCount;
                    i22 += (i23 * i23);
                    switch (((i23 >>> 1) % 3) + 66) {
                    case 66:
                        fFld -= s;
                        switch (((i19 >>> 1) % 6) + 120) {
                        case 120:
                            switch ((int)(((f3 % 3) * 5) + 69)) {
                            case 70:
                                switch (((i22 >>> 1) % 9) + 94) {
                                case 94:
                                    Test.instanceCount += i23;
                                    Test.instanceCount += (i23 * i23);
                                    i21 -= i21;
                                    i19 += (int)f3;
                                    break;
                                case 95:
                                    i22 = (int)108.124582;
                                    i22 = i22;
                                    break;
                                case 96:
                                    if (b2) break;
                                    iArr3[i23 - 1] -= -14;
                                    switch ((i23 % 10) + 45) {
                                    case 45:
                                        i21 -= i22;
                                        lArr3[i20 + 1] = i19;
                                        try {
                                            i19 = (i23 / 51937);
                                            i21 = (i20 % i20);
                                            i22 = (i20 / i21);
                                        } catch (ArithmeticException a_e) {}
                                        i22 += (int)dFld;
                                        break;
                                    case 46:
                                        i19 >>= (int)Test.instanceCount;
                                        i21 += (int)Test.instanceCount;
                                        break;
                                    case 47:
                                    case 48:
                                        try {
                                            i21 = (iArr3[i20 - 1] % -34452);
                                            i21 = (i19 / -53040);
                                            iArr3[(int)(f3)] = (88 / i19);
                                        } catch (ArithmeticException a_e) {}
                                        Test.instanceCount += (12 + (i23 * i23));
                                    case 49:
                                        i21 += i22;
                                        break;
                                    case 50:
                                        try {
                                            i22 = (iArr3[i20] % iArr3[i20]);
                                            i19 = (1801549401 / i20);
                                            i21 = (iArr3[i23] / iArr3[i20]);
                                        } catch (ArithmeticException a_e) {}
                                        break;
                                    case 51:
                                        Test.instanceCount = i23;
                                        break;
                                    case 52:
                                        i19 -= -47071;
                                        break;
                                    case 53:
                                        fFld -= i19;
                                        break;
                                    case 54:
                                        iArr3[i20 + 1] %= (int)(Test.instanceCount | 1);
                                        break;
                                    }
                                case 97:
                                    i19 += i22;
                                    break;
                                case 98:
                                    i22 >>= i21;
                                    break;
                                case 99:
                                    Test.instanceCount = i20;
                                    break;
                                case 100:
                                    i21 += -51244;
                                    break;
                                case 101:
                                    by1 += (byte)(((i23 * Test.instanceCount) + f3) - i20);
                                    break;
                                case 102:
                                    s += (short)(i23 ^ i19);
                                }
                                break;
                            case 71:
                                i22 += (i23 * i19);
                                break;
                            case 74:
                                i22 -= (int)Test.instanceCount;
                                break;
                            default:
                                i22 += (i23 | i21);
                            }
                            break;
                        case 121:
                            dFld *= Test.instanceCount;
                        case 122:
                            i19 = i19;
                        case 123:
                            dFld += dFld;
                            break;
                        case 124:
                            i21 = -12413;
                            break;
                        case 125:
                            i19 >>>= -10;
                            break;
                        }
                    case 67:
                        i22 = (int)Test.instanceCount;
                        break;
                    case 68:
                        fFld -= lFld;
                    }
                } while (--i23 > 0);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
