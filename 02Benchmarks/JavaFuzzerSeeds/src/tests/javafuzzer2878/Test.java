package tests.javafuzzer2878;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:06:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62078L;
    public static volatile byte byFld=70;
    public double dFld=0.7296;
    public static short sFld=29786;
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.fArrFld, -2.38F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i8=-149, i9=1;

        for (i8 = 196; i8 > 3; i8--) {
            Test.iArrFld[i8 + 1] <<= 39838;
        }
        vMeth1_check_sum += l + i8 + i9;
    }

    public static void vMeth(int i6, int i7) {

        int i10=0, i12=-5219, i13=211;
        long l1=4056197377871948698L;
        float f1=-51.641F;
        boolean b1=false;

        i7 -= (((i6 % (Test.byFld | 1)) >> (i7 >> -35)) + ((--Test.byFld) - (19299 * Test.iArrFld[(i7 >>> 1) % N])));
        vMeth1(Test.instanceCount);
        i10 = 379;
        do {
            int i11=-8;
            Test.instanceCount += (i10 ^ Test.instanceCount);
            l1 = (long)22.907F;
            i11 += i7;
            i6 += (((i10 * i10) + i6) - f1);
            i11 *= i11;
            for (i12 = 1; i12 < 12; ++i12) {
                if (i7 != 0) {
                    vMeth_check_sum += i6 + i7 + i10 + l1 + Float.floatToIntBits(f1) + i12 + i13 + (b1 ? 1 : 0);
                    return;
                }
                i6 += (i12 + l1);
                if (b1) break;
                i13 |= Test.byFld;
            }
        } while ((i10 -= 3) > 0);
        i7 -= 0;
        i6 = 58787;
        vMeth_check_sum += i6 + i7 + i10 + l1 + Float.floatToIntBits(f1) + i12 + i13 + (b1 ? 1 : 0);
    }

    public static int iMeth(double d) {

        int i14=2, i15=-8599, i16=15549, i17=-6, i18=5, i19=8958, i20=53918;
        float f2=-16.309F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -66L);

        vMeth(i14, i14);
        lArr[(-246 >>> 1) % N] = i14;
        i14 = (int)Test.instanceCount;
        d = f2;
        for (i15 = 13; i15 < 271; i15++) {
            Test.iArrFld[i15 + 1] = 9976;
            for (i17 = 6; i17 > 1; i17--) {
                if (b2) {
                    i14 += i14;
                    i16 -= i18;
                    i14 = 243;
                    if (b2) break;
                } else if (b2) {
                    for (i19 = 1; i19 < 2; i19++) {
                        i16 += i19;
                        Test.fArrFld[i17] -= i14;
                    }
                } else {
                    Test.byFld >>= (byte)i18;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i14 + Float.floatToIntBits(f2) + i15 + i16 + i17 + i18 + (b2 ? 1 :
            0) + i19 + i20 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-38160, i1=0, i2=-75, i3=20809, i4=35554, i5=-4, i21=-2, i22=-9;
        boolean b=false;

        for (i = 6; 225 > i; i++) {
            for (i2 = 4; i2 < 115; i2++) {
                float f=0.44F;
                Test.instanceCount += Test.instanceCount;
                f -= f;
                for (i4 = 1; i4 < 2; i4++) {
                    dArrFld[i4 + 1] += i;
                    if (b) {
                        b = b;
                        i5 += (i4 | Test.instanceCount);
                        i3 *= (-(++i1));
                        dArrFld[i - 1] = iMeth(dFld);
                    }
                }
                f -= -33040;
                f += i1;
                i3 >>= i5;
                b = false;
                i3 &= i2;
                for (i21 = 1; i21 < 2; i21++) {
                    switch (((i % 1) * 5) + 67) {
                    case 68:
                        switch ((i % 6) + 88) {
                        case 88:
                            Test.instanceCount = i;
                            try {
                                i22 = (i / 1629264500);
                                i1 = (Test.iArrFld[i2 - 1] % -81);
                                i3 = (1718934818 % i21);
                            } catch (ArithmeticException a_e) {}
                            i3 = 76;
                        case 89:
                            Test.instanceCount -= Test.instanceCount;
                            Test.iArrFld[i + 1] = (int)4L;
                            break;
                        case 90:
                            if (true) {
                                Test.byFld += (byte)i5;
                                if (true) {
                                    dArrFld[i21 - 1] += i1;
                                    i22 = i3;
                                    Test.iArrFld[i2] = Test.sFld;
                                }
                            } else if (b) {
                                f += (i21 * i21);
                            } else {
                                i3 <<= (int)Test.instanceCount;
                            }
                            break;
                        case 91:
                            i3 += i1;
                        case 92:
                            Test.fArrFld[i - 1] -= Test.instanceCount;
                            break;
                        case 93:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        default:
                            i3 = 146;
                        }
                        break;
                    default:
                        Test.iArrFld[(1 >>> 1) % N] = (int)Test.instanceCount;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
