package tests.javafuzzer2560;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:39:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8476389010805913816L;
    public static volatile float fFld=-2.688F;
    public static int iFld=-9037;
    public static int iFld1=-7030;
    public static int iFld2=144;
    public static double dFld=0.10310;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=42559, i4=50403, i5=-56, i6=-14, i7=-4, i8=-12, iArr[]=new int[N];
        double d=97.3223;
        long l1=-3268467802L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -7519);
        FuzzerUtils.init(fArr, 0.347F);

        for (i3 = 1; i3 < 126; i3++) {
            iArr[i3 + 1] += i4;
            for (i5 = 1; i5 < 13; i5++) {
                d = Test.instanceCount;
                for (i7 = 1; i7 < 2; ++i7) {
                    i6 += i7;
                    i8 = (int)2570264393L;
                    d = i5;
                    Test.iFld += (i7 - i8);
                }
                i4 += i4;
                l1 = 1;
                do {
                    i6 = i4;
                    fArr[(int)(l1 + 1)] -= i6;
                    Test.fFld -= -18605;
                    Test.iFld *= (int)d;
                } while (++l1 < 2);
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + l1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        long l2=11630L, lArr[]=new long[N];
        int i9=21329, i10=-128, i11=12, i12=13, i13=-213, i14=-3594, i15=40345;
        double d1=-11.27299;

        FuzzerUtils.init(lArr, 50454L);

        Test.iFld &= iMeth();
        for (l2 = 1; l2 < 246; l2++) {
            Test.fFld += Test.instanceCount;
            for (i10 = 1; i10 < 7; ++i10) {
                i11 = i10;
                d1 = i11;
                for (i12 = 1; 2 > i12; i12++) {
                    Test.instanceCount = i12;
                    Test.iFld1 += i11;
                }
                i13 ^= (int)17L;
                i11 *= (int)Test.instanceCount;
                for (i14 = i10; i14 < 2; i14++) {
                    i13 += (((i14 * l2) + Test.iFld2) - i9);
                    lArr[i14] = i9;
                    d1 = 2.130964;
                }
            }
        }
        long meth_res = l2 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i2) {

        byte by=3;
        short s=-19529;

        i2 = (int)(((i2 / ((long)(Test.fFld) | 1)) * (7 + (by + i2))) + ((i2 + s) * (l + i2)));
        i2 %= (int)(((long)(((Test.instanceCount + 5) * i2) * (lMeth() - Test.dFld))) | 1);
        Test.fFld = l;
        vMeth_check_sum += l + i2 + by + s;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-41, i16=-96, i17=97, i18=34990, i19=-14, i20=-64, i21=-62, i22=-231, i23=-13, iArr1[]=new int[N];
        boolean b=true;
        short s1=12644;
        double d2=0.86599;
        byte by1=27;
        float fArr1[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr1, 1.494F);
        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(lArr1, -37204L);

        for (i = 16; i < 354; ++i) {
            vMeth(Test.instanceCount, Test.iFld2);
            i1 *= i1;
            Test.iFld2 += Test.iFld2;
        }
        for (i16 = 3; 129 > i16; ++i16) {
            i17 = Test.iFld2;
            i17 >>>= i17;
            for (i18 = 3; i18 < 199; ++i18) {
                fArr1[i18 - 1] *= i17;
                Test.iFld1 += i18;
                i19 += (i18 * i18);
                Test.iFld -= (int)Test.instanceCount;
                for (i20 = i18; i20 < 2; i20++) {
                    iArr1 = iArr1;
                    i19 = i21;
                    b = b;
                    i17 += (int)Test.instanceCount;
                }
                i19 |= (int)Test.instanceCount;
            }
            Test.iFld1 += (0 + (i16 * i16));
            for (i22 = 9; i22 < 199; ++i22) {
                iArr1[i16 + 1] = 8;
                switch ((((i19 >>> 1) % 1) * 5) + 98) {
                case 100:
                    Test.instanceCount += (-206 + (i22 * i22));
                    Test.iFld1 <<= i16;
                    break;
                }
                lArr1[i22] = s1;
                Test.iFld2 -= i23;
                Test.fFld = (float)d2;
                i23 -= i1;
            }
        }
        iArr1[(i21 >>> 1) % N] = i22;
        by1 = (byte)i23;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
