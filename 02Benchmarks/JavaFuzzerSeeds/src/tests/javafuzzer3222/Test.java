package tests.javafuzzer3222;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:17:10 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-21876L;
    public int iFld=2;
    public static double dFld=-2.115920;
    public static byte byFld=-94;
    public static volatile float fFld=-110.609F;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -211);
        FuzzerUtils.init(Test.fArrFld, -19.6F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {


        Test.instanceCount = i7;
        Test.instanceCount -= i7;
        vMeth1_check_sum += i7;
    }

    public static void vMeth(boolean b, short s, long l1) {

        int i5=145, i6=29989, i8=64624, i9=0, i10=-7, i11=-14665, iArr1[]=new int[N];
        long l2=8176L, l3=-40591L, l4=14L;
        float f=51.117F;

        FuzzerUtils.init(iArr1, -1);

        i5 += (--i5);
        i5 = (((i5 * i5) - iArr1[(24370 >>> 1) % N]) - (i5 = (-(i5 % (s | 1)))));
        i5 *= i5;
        i5 = 11;
        for (l2 = 258; l2 > 4; --l2) {
            vMeth1(i5);
            l1 = i5;
            for (i8 = 1; i8 < 6; ++i8) {
                i5 *= (int)l3;
                l3 = Test.instanceCount;
                i9 = (int)f;
                l4 = i9;
                for (i10 = 1; i10 < 2; i10++) {
                    f = i5;
                    i9 = i9;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + s + l1 + i5 + l2 + i6 + i8 + i9 + l3 + Float.floatToIntBits(f) + l4 + i10 +
            i11 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i, int i1, long l) {

        int i2=8, i3=-138, i4=1, i12=-6, i13=-151, iArr[]=new int[N];
        boolean b1=true;
        short s1=25373, sArr[]=new short[N];

        FuzzerUtils.init(iArr, -230);
        FuzzerUtils.init(sArr, (short)-9370);

        i2 = 1;
        while (++i2 < 276) {
            i += (int)(Test.dFld++);
            i1 -= i2;
            i1 = Integer.reverseBytes(iArr[i2 - 1]);
            sArr[i2] *= (short)Test.instanceCount;
        }
        for (i3 = 8; i3 < 285; ++i3) {
            vMeth(b1, s1, l);
            if (b1) {
                i4 += (int)(6736L + (i3 * i3));
            } else if (b1) {
                for (i12 = 1; i12 < 6; i12++) {
                    i4 = (int)1.688F;
                    i4 >>= 57134;
                    i4 -= i;
                    Test.byFld = (byte)Test.fFld;
                    i += i1;
                }
            } else if (b1) {
                i4 *= (int)-47512L;
            }
        }
        long meth_res = i + i1 + l + i2 + i3 + i4 + (b1 ? 1 : 0) + s1 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=-9, i15=-3, i16=167, i17=2, i18=-3, i19=11, i20=13, i21=-55685;
        short s2=1577, sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)25631);

        iFld >>= (int)((iMeth(13, iFld, Test.instanceCount) * Test.instanceCount) - Test.instanceCount);
        Test.iArrFld[(iFld >>> 1) % N] = iFld;
        for (i14 = 130; 6 < i14; i14--) {
            iFld += i14;
            for (i16 = 202; i16 > 4; i16--) {
                Test.fArrFld[i16 + 1] -= Test.instanceCount;
                Test.fFld += Test.fFld;
                i17 -= i17;
                Test.byFld += (byte)(((i16 * iFld) + Test.fFld) - i17);
                Test.iArrFld[i16 - 1] += 96;
            }
            i17 += (int)(2177438960717680154L + (i14 * i14));
            Test.iArrFld = Test.iArrFld;
            for (i18 = i14; i18 < 202; i18++) {
                switch (((i18 % 1) * 5) + 14) {
                case 16:
                    iFld &= (int)Test.instanceCount;
                    try {
                        iFld = (-25815 / i17);
                        iFld = (i14 % i15);
                        i15 = (i18 / -660511848);
                    } catch (ArithmeticException a_e) {}
                    iFld += (int)(-53.278F + (i18 * i18));
                    Test.instanceCount ^= Test.instanceCount;
                    break;
                default:
                    Test.dFld += i16;
                    Test.instanceCount >>= Test.instanceCount;
                    Test.fFld = i15;
                    Test.dFld = iFld;
                }
                s2 += (short)i18;
                for (i20 = 1; i20 < 1; i20++) {
                    Test.iArrFld[i18] = iFld;
                    Test.fArrFld[i14] = -8136;
                    Test.dFld += Test.instanceCount;
                    sArr1[i18] = (short)i19;
                    Test.fFld = Test.instanceCount;
                    Test.byFld += (byte)(i20 * i20);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
