package tests.javafuzzer2308;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:02:45 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2860803620L;
    public static byte byFld=-78;
    public static float fFld=1.362F;
    public static boolean bFld=true;
    public double dFld=0.20868;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l4) {

        int i17=17, i18=-245, i19=-31, i20=-35, i21=62675, iArr1[]=new int[N];
        double d2=-49.123759, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 2.14785);
        FuzzerUtils.init(iArr1, 0);

        i17 = 1;
        do {
            if (Test.bFld) {
                dArr1[i17 + 1] = d2;
                Test.byFld >>>= (byte)i17;
                for (i18 = 1; i18 < 12; i18++) {
                    i19 *= (int)-6L;
                    try {
                        i19 = (1832041001 / i17);
                        iArr1[i18 - 1] = (i18 / -123);
                        i19 = (iArr1[i18] / -39);
                    } catch (ArithmeticException a_e) {}
                    for (i20 = 1; i20 < 2; i20++) {
                        i21 += (-75 + (i20 * i20));
                        dArr1[i17 - 1] = Test.fFld;
                        i19 = (int)Test.instanceCount;
                        if (i17 != 0) {
                        }
                        i21 -= -6;
                        d2 -= i21;
                    }
                    i21 = i20;
                }
            }
        } while (++i17 < 126);
        long meth_res = l4 + i17 + Double.doubleToLongBits(d2) + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i12, double d1, int i13) {

        long l3=4525928537685611611L;
        int i14=46100, i15=59, i16=-197;

        Test.instanceCount &= (long)(((Test.instanceCount << i12) - (i12 + i12)) - ((--Test.fFld) / ((i12 + i12) | 1)));
        Test.lArrFld[(i13 >>> 1) % N] = (long)(((Test.instanceCount - i13) - (i12 * 3)) - (Test.fFld--));
        for (l3 = 3; l3 < 265; l3++) {
            i13 += (int)(l3 * i14);
            Test.instanceCount += (l3 + i13);
            i13 = (int)((-(-1 * (i12 - 33.347F))) - (--Test.instanceCount));
            i15 = 1;
            while (++i15 < 6) {
                i16 = 1;
                while (++i16 < 1) {
                    Test.instanceCount = Test.lArrFld[i15 + 1];
                    if (i13 != 0) {
                    }
                    i13 += (int)((176L * i15) - (++d1));
                    if (i12 != 0) {
                    }
                    i14 *= (int)(((Test.instanceCount - -39) + (i12 + 12)) - iMeth1(l3));
                    Test.instanceCount %= 239;
                    i14 = i16;
                }
            }
        }
        long meth_res = i12 + Double.doubleToLongBits(d1) + i13 + l3 + i14 + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i8, int i9, long l2) {

        int i10=-52573, i11=-148, i22=0, i23=1, iArr2[]=new int[N];
        double d=-88.105755;
        long l5=3904198556858900904L;

        FuzzerUtils.init(iArr2, 44);

        for (i10 = 1; i10 < 239; i10++) {
            switch (((i10 % 10) * 5) + 46) {
            case 49:
                l2 = (long)((++d) + iMeth(i10, d, i10));
                i8 *= -191;
                i8 >>= Test.byFld;
                break;
            case 60:
            case 56:
                iArr2[i10] += i11;
                for (i22 = 1; i22 < 7; i22++) {
                    l2 += l5;
                    iArr2[i22 + 1] -= (int)Test.fFld;
                    Test.bFld = Test.bFld;
                    i23 += (int)Test.fFld;
                    i8 *= i10;
                    i9 = (int)Test.fFld;
                    l5 = i10;
                    i8 += (i22 | i11);
                }
                break;
            case 63:
                Test.instanceCount += (i10 ^ l5);
            case 84:
                d = 124L;
            case 86:
                i8 += 4;
                break;
            case 55:
                i11 = (int)Test.fFld;
            case 59:
                l2 /= (i11 | 1);
            case 92:
                l2 += (i10 * i10);
                break;
            case 79:
                iArr2[i10 - 1] -= i22;
                break;
            default:
                i23 >>= -221;
            }
        }
        vMeth_check_sum += i8 + i9 + l2 + i10 + i11 + Double.doubleToLongBits(d) + i22 + i23 + l5 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=11192, i1=13, i2=42936, i4=2, i5=-142, i6=150, i7=7, i25=-2, i26=59811, i27=-134, iArr[]=new int[N];
        long l1=-7738498141878189920L;
        float f=-116.680F, fArr[]=new float[N];
        short s=25354;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(fArr, 0.343F);
        FuzzerUtils.init(iArr, 46767);
        FuzzerUtils.init(dArr, -35.87035);

        for (i = 2; i < 256; i++) {
            Test.byFld *= (byte)i;
            Test.fFld *= (((--Test.lArrFld[i - 1]) - (i1 / (Test.instanceCount | 1))) - ((i2 - i2) + (--i2)));
            Test.fFld *= ((i2++) - Test.instanceCount);
            fArr[i + 1] *= (i1 - (Math.max(i2, i1) - (++Test.instanceCount)));
            Test.instanceCount ^= (long)((++dArr[i][i - 1]) + (-(i * 7)));
            Test.instanceCount += (i | Test.instanceCount);
            for (i4 = 6; i4 < 99; ++i4) {
                i1 += (int)(((l1 - Test.byFld) - (Test.fFld * i)) - (dArr[i + 1][i]--));
                for (i6 = 1; i6 < 2; ++i6) {
                    vMeth(i5, 32, l1);
                    i5 += -13;
                    if (true) continue;
                    Test.byFld = (byte)i5;
                    Test.byFld += (byte)(((i6 * i2) + i4) - i1);
                    dFld *= i7;
                    iArr[i4] += i5;
                }
            }
            i7 ^= (int)l1;
            for (f = 3; f < 99; f += 3) {
                for (i26 = 4; i26 > 1; i26 -= 2) {
                    dFld *= Test.instanceCount;
                    Test.bFld = Test.bFld;
                    l1 *= i26;
                    i1 += (((i26 * i27) + i7) - i6);
                    s *= (short)i27;
                    i25 <<= i6;
                    Test.instanceCount = -119;
                }
                Test.fFld = i1;
                l1 = i4;
                i7 >>>= i4;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
