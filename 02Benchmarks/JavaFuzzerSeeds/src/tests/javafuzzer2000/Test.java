package tests.javafuzzer2000;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:15:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3733607434L;
    public static int iFld=-1501;
    public static short sFld=-22045;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 908);
        FuzzerUtils.init(Test.fArrFld, -2.819F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth() {

        int i5=14987, i6=-32737, i7=164, i8=55742, i9=27640, i10=81, iArr[]=new int[N];
        float f=-123.1006F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2751533055473368918L);
        FuzzerUtils.init(iArr, -3469);

        i5 = (int)f;
        for (i6 = 3; i6 < 347; i6 += 3) {
            double d=-1.105496;
            i5 |= i7;
            Test.instanceCount *= (long)d;
            Test.instanceCount += i5;
            i8 = 1;
            do {
                Test.iArrFld[i8 - 1] += (int)-63.790F;
                switch (((i6 >>> 1) % 3) + 7) {
                case 7:
                    lArr1[i8] = i6;
                    i7 = i8;
                    for (i9 = i8; i9 < 1; ++i9) {
                        iArr[i6 + 1] -= i10;
                        Test.instanceCount += (i9 | i10);
                        Test.instanceCount += 941066171590286617L;
                    }
                    Test.instanceCount += i9;
                    break;
                case 8:
                    i5 -= i10;
                case 9:
                    lArr1[i6] <<= Test.instanceCount;
                }
            } while (++i8 < 14);
        }
        long meth_res = i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        float f1=0.205F;
        int i11=3669, i12=41467, i13=30945, i14=-3, i15=-49505, i16=-55;
        boolean b=false;

        byMeth();
        f1 -= i4;
        if (b) {
            for (i11 = 16; i11 < 386; i11++) {
                i12 += (int)Test.instanceCount;
                i12 >>>= (int)Test.instanceCount;
                Test.instanceCount += i11;
                Test.iArrFld[i11 - 1] += i4;
                for (i13 = 1; i13 < 5; ++i13) {
                    for (i15 = 1; 2 > i15; i15++) {
                        i14 *= i4;
                        i14 += (i15 * i15);
                    }
                    Test.iArrFld[i11 - 1] |= i12;
                    Test.iArrFld[i13 + 1] -= Test.iFld;
                    i3 ^= i3;
                }
            }
        } else {
            Test.sFld -= (short)25175;
        }
        vMeth1_check_sum += i3 + i4 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0);
    }

    public void vMeth(long l, long l1, int i2) {

        byte by=67;
        int i17=-160, i18=-181, i19=192, i20=3;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -622571806L);
        FuzzerUtils.init(dArr, 122.16812);

        lArr[(3 >>> 1) % N] = i2;
        vMeth1(-1, i2);
        i2 = 36506;
        l |= i2;
        by = (byte)i2;
        for (i17 = 15; i17 < 255; i17 += 3) {
            Test.iFld += (i17 | i2);
            i19 = 1;
            do {
                l1 *= i19;
                dArr[i19 - 1] -= i2;
                i20 = 1;
                do {
                    i18 += (int)Test.instanceCount;
                    Test.iArrFld[i20 - 1] = (int)9043L;
                    l1 = Test.instanceCount;
                    try {
                        i2 = (i19 % 9596);
                        i2 = (-353158014 / i2);
                        Test.iArrFld[i20 + 1] = (i2 / i2);
                    } catch (ArithmeticException a_e) {}
                } while (++i20 < 1);
            } while (++i19 < 19);
        }
        vMeth_check_sum += l + l1 + i2 + by + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-31378, i1=-13, i21=-29464, i22=-53, i23=30270, i24=-4, i25=-206, i26=9, i27=-44952, i28=-6;
        float f2=6.822F;
        byte by1=127, by2=44, byArr[]=new byte[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(byArr, (byte)38);
        FuzzerUtils.init(lArr2, -20852L);

        for (i = 4; i < 132; ++i) {
            Test.instanceCount = -170;
            vMeth(Test.instanceCount, Test.instanceCount, i);
        }
        for (i21 = 11; i21 < 342; i21 += 2) {
            byArr[i21] += (byte)f2;
            Test.iFld += (int)Test.instanceCount;
            by1 -= (byte)i;
            Test.instanceCount += i1;
        }
        if (false) {
            Test.iFld = by2;
        }
        for (i23 = 7; i23 < 133; ++i23) {
            Test.iFld = i23;
            for (i25 = 6; 199 > i25; i25 += 3) {
                Test.fArrFld[i25] = f2;
                i22 = (int)Test.instanceCount;
                switch ((i23 % 1) + 4) {
                case 4:
                    i24 += (((i25 * i21) + Test.instanceCount) - Test.sFld);
                    break;
                }
                for (i27 = 1; 4 > i27; i27++) {
                    i24 = (int)2140320632L;
                    Test.iFld <<= i23;
                    Test.sFld *= (short)-64.286F;
                    try {
                        i26 = (i24 / Test.iFld);
                        i24 = (i25 / Test.iFld);
                        Test.iArrFld[i27 - 1] = (Test.iArrFld[i27 - 1] / i1);
                    } catch (ArithmeticException a_e) {}
                    by2 += (byte)(((i27 * i) + Test.sFld) - i23);
                    lArr2 = lArr2;
                }
                lArr2[i25 + 1] -= i1;
                i26 += (((i25 * i21) + i27) - Test.instanceCount);
                i22 >>= i26;
                i24 += by2;
            }
            i24 >>= (int)Test.instanceCount;
            Test.instanceCount += (((i23 * i25) + Test.instanceCount) - f2);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
