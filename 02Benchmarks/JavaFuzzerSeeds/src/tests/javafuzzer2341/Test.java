package tests.javafuzzer2341;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:58:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-227L;
    public float fFld=28.624F;
    public static short sFld=-17437;
    public static boolean bFld=false;
    public byte byFld=-127;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i5=43, i6=109, i7=4, i8=-50095, iArr[]=new int[N];
        double d=0.6889;
        float f=52.876F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -235);
        FuzzerUtils.init(lArr, 4043491052L);

        for (i5 = 6; i5 < 311; i5++) {
            if (i5 != 0) {
                vMeth2_check_sum += l + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f) +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                return;
            }
            d = 1;
            do {
                for (i7 = (int)(d); i7 < 1; i7++) {
                    l = Test.instanceCount;
                    switch ((int)((d % 10) + 62)) {
                    case 62:
                        iArr[i7 - 1] = -35;
                        i6 = -40198;
                        l = -71;
                        i6 *= i5;
                        break;
                    case 63:
                        Test.sFld += (short)(((i7 * i8) + i6) - i5);
                        break;
                    case 64:
                        i8 *= i7;
                        i8 += (i7 * i7);
                        Test.instanceCount += (20732 + (i7 * i7));
                        iArr[i5 + 1] += 12196;
                        break;
                    case 65:
                        iArr[(int)(d + 1)] *= i8;
                        break;
                    case 66:
                        l -= i8;
                        break;
                    case 67:
                        f += (-29432 + (i7 * i7));
                        break;
                    case 68:
                        lArr[(int)(d)] %= (Test.instanceCount | 1);
                        break;
                    case 69:
                        i8 >>= i6;
                        break;
                    case 70:
                        i6 += (i7 ^ Test.sFld);
                        break;
                    case 71:
                        iArr[i5 - 1] += Test.sFld;
                        break;
                    default:
                        i6 += -22112;
                    }
                }
            } while (++d < 5);
        }
        vMeth2_check_sum += l + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i1, byte by1) {

        int i2=-23069, i3=71, i4=52691;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.634F);

        i1 = (9 * Test.sFld);
        for (i2 = 5; i2 < 192; i2++) {
            Test.instanceCount += (i2 * i3);
            i4 = 1;
            do {
                fArr[i4 + 1] = Test.instanceCount;
                vMeth2(3963299912L);
            } while (++i4 < 9);
            i3 = i2;
            if (Test.bFld) continue;
            i3 += (i2 | i1);
            switch (((i2 % 2) * 5) + 52) {
            case 54:
                i1 -= 47;
                Test.iArrFld[i2] = (int)75.93149;
                i3 += (i2 - i3);
                break;
            case 60:
                if (i4 != 0) {
                    vMeth1_check_sum += i1 + by1 + i2 + i3 + i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                i3 = -38472;
                break;
            default:
                try {
                    i1 = (i2 % 62);
                    i3 = (i3 / i2);
                    i1 = (i1 % 53587);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += i1 + by1 + i2 + i3 + i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        byte by=102;
        int i=4, i9=54, i10=154, i11=36865, i12=-19881, i13=-11;

        by = (byte)((-126 >> (i - i)) >> i);
        vMeth1(i, (byte)(55));
        Test.iArrFld[(i >>> 1) % N] <<= (int)Test.instanceCount;
        for (i9 = 1; i9 < 205; ++i9) {
            i11 = 1;
            while (++i11 < 8) {
                i -= i9;
                i &= Test.sFld;
            }
            Test.instanceCount = i10;
            Test.instanceCount *= i9;
            Test.sFld += (short)236;
        }
        for (i12 = 17; i12 < 377; ++i12) {
            try {
                i10 = (i13 / -163356992);
                i10 = (246 / i10);
                i13 = (i12 % 7949);
            } catch (ArithmeticException a_e) {}
        }
        i *= 64423;
        i *= -2661;
        i10 = i13;
        vMeth_check_sum += by + i + i9 + i10 + i11 + i12 + i13;
    }

    public void mainTest(String[] strArr1) {

        short s=30135;
        int i14=240, i15=-161, i16=10, i17=-19, i18=-65088;
        double d1=0.78261, dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 55.122316);
        FuzzerUtils.init(lArr1, 47548L);

        s = (short)fFld;
        vMeth();
        byFld += (byte)-25671;
        i14 <<= 44;
        byFld -= (byte)d1;
        i15 = 1;
        do {
            Test.iArrFld[i15 - 1] |= i15;
            Test.instanceCount += (((i15 * fFld) + i14) - i15);
            if (Test.bFld) continue;
            Test.iArrFld[i15] = (int)fFld;
            dArr[i15] += Test.instanceCount;
            i14 += (i15 ^ byFld);
            dArr[i15] = i15;
            i14 += (((i15 * fFld) + i15) - Test.sFld);
            i14 = -168;
        } while ((i15 += 3) < 229);
        i16 = 1;
        do {
            for (i17 = 1; i17 < 83; i17++) {
                i18 += 188;
                Test.instanceCount += i15;
            }
            i14 = 24;
        } while (++i16 < 303);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
