package tests.javafuzzer268;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:07:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static int iFld=0;
    public static volatile byte byFld=113;
    public static float fFld1=107.401F;
    public static double dFld=0.106525;
    public volatile float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -23201L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i8=-53314, i9=-12919, i10=-7, i11=228, i12=20125, i13=-168, i14=3, iArr1[]=new int[N];
        short s=-31517;
        boolean b=false;
        double d1=0.120685;
        float f1=77.989F;

        FuzzerUtils.init(iArr1, -249);

        Test.iFld = Test.iFld;
        iArr1[(-11 >>> 1) % N] = 40561;
        i8 = 1;
        while (++i8 < 176) {
            Test.byFld += (byte)(((i8 * i8) + i8) - s);
            for (i9 = 1; 9 > i9; i9++) {
                for (i11 = 1; i11 < 2; ++i11) {
                    if (b) break;
                    d1 = i8;
                    iArr1[i8] = 42308;
                }
                if (i12 != 0) {
                    vMeth2_check_sum += i8 + s + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i13
                        + i14 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                for (i13 = 1; i13 < 2; ++i13) {
                    switch ((i9 % 1) + 71) {
                    case 71:
                    default:
                        if (b) {
                            Test.iFld += i13;
                            f1 = 58;
                        } else if (b) {
                            Test.instanceCount -= -5;
                        } else if (b) {
                            i12 = -117;
                        } else {
                            iArr1[i13 + 1] = (int)Test.instanceCount;
                        }
                    }
                }
            }
        }
        vMeth2_check_sum += i8 + s + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i13 + i14 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(float f, int i6, int i7) {


        vMeth2();
        vMeth1_check_sum += Float.floatToIntBits(f) + i6 + i7;
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5=-55704, i15=-38, i16=-59880, i17=55978, i18=-58642, iArr2[]=new int[N];
        double d2=108.128337;
        short s1=2883;
        long lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr2, 46439);
        FuzzerUtils.init(lArr, -1457L);
        FuzzerUtils.init(fArr, 98.229F);

        i5 = 1;
        while (++i5 < 214) {
            vMeth1(-63.42F, i3, i4);
            for (i15 = 1; i15 < 8; ++i15) {
                i16 = i16;
                for (i17 = i5; i17 < 2; i17++) {
                    try {
                        i18 = (i5 % -604);
                        i3 = (i3 / iArr2[i17 + 1]);
                        i18 = (714846246 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i4;
                    switch ((i5 % 10) + 106) {
                    case 106:
                        Test.instanceCount += i17;
                    case 107:
                        i16 -= i15;
                        switch ((i15 % 2) + 62) {
                        case 62:
                            lArr[i15 + 1] = i4;
                            try {
                                i3 = (53506 % i16);
                                i3 = (i2 / -27623);
                                i4 = (i16 / 277389027);
                            } catch (ArithmeticException a_e) {}
                            i2 -= (int)d2;
                            break;
                        case 63:
                            i18 -= s1;
                            break;
                        }
                        break;
                    case 108:
                        iArr2[i5] += 5;
                    case 109:
                        Test.instanceCount += i2;
                        break;
                    case 110:
                        Test.fFld1 -= Test.fFld1;
                        break;
                    case 111:
                        Test.iFld = 1074;
                        break;
                    case 112:
                    case 113:
                        try {
                            i4 = (i2 % i18);
                            Test.iFld = (i18 / 2897);
                            Test.iFld = (iArr2[i5 - 1] / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 114:
                        i4 *= i18;
                        break;
                    case 115:
                        fArr[i5 + 1][i17] -= i16;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d2) + s1 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr3) {

        int i1=236, i19=-167, i20=198, i21=-32086, i22=-17395, i23=-14095, i24=-7, i25=196, iArr3[]=new int[N];
        short s2=18274;

        FuzzerUtils.init(iArr3, -44550);

        Test.instanceCount %= ((i1--) | 1);
        vMeth(i1, i1, 58);
        fArrFld[(Test.iFld >>> 1) % N] -= i1;
        i19 = 1;
        while (++i19 < 266) {
            for (i20 = 1; i20 < 94; ++i20) {
                Test.iFld += (i20 ^ i19);
            }
            for (i22 = i19; i22 < 94; i22++) {
                Test.lArrFld[i22] = i21;
                for (i24 = 1; i24 < 1; ++i24) {
                    i25 *= (int)Test.dFld;
                    Test.fFld1 *= i20;
                    i23 |= Test.byFld;
                    Test.byFld -= (byte)3;
                    i23 -= 120;
                    Test.fFld1 -= i23;
                }
                Test.iFld = (int)Test.instanceCount;
                i25 |= i21;
                i25 -= (int)Test.instanceCount;
                switch (((i24 >>> 1) % 2) + 92) {
                case 92:
                    i21 = (int)Test.instanceCount;
                    iArr3[i19] += i19;
                    break;
                case 93:
                    iArr3[i19 + 1] = (int)Test.fFld1;
                    i25 -= (int)Test.instanceCount;
                    i25 = (int)Test.instanceCount;
                    break;
                default:
                    Test.instanceCount = s2;
                    Test.fFld1 += (-26 + (i22 * i22));
                    i23 *= s2;
                    iArr3[i22] = i23;
                }
                i1 >>= -24331;
                Test.iFld ^= i19;
            }
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
