package tests.javafuzzer2547;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:27:41 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=55L;
    public static byte byFld=28;
    public static int iFld=14;
    public static double dFld=0.125597;
    public volatile long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.793F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth() {

        double d=110.51701;
        int i=9;

        d = i;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i;
    }

    public static long lMeth(long l, float f) {

        int i3=113, i4=-26174, i5=-3, i6=-31769, i7=-225, i8=-26, iArr1[]=new int[N];
        boolean b=false;
        double d1=-1.52816;

        FuzzerUtils.init(iArr1, 65147);

        i3 *= (int)l;
        for (i4 = 4; i4 < 257; ++i4) {
            i6 = 6;
            while ((i6 -= 2) > 0) {
                for (i7 = 1; i7 < 2; i7++) {
                    if (b) break;
                    switch ((((-13 >>> 1) % 6) * 5) + 67) {
                    case 76:
                        iArr1[i4 - 1] = (int)Test.instanceCount;
                        break;
                    case 73:
                        l = (long)-106.655F;
                        break;
                    case 94:
                        i3 = (int)Test.instanceCount;
                    case 69:
                        d1 += i3;
                        i5 += (int)Test.instanceCount;
                        i5 *= i3;
                        l -= Test.instanceCount;
                        break;
                    case 70:
                        i3 = i3;
                        Test.instanceCount -= 6;
                        break;
                    case 75:
                        i5 = Test.byFld;
                        break;
                    default:
                        i3 += (130 + (i7 * i7));
                    }
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1() {

        float f1=-67.807F, fArr[]=new float[N];
        int i9=41727, i10=-7788, i11=119, iArr2[]=new int[N];
        short s1=3046;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -10643);
        FuzzerUtils.init(fArr, 37.537F);

        lMeth(Test.instanceCount, f1);
        Test.iFld = Test.iFld;
        try {
            for (i9 = 7; 166 > i9; ++i9) {
                i11 = 1;
                do {
                    i10 >>= s1;
                    iArr2[i11] = s1;
                    iArr2[i11 + 1] *= -231;
                    iArr2[i11 + 1] = -44299;
                    Test.dFld = Test.instanceCount;
                    fArr[i9] *= Test.instanceCount;
                    if (false) break;
                    if (b1) break;
                    i10 >>= (int)Test.instanceCount;
                    Test.dFld = Test.instanceCount;
                } while (++i11 < 10);
            }
        }
        catch (NegativeArraySizeException exc2) {
            i10 *= i11;
        }
        finally {
            Test.instanceCount >>= 1369860472L;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i9 + i10 + i11 + s1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(int i2) {

        short s=-5711;
        int i12=29953, i13=57103, i14=-11, i15=-234, iArr[]=new int[N];
        float f2=99.549F;
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 80);
        FuzzerUtils.init(lArr, 1071883552252776671L);

        i2 >>= (s--);
        iArr[(i2 >>> 1) % N] >>>= (int)(Test.instanceCount -= (--i2));
        vMeth1();
        lArr[(Test.iFld >>> 1) % N] >>= Test.iFld;
        if (b2) {
            Test.byFld = (byte)Test.iFld;
            for (i12 = 11; i12 < 269; ++i12) {
                for (i14 = 1; i14 < 6; ++i14) {
                    i2 = i2;
                    Test.instanceCount += i14;
                    i2 |= -3593;
                    f2 -= -11;
                }
                iArr[i12] = (int)Test.instanceCount;
            }
            i13 = Test.iFld;
        } else {
            Test.instanceCount = (long)f2;
        }
        vMeth_check_sum += i2 + s + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i1=-11, i17=-122, i18=-11, i19=242, i20=224, iArr3[]=new int[N];
        float f3=-19.172F;
        long l1=-5012631373125741858L;
        boolean b3=true;

        FuzzerUtils.init(iArr3, 55411);

        for (int smallinvoc=0; smallinvoc<544; smallinvoc++) vSmallMeth();
        i1 *= (i1 + i1);
        vMeth(i1);
        iArr3 = iArr3;
        lArrFld[(Test.iFld >>> 1) % N][(i1 >>> 1) % N] <<= -135;
        i1 &= Test.iFld;
        try {
            for (int i16 : iArr3) {
                f3 -= i16;
                for (i17 = 63 + 400; i17 > 3; i17 -= 2) {
                    Test.instanceCount = i16;
                    i1 = (int)l1;
                    iArr3[i17] = -119;
                    i1 += i17;
                    f3 += (i17 * i17);
                    iArr3[i17 - 1] += i1;
                    if (b3) {
                        for (i19 = 1; (1 + 400) > i19; ++i19) {
                            Test.instanceCount += (long)f3;
                            Test.dFld += f3;
                            Test.byFld = (byte)3834;
                            Test.iFld = i16;
                            Test.instanceCount += (i19 ^ Test.instanceCount);
                            i16 |= i17;
                            Test.iFld = i16;
                        }
                        Test.iFld += i17;
                    } else {
                        Test.fArrFld[i17 - 1] = 14;
                        i20 += (int)Test.dFld;
                    }
                    i20 -= i19;
                }
                iArr3[(i19 >>> 1) % N] += (int)Test.instanceCount;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc3) {
            Test.instanceCount += Test.iFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
