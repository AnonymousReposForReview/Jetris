package tests.javafuzzer1226;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:43:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2234004227L;
    public static float fFld=-48.958F;
    public static int iFld=13;
    public static boolean bFld=true;
    public static volatile double dFld=48.13140;
    public static boolean bFld1=true;
    public short sFld=-15105;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 115);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static float fMeth(int i7) {

        boolean b=false;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 176);

        b = (((iArr1[(i7 >>> 1) % N]++) * (-40179 * i7)) != (Math.abs(12L) + i7));
        long meth_res = i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        byte by1=-111;
        int i13=-6, i14=-1072, i15=-8454, i16=-53297, i17=109;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.14564);

        by1 *= (byte)Test.instanceCount;
        for (i13 = 16; i13 < 309; i13++) {
            dArr[i13 - 1] %= -2.49914;
            i15 = 1;
            do {
                if (i15 != 0) {
                }
                try {
                    i14 = (-146 % i14);
                    i14 = (i14 % 24269);
                    i14 = (i14 % i14);
                } catch (ArithmeticException a_e) {}
                b1 = b1;
                by1 %= (byte)(i13 | 1);
                i14 = i13;
                i14 += i15;
                i14 -= (int)-2.104946;
                i14 = (int)105.62657;
                for (i16 = 1; i16 < 1; ++i16) {
                    i14 += (i16 * i16);
                }
            } while (++i15 < 6);
        }
        Test.instanceCount -= 224;
        long meth_res = by1 + i13 + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i12) {

        int i18=127, i19=-58940, i20=-7, i21=-56901, i22=69, i23=-56088, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 4);

        if (Test.bFld) {
            iMeth();
            Test.instanceCount -= i12;
            Test.fFld -= i12;
        } else if (Test.bFld) {
            for (i18 = 5; i18 < 144; i18++) {
                i19 += 60022;
                for (i20 = 1; i20 < 11; i20++) {
                    Test.fFld = -8;
                    try {
                        i19 = (i20 / Test.iFld);
                        iArr2[i18 - 1] = (i18 / 56527);
                        i12 = (i21 % -108);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = (int)Test.instanceCount;
                    Test.fFld += i20;
                    for (i22 = 1; i22 < 2; i22++) {
                        Test.iFld += (int)-3328089444497696058L;
                        Test.fFld += i23;
                        if (i23 != 0) {
                            vMeth1_check_sum += i12 + i18 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr2);
                            return;
                        }
                    }
                }
            }
        }
        vMeth1_check_sum += i12 + i18 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=235, i4=125, i5=-34966, i6=79, i8=-26992, i9=1, i10=55966, i11=-14316, iArr[]=new int[N];
        float f=-1.786F;
        byte by=7;

        FuzzerUtils.init(iArr, 3677);

        for (i3 = 6; i3 < 183; ++i3) {
            for (i5 = 1; i5 < 9; i5++) {
                i4 = (int)(((f * i4) - (by++)) - 31413);
                iArr = FuzzerUtils.int1array(N, (int)-21415);
                Test.instanceCount += (Short.reverseBytes((short)(-2.52382 + fMeth(i4))) * i);
            }
            if ((i4 * ((Test.instanceCount >> Test.instanceCount) + (i++))) <= (((i4 - i1) - (--f)) * (i1--))) continue;
            for (i8 = 1; i8 < 9; ++i8) {
                for (i10 = i3; i10 < 2; i10++) {
                    iArr[i10 - 1] -= (++by);
                    vMeth1(i6);
                    Test.dFld = 2;
                }
                i -= 12;
                i -= (int)Test.fFld;
                i11 = (int)Test.instanceCount;
                Test.instanceCount = i6;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + by + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i24=32677, i25=119, i26=-20117, i27=-7, i28=2, i29=-100, i30=6;
        double dArr1[]=new double[N];
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr1, 0.96590);
        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(sArr, (short)23674);

        vMeth(Test.iFld, Test.iFld, 41581);
        for (i24 = 18; i24 < 317; i24++) {
            Test.iArrFld[i24 - 1] += (int)Test.fFld;
            i25 *= (int)-3502908408L;
            i25 *= i24;
            switch ((i24 % 2) + 52) {
            case 52:
                i25 += (int)(143L + (i24 * i24));
                i25 -= -11;
                i26 = 1;
                do {
                    Test.iFld = i25;
                    Test.instanceCount = i24;
                    Test.iFld *= i24;
                    Test.instanceCount = Test.iFld;
                    i25 += (-9839 + (i26 * i26));
                    Test.iArrFld = Test.iArrFld;
                    Test.bArrFld[i24] = Test.bFld1;
                    i25 = sFld;
                } while (++i26 < 84);
                for (i27 = 2; i27 < 84; i27++) {
                    Test.instanceCount >>= i27;
                    Test.iFld = (int)Test.instanceCount;
                    Test.iArrFld[i27] *= i25;
                    for (i29 = i27; i29 < 2; ++i29) {
                        dArr1[i24] += i30;
                        fArrFld[i27 - 1] = i27;
                        Test.iFld = i25;
                        i30 *= (int)-2840935122059571471L;
                        lArr[i27] += Test.iFld;
                    }
                    i25 >>>= i29;
                    sArr[i24 - 1] += (short)i27;
                    i25 += (i27 * Test.iFld);
                }
                break;
            case 53:
                i30 += i24;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
