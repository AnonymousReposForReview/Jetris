package tests.javafuzzer2711;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:02:57 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=66L;
    public static short sFld=24293;
    public static byte byFld=7;
    public static float fFld=1.827F;
    public static double dFld=0.100568;
    public static int iArrFld[][]=new int[N][N];
    public float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -397);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(long l, int i3, int i4) {

        int i5=-72, i6=15890, i7=-35418, i8=35092, i9=4, iArr[]=new int[N];
        boolean b=false;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 3881047666L);
        FuzzerUtils.init(iArr, -71);
        FuzzerUtils.init(fArr, 92.330F);

        i5 = 1;
        do {
            if (b) {
                lArr1[i5 - 1] = 31018;
                iArr[i5] *= -8;
                i3 = i4;
                iArr = iArr;
            } else {
                i4 += (i5 * i5);
                for (i6 = 1; 5 > i6; i6++) {
                    l = i5;
                    i3 += (3 + (i6 * i6));
                    for (i8 = 1; i8 < 2; ++i8) {
                        Test.byFld = (byte)-8701;
                        fArr[i5 - 1] += Test.fFld;
                        lArr1[i6] *= 115;
                    }
                    i9 += i7;
                }
            }
        } while (++i5 < 368);
        long meth_res = l + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i2, double d) {


        i2 >>= (int)((-8 - (85 - (-iMeth2(Test.instanceCount, i2, i2)))) * Test.instanceCount);
        long meth_res = i2 + Double.doubleToLongBits(d);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1) {

        double d1=-38.45654;
        int i10=202, i11=-41468, i12=125, i13=13;
        long l1=27L;

        i1 += (((-121 - (Test.byFld + i1)) - (154 - (i1 - i1))) * iMeth1(i1, 111.92574));
        for (d1 = 245; 9 < d1; --d1) {
            i1 <<= i10;
            l1 += (long)(((d1 * i10) + Test.instanceCount) - l1);
        }
        i10 = (int)Test.fFld;
        i10 -= (int)d1;
        Test.fFld = -55567L;
        l1 = l1;
        i11 = 57;
        for (i12 = 9; i12 < 204; ++i12) {
            i11 += (int)Test.instanceCount;
        }
        i11 = i12;
        i13 = Test.byFld;
        long meth_res = i1 + Double.doubleToLongBits(d1) + i10 + l1 + i11 + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=45703, i14=208, i15=-13, i16=-9, i17=-7, i18=-13, i19=-1;
        double d2=88.120942, d3=2.9987;
        boolean b1=true;
        float f1=0.495F;
        short s=1291;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -107L);

        i = (int)Test.instanceCount;
        i -= (int)lArr[(i >>> 1) % N];
        i -= Test.sFld;
        i = ((i--) - ((-iMeth(i)) + i));
        for (d2 = 1; 232 > d2; d2++) {
            switch ((((10 >>> 1) % 1) * 5) + 77) {
            case 82:
                Test.fFld += i;
                lArr[(int)(d2 - 1)] = i;
                break;
            default:
                if (false) {
                    i14 -= (int)Test.instanceCount;
                    for (i15 = 6; 109 > i15; ++i15) {
                        switch ((int)(((d2 % 2) * 5) + 64)) {
                        case 70:
                            Test.dFld *= i14;
                            for (i17 = 2; i17 > 1; i17--) {
                                b1 = true;
                                Test.fFld += (((i17 * i) + i16) - i16);
                            }
                            switch (((i15 % 9) * 5) + 83) {
                            case 110:
                                for (d3 = 1; d3 < 2; d3++) {
                                    Test.byFld *= (byte)i19;
                                    i14 >>= i16;
                                    i16 -= -5;
                                    i |= (int)Test.instanceCount;
                                    f1 += (float)(((d3 * i14) + Test.sFld) - i15);
                                    lArr[(int)(d3 + 1)] = Test.sFld;
                                    switch ((int)(((d3 % 9) * 5) + 40)) {
                                    case 57:
                                        i += (31 + (d3 * d3));
                                        Test.fFld += (float)(((d3 * i16) + i16) - Test.sFld);
                                        Test.iArrFld[(int)(d3 + 1)][(int)(d2)] >>= (int)Test.instanceCount;
                                        i = i15;
                                    case 73:
                                        i19 += (int)((long)d3 | (long)f1);
                                        break;
                                    case 56:
                                        Test.instanceCount *= i;
                                        break;
                                    case 54:
                                        Test.iArrFld[i15 - 1][(int)(d2)] += i16;
                                        break;
                                    case 80:
                                    case 55:
                                        i <<= i14;
                                    case 46:
                                        fArrFld[i15] *= Test.instanceCount;
                                    case 50:
                                        Test.iArrFld[(int)(d2)][(int)(d2 + 1)] *= i17;
                                        break;
                                    case 77:
                                        if (b1) continue;
                                    }
                                }
                            case 89:
                                if (b1) break;
                                break;
                            case 96:
                                if (b1) continue;
                                break;
                            case 121:
                                i16 <<= i19;
                            case 95:
                                i18 -= s;
                            case 126:
                                Test.instanceCount <<= i19;
                                break;
                            case 125:
                                if (true) continue;
                                break;
                            case 120:
                                i14 <<= i17;
                                break;
                            case 92:
                                f1 += (((i15 * Test.fFld) + i17) - i15);
                                break;
                            default:
                                Test.bArrFld[i15 + 1] = b1;
                            }
                        case 66:
                            i16 -= (int)Test.instanceCount;
                            break;
                        default:
                            Test.iArrFld[i15 - 1][i15 + 1] += i16;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
