package tests.javafuzzer1431;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:24:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-110L;
    public static short sFld=-18701;
    public static int iFld=-48347;
    public static boolean bFld=false;
    public static float fFld=0.988F;
    public static int iFld1=-55;
    public static double dFld=0.90665;
    public byte byFld=-27;
    public static int iFld2=-51694;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.129F);
        FuzzerUtils.init(Test.iArrFld, 1);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by, long l) {

        int i3=-2, i4=4, i5=102, iArr[]=new int[N];
        float f1=-64.384F;
        double d1=1.17066, d2=0.14811;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 248);
        FuzzerUtils.init(lArr, -8L);

        i3 = 1;
        do {
            Test.sFld += (short)16;
            Test.iFld <<= (int)Test.instanceCount;
            iArr = iArr;
            Test.fArrFld[i3] -= Test.instanceCount;
            for (f1 = 1; f1 < 10; ++f1) {
                lArr[(int)(f1 + 1)] = i3;
                for (d1 = 1; d1 < 2; d1 += 2) {
                    d2 += i5;
                    Test.iFld = i5;
                    if (Test.bFld) continue;
                    switch (((i3 % 9) * 5) + 68) {
                    case 98:
                        Test.instanceCount += (long)(d1 - Test.sFld);
                        by = (byte)l;
                        try {
                            Test.iFld = (i4 % 1875672817);
                            Test.iFld = (10862 / iArr[i3 - 1]);
                            Test.iFld = (Test.iFld % iArr[(int)(d1 - 1)]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 70:
                        Test.sFld = (short)f1;
                        break;
                    case 86:
                        i4 >>= -3;
                        break;
                    case 82:
                        try {
                            Test.iFld = (i4 % iArr[(int)(d1)]);
                            i4 = (i4 / Test.iFld);
                            i4 = (i3 / -1231578300);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 92:
                        i5 += (int)34498L;
                        break;
                    case 99:
                        i5 -= Test.iFld;
                        break;
                    case 88:
                        iArr[(int)(f1)] = i5;
                        break;
                    case 69:
                        iArr[(int)(d1)] = (int)2.5560;
                        break;
                    case 104:
                        Test.instanceCount += -7249;
                    }
                }
            }
        } while (++i3 < 158);
        vMeth2_check_sum += by + l + i3 + Float.floatToIntBits(f1) + i4 + Double.doubleToLongBits(d1) + i5 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f, int i1, int i2) {

        double d=0.84311;
        byte by1=-66;
        int i6=-11, i7=-8490, i8=-93, i9=64379, i10=11, iArr1[]=new int[N];
        float f2=14.725F;

        FuzzerUtils.init(iArr1, 71);

        d += (--f);
        vMeth2(by1, -3L);
        i2 -= i1;
        i6 = 1;
        while (++i6 < 243) {
            iArr1[i6 - 1] = i1;
            i2 <<= (int)Test.instanceCount;
            for (i7 = i6; 7 > i7; ++i7) {
                for (i9 = 1; i9 < 1; i9++) {
                    i2 *= (int)Test.instanceCount;
                    Test.instanceCount -= (long)f2;
                    i2 = (int)d;
                    i1 >>= 13;
                    Test.iFld = i2;
                    Test.instanceCount += (17641 + (i9 * i9));
                    Test.iFld += (i9 | i6);
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + i2 + Double.doubleToLongBits(d) + by1 + i6 + i7 + i8 + i9 +
            i10 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        float f3=-2.401F;
        byte by2=117;
        int i11=-6, i12=214, i13=-13, i14=0, i15=-235, i16=29733, iArr2[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, 132);
        FuzzerUtils.init(bArr, true);

        vMeth1(f3, 51398, Test.iFld);
        Test.iFld += by2;
        for (i11 = 253; i11 > 3; i11--) {
            Test.iFld = Test.sFld;
            i12 += (-162 + (i11 * i11));
            switch ((((i11 >>> 1) % 3) * 5) + 31) {
            case 46:
                for (i13 = 1; i13 < 7; ++i13) {
                    f3 += (((i13 * Test.fFld) + i13) - Test.iFld);
                    i12 >>= -53619;
                    i15 = 1;
                    while (++i15 < 2) {
                        try {
                            i14 = (i11 / -676225391);
                            i14 = (i15 / i14);
                            i12 = (iArr2[i13 - 1] % iArr2[i15 + 1]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = Test.instanceCount;
                        bArr[i13] = Test.bFld;
                        i14 += (int)Test.instanceCount;
                        i12 *= (int)Test.instanceCount;
                    }
                }
            case 33:
                Test.instanceCount += i16;
            case 44:
                Test.instanceCount *= Test.iFld;
                break;
            default:
                Test.iFld = i13;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f3) + by2 + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=26697, i17=-11465, i18=-101, i19=7, i20=443, i21=-13;
        double d3=-1.49815;
        long lArr1[]=new long[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr1, 63307L);
        FuzzerUtils.init(bArr1, false);

        i = 1;
        do {
            vMeth();
            Test.iFld1 = (int)d3;
        } while (++i < 245);
        Test.iArrFld[(Test.iFld1 >>> 1) % N] += (int)Test.instanceCount;
        for (i17 = 220; 9 < i17; --i17) {
            for (i19 = 119; i19 > i17; i19--) {
                i21 = 1;
                while (++i21 < 1) {
                    if (Test.bFld) break;
                    i18 += (i21 - i);
                    Test.iArrFld[i19] *= (int)Test.instanceCount;
                    Test.iFld1 = Test.iFld;
                    Test.sFld += (short)13;
                    Test.dFld += i21;
                    if (Test.bFld) continue;
                    lArr1[i19] -= i17;
                    byFld &= (byte)i20;
                    switch ((i21 % 2) + 3) {
                    case 3:
                        i18 += i18;
                        d3 -= Test.iFld1;
                        bArr1[i19] = Test.bFld;
                        Test.iFld1 += (int)Test.instanceCount;
                        break;
                    case 4:
                        i20 += i;
                        Test.iArrFld[i19] -= i19;
                        break;
                    }
                }
                Test.dFld -= i;
                i18 -= (int)Test.instanceCount;
                switch (((i17 % 3) * 5) + 120) {
                case 122:
                    Test.fFld %= (i19 | 1);
                    Test.bFld = Test.bFld;
                    Test.iFld1 <<= i18;
                    Test.iFld2 += (int)(7L + (i19 * i19));
                    break;
                case 129:
                    Test.instanceCount += (120L + (i19 * i19));
                    break;
                case 133:
                    Test.instanceCount >>>= Test.instanceCount;
                default:
                    i18 = i19;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
