package tests.javafuzzer3024;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:53:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63593L;
    public static volatile short sFld=19168;
    public double dFld=-1.110085;
    public static long lFld=213774324L;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.89F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        float f1=97.413F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3352078179L);

        lArr[(i5 >>> 1) % N] = 3;
        Test.sFld = (short)i5;
        i5 = (int)f1;
        vMeth2_check_sum += i5 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i2, int i3, int i4) {

        int i6=84, i7=-150, i8=3, iArr[]=new int[N];
        float f2=-90.972F;
        boolean b=false;
        double d=2.87583;

        FuzzerUtils.init(iArr, 108);

        vMeth2(i2);
        i2 -= i6;
        f2 -= i4;
        for (i7 = 5; 166 > i7; i7++) {
            b = false;
            i4 -= (int)Test.instanceCount;
        }
        i4 *= i4;
        i3 = i7;
        d += Test.instanceCount;
        vMeth1_check_sum += i2 + i3 + i4 + i6 + Float.floatToIntBits(f2) + i7 + i8 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i10=48898, i11=4391, i12=-5, i13=0, i14=11, i15=-53104, i16=10, i17=-16092, iArr1[]=new int[N];
        float f3=-45.756F;
        double d1=1.40931;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -43463);

        vMeth1(i10, i10, -8);
        for (i11 = 20; i11 < 359; ++i11) {
            i12 |= i11;
            Test.instanceCount -= Test.instanceCount;
            for (i13 = 1; i13 < 5; ++i13) {
                switch (((i11 % 1) * 5) + 73) {
                case 74:
                    for (f3 = 1; f3 < 2; ++f3) {
                        i15 = -12;
                    }
                    for (i16 = 1; i16 < 2; i16++) {
                        i15 = i16;
                        d1 = 16225;
                        bArr[i11] = b1;
                        i12 = i17;
                        iArr1[i16 - 1] *= -54538;
                        iArr1[i13] |= i13;
                    }
                    break;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 + i17 +
            Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=153, i1=223, i18=9, i19=201, i20=65216, i21=236;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2991470547358237506L);

        for (i = 1; i < 366; ++i) {
            float f=-1.710F;
            Test.instanceCount ^= (long)((f++) - Test.instanceCount);
            vMeth();
            for (i18 = 3; i18 < 69; i18++) {
                dFld *= i19;
                Test.instanceCount *= i18;
                lArr1[i] -= Test.instanceCount;
                for (i20 = 2; i20 > 1; i20 -= 3) {
                    i1 &= i19;
                }
                dFld += i18;
            }
        }
        Test.instanceCount -= Test.lFld;
        i21 = (int)62.273F;
        Test.fArrFld[(i20 >>> 1) % N] = Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
