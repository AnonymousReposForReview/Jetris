package tests.javafuzzer107;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public int iFld=152;
    public boolean bFld=true;
    public static short sFld=5599;
    public static volatile float fFld=79.0F;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 19933);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i6) {

        boolean b=false;
        int i7=4, i8=-3;
        byte by1=-115;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -41993L);

        Test.instanceCount -= i6;
        if (b) {
            b = b;
            i6 -= i6;
            Test.iArrFld[(104 >>> 1) % N][(25530 >>> 1) % N] <<= i6;
        }
        for (i7 = 20; 332 > i7; ++i7) {
            Test.instanceCount = Test.instanceCount;
            lArr[i7] >>= i7;
            i8 += (i7 | Test.instanceCount);
            if (b) break;
            Test.instanceCount += (i7 | Test.sFld);
            by1 -= (byte)Test.instanceCount;
            i6 *= i8;
            Test.fFld += i7;
            i6 = i6;
        }
        long meth_res = i6 + (b ? 1 : 0) + i7 + i8 + by1 + FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(int i4, int i5) {

        int i9=51912, i10=-61941, i11=0;
        boolean bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 38030L);

        i4 += (int)((sMeth(i4) % (i5 | 1)) + Test.fFld);
        i5 <<= i4;
        for (i9 = 18; i9 < 385; ++i9) {
            Test.instanceCount <<= Test.instanceCount;
            Test.fFld *= 11542;
            bArr = bArr;
            lArr1[i9 - 1] = i5;
            Test.fFld = 10;
            i11 = 1;
            do {
                i4 -= i10;
                Test.iArrFld[i9][i11 + 1] -= (int)-1.39402;
                i5 += (i11 * i11);
                Test.instanceCount *= -1;
                i5 = (int)Test.instanceCount;
                i4 ^= (int)Test.instanceCount;
            } while (++i11 < 5);
        }
        long meth_res = i4 + i5 + i9 + i10 + i11 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(byte by, int i, int i1) {

        int i2=-20289, i3=62604, i12=-104, i13=-7, i14=-159, i15=51805, i16=3, i17=-2;
        float f=-2.417F;
        double d=-13.122169;

        for (i2 = 2; i2 < 305; i2++) {
            if (bFld) continue;
            by = (byte)(iMeth1(i, i) - i3);
            for (i12 = 1; i12 < 5; ++i12) {
                i14 = 1;
                while (++i14 < 2) {
                    iFld *= (int)Test.instanceCount;
                }
            }
            for (f = 1; f < 5; f++) {
                iFld = (int)Test.instanceCount;
                for (i16 = 1; i16 < 2; ++i16) {
                    d -= 1.19852;
                    i3 = (int)f;
                    Test.fFld += i17;
                    i15 -= by;
                }
                Test.instanceCount >>= i3;
                Test.iArrFld[(int)(f - 1)][i2] += Test.sFld;
            }
        }
        long meth_res = by + i + i1 + i2 + i3 + i12 + i13 + i14 + Float.floatToIntBits(f) + i15 + i16 + i17 +
            Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by2=33;
        double d1=0.95800, d2=94.40992, d3=1.97908, d4=0.108483;
        int i18=-45831, i19=61395, i20=-10, i21=-1, i22=16;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)28932);

        iFld <<= (iMeth(by2, iFld, iFld) + 24289);
        Test.fFld -= -1399;
        for (d1 = 18; d1 < 328; d1 += 3) {
            for (d2 = 4; d2 < 243; ++d2) {
                Test.instanceCount <<= -4;
                Test.iArrFld[(int)(d1 - 1)][(int)(d2 - 1)] /= (int)(i19 | 1);
            }
            switch ((((iFld >>> 1) % 2) * 5) + 27) {
            case 31:
                d3 = 1;
                while (++d3 < 243) {
                    for (i20 = 1; 1 > i20; i20++) {
                        switch ((i20 % 2) + 47) {
                        case 47:
                            i21 -= i21;
                            Test.fFld -= Test.instanceCount;
                            Test.fFld *= i19;
                            Test.fFld = i20;
                            break;
                        case 48:
                            Test.fFld = (float)d1;
                            Test.fFld = (float)d2;
                            i18 -= i19;
                            break;
                        default:
                            i18 <<= (int)Test.instanceCount;
                        }
                        i18 += (int)Test.instanceCount;
                        lArrFld = lArrFld;
                        d4 /= (i20 | 1);
                        Test.fFld = i19;
                        i19 -= 5;
                        Test.instanceCount *= i21;
                    }
                }
                Test.instanceCount = i20;
                sArr[(int)(d1 + 1)][(int)(d1)] += (short)i21;
                break;
            case 34:
                i19 -= (int)1.504F;
                i22 = 1;
                do {
                    iFld <<= i19;
                    Test.instanceCount += Test.sFld;
                } while (++i22 < 243);
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
