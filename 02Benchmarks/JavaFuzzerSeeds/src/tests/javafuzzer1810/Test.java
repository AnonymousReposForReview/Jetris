package tests.javafuzzer1810;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:34:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static boolean bFld=true;
    public static short sFld=12055;
    public double dFld=67.35576;
    public long lFld=1969438909L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 60386);
        FuzzerUtils.init(Test.lArrFld, -5039497039318294817L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i1=101, i2=-137, i3=-3332, i4=-64631, i5=181, i6=-201, iArr[]=new int[N];
        short s1=-16804;
        float f1=0.784F, fArr[]=new float[N];
        byte by=-65;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(lArr, 33657L);
        FuzzerUtils.init(fArr, 0.285F);

        for (i1 = 1; i1 < 310; i1++) {
            i3 = 1;
            do {
                i4 = 1;
                do {
                    iArr[(i2 >>> 1) % N] -= (int)1465285839143661549L;
                    lArr[i1 + 1] = s1;
                    i2 += i4;
                    i2 >>= -41374;
                } while (++i4 < 1);
                lArr[i1] -= -16213;
                switch (((i3 >>> 1) % 7) + 29) {
                case 29:
                    i2 = i5;
                    break;
                case 30:
                    if (Test.bFld) break;
                    switch ((i3 % 3) + 48) {
                    case 48:
                        iArr[i1 - 1] >>= i1;
                        i5 *= (int)f1;
                        iArr[i3] = i5;
                        break;
                    case 49:
                        i2 = (int)Test.instanceCount;
                    case 50:
                        i6 += by;
                        break;
                    default:
                        i5 <<= i2;
                    }
                case 31:
                    i5 = i6;
                    break;
                case 32:
                    fArr[i1] += i1;
                    break;
                case 33:
                    by -= (byte)64.577F;
                    break;
                case 34:
                    if (i2 != 0) {
                    }
                    break;
                case 35:
                    iArr[i3 - 1] -= i1;
                }
            } while (++i3 < 5);
        }
        long meth_res = i1 + i2 + i3 + i4 + s1 + i5 + Float.floatToIntBits(f1) + i6 + by + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(short s) {

        int i=-11, i7=21877, i8=55346;
        float f=0.559F;
        double d=1.85865;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1695577207L);

        i = 1;
        do {
            Test.instanceCount += (i + f);
            dMeth();
            switch (((i % 1) * 5) + 37) {
            case 39:
                if (Test.bFld) break;
                d -= i;
                for (i7 = 1; 6 > i7; ++i7) {
                    switch (((i % 4) * 5) + 91) {
                    case 109:
                        Test.iArrFld[i - 1] = i7;
                        switch (((i8 >>> 1) % 8) + 26) {
                        case 26:
                            if (Test.bFld) break;
                            i8 -= i;
                            i8 = (int)Test.instanceCount;
                        case 27:
                            s = (short)7;
                            if (i != 0) {
                                vMeth1_check_sum += s + i + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i7 +
                                    i8 + FuzzerUtils.checkSum(lArr1);
                                return;
                            }
                            break;
                        case 28:
                            i8 += -6;
                            break;
                        case 29:
                            lArr1[i] += 76;
                            break;
                        case 30:
                            Test.instanceCount += (((i7 * s) + i) - f);
                            break;
                        case 31:
                            f += f;
                            break;
                        case 32:
                            i8 += (i7 + i7);
                            break;
                        case 33:
                        }
                        break;
                    case 99:
                        i8 = (int)Test.instanceCount;
                        break;
                    case 111:
                        i8 += i;
                        break;
                    case 102:
                        i8 = -14943;
                        break;
                    }
                }
            }
        } while (++i < 299);
        vMeth1_check_sum += s + i + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i7 + i8 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {

        int i9=-45, i10=34847, i11=106, i12=-14, i13=170;
        float f2=0.373F, f3=1.202F;
        byte by1=-85;

        vMeth1(Test.sFld);
        i9 = 1;
        do {
            if (Test.bFld) break;
        } while (++i9 < 301);
        i10 = 1;
        while (++i10 < 347) {
            for (f2 = 1; f2 < 5; f2 += 3) {
                i11 -= by1;
                i11 -= i9;
                f3 -= 92;
                for (i12 = 1; i12 < 5; ++i12) {
                    if (Test.bFld) {
                        switch ((i10 % 6) + 97) {
                        case 97:
                            i11 *= i10;
                            break;
                        case 98:
                            i11 = i9;
                            Test.iArrFld[i12] = (int)Test.instanceCount;
                            break;
                        case 99:
                            Test.instanceCount += (((i12 * i13) + Test.sFld) - i10);
                            break;
                        case 100:
                            i11 -= i12;
                        case 101:
                            try {
                                Test.iArrFld[(int)(f2)] = (i11 % 115);
                                i11 = (195 / i9);
                                i11 = (16115 % Test.iArrFld[i12 + 1]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 102:
                            if (i11 != 0) {
                                vMeth_check_sum += i9 + i10 + Float.floatToIntBits(f2) + i11 + by1 +
                                    Float.floatToIntBits(f3) + i12 + i13;
                                return;
                            }
                            break;
                        }
                        vMeth_check_sum += i9 + i10 + Float.floatToIntBits(f2) + i11 + by1 + Float.floatToIntBits(f3) +
                            i12 + i13;
                        return;
                    } else if (false) {
                        f3 += i10;
                    } else if (Test.bFld) {
                        Test.instanceCount *= i13;
                    } else {
                        i13 = i10;
                    }
                }
            }
        }
        vMeth_check_sum += i9 + i10 + Float.floatToIntBits(f2) + i11 + by1 + Float.floatToIntBits(f3) + i12 + i13;
    }

    public void mainTest(String[] strArr1) {

        int i14=-22254, i15=-6, i16=54197, i17=-134, i18=-12, i19=-186, i20=237, i21=-9;
        float f4=1.238F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)9603);

        vMeth();
        Test.iArrFld[(i14 >>> 1) % N] >>= i14;
        i14 = i14;
        i15 = 1;
        do {
            sArr[i15 - 1] *= (short)i15;
            i14 = i14;
            i14 = i15;
            Test.instanceCount >>= 0;
            for (i16 = i15; i16 < 107; i16++) {
                Test.lArrFld = Test.lArrFld;
                dFld += dFld;
            }
            i17 -= (int)dFld;
            for (i18 = i15; i18 < 107; i18 += 3) {
                Test.instanceCount += (long)f4;
                for (i20 = 1; i20 < 1; i20++) {
                    i14 *= i16;
                    Test.instanceCount = Test.instanceCount;
                    i19 += (26813 + (i20 * i20));
                    Test.instanceCount = 31L;
                    fArrFld[i20 + 1] -= (float)dFld;
                    Test.iArrFld[i15 + 1] = (int)-7.303F;
                }
                Test.instanceCount += i16;
                i17 *= -22175;
                if (false) break;
                i14 = (int)Test.instanceCount;
                lFld -= Test.sFld;
                i14 += (i18 * i18);
            }
            Test.iArrFld[i15 - 1] -= (int)f4;
        } while (++i15 < 235);
        fArrFld[(-12429 >>> 1) % N] += i19;
        i21 *= -13951;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
