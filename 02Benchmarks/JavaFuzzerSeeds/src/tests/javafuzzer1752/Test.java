package tests.javafuzzer1752;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:00:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=541247793258971617L;
    public static long lFld=-3657136727258796915L;
    public static boolean bFld=false;
    public boolean bArrFld[]=new boolean[N];

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i10, int i11) {

        short s1=11085;

        s1 *= (short)-51.37F;
        long meth_res = i10 + i11 + s1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i9, long l, long l1) {

        double d=-24.23148;
        short s=-29956;
        int i12=-88, i13=9, i14=-237, i15=-10, i16=57505, i17=29342, i18=219, i19=-1;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 76.419F);

        d = ((-(s = (short)Test.lFld)) * (i9 * i9));
        i9 *= (int)(Test.instanceCount + ((-fMeth(i9, -7)) + i9));
        for (i12 = 193; i12 > 1; --i12) {
            l1 -= i12;
            for (i14 = 8; i14 > i12; i14 -= 2) {
                i15 -= i9;
                i15 >>>= i14;
                try {
                    i13 = (-18428 % i12);
                    i9 = (i9 / i9);
                    i15 = (63 % i14);
                } catch (ArithmeticException a_e) {}
                fArr[i12 + 1] += i14;
                Test.bFld = Test.bFld;
                for (i16 = 1; 1 > i16; i16++) {
                    i13 *= (int)Test.instanceCount;
                }
                for (i18 = 1; i18 < 1; i18++) {
                    i9 += (int)l;
                    Test.instanceCount = i14;
                }
            }
        }
        vMeth_check_sum += i9 + l + l1 + Double.doubleToLongBits(d) + s + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static boolean bMeth(int i6) {

        int i7=32, i8=-1624, i20=10, i21=-13383, i22=-4, i23=-15800;
        float f1=36.886F;
        byte by=125;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 8957707147269378838L);
        FuzzerUtils.init(sArr, (short)29800);

        for (i7 = 10; i7 < 317; i7 += 3) {
            vMeth(i6, Test.instanceCount, Test.instanceCount);
            switch (((i8 >>> 1) % 9) + 110) {
            case 110:
                switch ((i7 % 1) + 30) {
                case 30:
                    i8 = i6;
                    Test.instanceCount -= 55880;
                    if (i6 != 0) {
                        return ((int)(i6 + i7 + i8 + i20 + i21 + i22 + i23 + Float.floatToIntBits(f1) + by +
                            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr))) % 2 > 0;
                    }
                    lArr[i7 + 1] -= i8;
                    break;
                default:
                    lArr[i7 + 1] = i8;
                    i8 += i6;
                }
                i6 = (int)Test.lFld;
                for (i20 = 1; i20 < 15; i20++) {
                    for (i22 = 1; i22 < 2; ++i22) {
                        Test.lFld >>= Test.lFld;
                        i23 += i22;
                    }
                }
                break;
            case 111:
                i8 += (31205 + (i7 * i7));
                break;
            case 112:
                f1 = 79;
                break;
            case 113:
            case 114:
                i23 += i7;
            case 115:
                Test.lFld += (i7 * i23);
                break;
            case 116:
                i8 = (int)Test.instanceCount;
                break;
            case 117:
                i23 = by;
                break;
            case 118:
                by = (byte)Test.lFld;
                break;
            }
        }
        long meth_res = i6 + i7 + i8 + i20 + i21 + i22 + i23 + Float.floatToIntBits(f1) + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        float f=15.668F;
        int i=-7, i1=0, i2=-64, i3=-44, i4=164, i5=2319, i24=-202, i25=140, i26=-7, i27=177, iArr[]=new int[N];
        double d1=-26.49789;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -151);
        FuzzerUtils.init(byArr, (byte)-28);

        Test.instanceCount -= (long)f;
        i = 1;
        do {
            i1 += (i ^ i1);
            iArr[i - 1] += (int)((f++) - (--iArr[i]));
            for (i2 = 7; i2 < 216; i2++) {
                for (i4 = i; i4 < 2; ++i4) {
                    if (bMeth(i4)) break;
                    i5 += (i4 + f);
                    i5 >>= i;
                    d1 += i4;
                    byArr[i] >>= (byte)i3;
                    switch ((i2 % 1) + 104) {
                    case 104:
                        i1 >>= -167;
                        try {
                            iArr[i4 + 1] = (i3 % i4);
                            i5 = (-73 % i5);
                            iArr[i2 - 1] = (i2 % iArr[i4 - 1]);
                        } catch (ArithmeticException a_e) {}
                        i3 *= i;
                        i1 = i5;
                        break;
                    }
                    i3 = i2;
                }
                f /= ((long)(f) | 1);
                for (i24 = 1; 2 > i24; i24++) {
                    i5 += i2;
                    i5 >>= i2;
                }
                try {
                    iArr[i2 + 1] = (-75 / i4);
                    i3 = (i25 % -25);
                    i3 = (-27531512 / i2);
                } catch (ArithmeticException a_e) {}
                i1 = i4;
                i1 += (((i2 * i24) + i4) - i4);
                iArr[i - 1] = (int)f;
                i1 -= i1;
            }
            for (i26 = 216; i26 > 5; i26 -= 3) {
                f += (((i26 * i3) + Test.instanceCount) - i27);
                bArrFld[i - 1] = Test.bFld;
                i5 = (int)f;
            }
        } while ((i += 3) < 349);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
