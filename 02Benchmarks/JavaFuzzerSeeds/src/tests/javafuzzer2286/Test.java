package tests.javafuzzer2286;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:27:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=43896L;
    public float fFld=0.358F;
    public static short sFld=10919;
    public static byte byFld=-81;
    public double dFld=-35.42069;
    public static int iFld=-27474;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1304712531L);
        FuzzerUtils.init(Test.iArrFld, 32519);
        FuzzerUtils.init(Test.sArrFld, (short)-1686);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i18) {

        int i19=39969, i20=-207, i21=-38408, i22=12408;
        double d=1.52022;
        boolean b=true;

        i18 += (int)Test.instanceCount;
        i19 = 149;
        while (--i19 > 0) {
            Test.iArrFld[i19 + 1] -= i18;
            for (d = 1; d < 11; d++) {
                Test.instanceCount -= i19;
                Test.instanceCount >>>= i20;
                for (i21 = i19; i21 < 2; ++i21) {
                    if (i22 != 0) {
                    }
                    i18 += (29643 + (i21 * i21));
                    if (b) break;
                    Test.iArrFld[i21 + 1] -= i19;
                    switch (((i19 % 1) * 5) + 126) {
                    case 130:
                    default:
                        i18 = Test.sFld;
                        b = b;
                        Test.sArrFld[(int)(d)] >>= (short)i20;
                    }
                }
            }
        }
        long meth_res = i18 + i19 + Double.doubleToLongBits(d) + i20 + i21 + i22 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by1, int i11, int i12) {

        int i13=-189, i14=-13, i15=-3, i16=-189, i17=-5, i23=11, i24=-166, i25=-215;
        float f=-2.293F;

        for (i13 = 8; 141 > i13; i13++) {
            i14 += (int)Test.lArrFld[i13];
            for (i15 = 1; i15 < 12; i15 += 2) {
                i17 = 3;
                while (--i17 > 0) {
                    Test.instanceCount += (iMeth1(-217) - 9003194465970286241L);
                    Test.instanceCount >>= 10785;
                    Test.iFld = (int)-8513157159356677716L;
                    i14 *= i12;
                    i12 += Test.sFld;
                    i14 <<= (int)Test.instanceCount;
                }
                for (i23 = 1; i23 < 3; ++i23) {
                    Test.instanceCount = i11;
                }
                if (i25 != 0) {
                    vMeth_check_sum += by1 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i23 + i24 + i25 +
                        Float.floatToIntBits(f);
                    return;
                }
                Test.sFld += (short)(((i15 * i14) + i23) - i14);
                f -= Test.instanceCount;
            }
        }
        vMeth_check_sum += by1 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i23 + i24 + i25 + Float.floatToIntBits(f);
    }

    public int iMeth(byte by, long l, int i8) {

        int i9=-44993, i10=-221, i26=-62033, i27=-46071;
        long l1=-5L, l2=-1233L;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 68.925F);

        if (Test.bFld) {
            i9 = 257;
            do {
                Test.instanceCount += (i9 * i9);
                fArr[i9 - 1][i9 + 1] = ((i8 *= (int)Math.abs(l)) * (i8 * i8));
            } while ((i9 -= 3) > 0);
            for (l1 = 2; l1 < 227; ++l1) {
                if (Test.bFld) {
                    vMeth(by, i8, Test.iFld);
                } else {
                    i8 = Test.sFld;
                    for (i26 = 1; i26 < 7; i26++) {
                        fFld += i8;
                        l2 = 2;
                        while (--l2 > 0) {
                            switch ((((Test.iFld >>> 1) % 10) * 5) + 114) {
                            case 129:
                                Test.bFld = false;
                                Test.instanceCount += i9;
                                dFld = Test.instanceCount;
                                break;
                            case 134:
                                Test.iFld &= 13;
                                break;
                            case 160:
                                i27 <<= i8;
                                break;
                            case 145:
                                i27 = i10;
                                break;
                            case 133:
                                i10 <<= (int)l1;
                                break;
                            case 150:
                                fFld += l2;
                                break;
                            case 130:
                                fFld = i26;
                                break;
                            case 128:
                                i27 = i26;
                                break;
                            case 136:
                                if (Test.bFld) break;
                                break;
                            case 156:
                                i8 = Test.iFld;
                                break;
                            }
                        }
                    }
                }
            }
        } else if (false) {
            i10 = i9;
        } else {
            by = (byte)l2;
        }
        long meth_res = by + l + i8 + i9 + l1 + i10 + i26 + i27 + l2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=55495, i1=143, i2=74, i3=5, i4=-15, i5=-49580, i6=7, i7=-30362, i28=28647;

        for (i = 9; i < 196; i++) {
            for (i2 = i; i2 < 134; i2++) {
                fFld = (((-(Test.lArrFld[i2 + 1]++)) - (1.496F + i3)) - i2);
                fFld -= (fFld++);
                for (i4 = 1; 1 > i4; ++i4) {
                    i5 >>>= (Math.min(++i1, i5) + (-(-(-i5))));
                }
                if ((-Test.iArrFld[i]) == Test.iArrFld[i - 1]) {
                    try {
                        Test.iArrFld[i - 1] = (Test.iArrFld[i] / i2);
                        i1 = (i2 / i2);
                        i5 = (38957 % i5);
                    } catch (ArithmeticException a_e) {}
                    for (i6 = 1; i6 < 1; ++i6) {
                        fFld += (i1++);
                        try {
                            i7 = (0 % i3);
                            i3 = (i % Test.iArrFld[i2 - 1]);
                            Test.iArrFld[(i1 >>> 1) % N] = (-31717 % i4);
                        } catch (ArithmeticException a_e) {}
                        i7 -= (i3++);
                        Test.instanceCount += (-8196970984225973232L + (i6 * i6));
                        fFld = (Test.sFld++);
                        Test.instanceCount %= (Test.byFld | 1);
                        Test.lArrFld[i2 + 1] <<= i5;
                        i7 /= (int)(((long)(i1 - (i4 + (Test.instanceCount + dFld)))) | 1);
                        Test.instanceCount -= (i3++);
                    }
                    i7 *= i5;
                    i5 -= (int)(((fFld + i6) - i3) - (-i1));
                } else {
                    i1 = iMeth(Test.byFld, Test.instanceCount, Test.iFld);
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-60457);
                    i3 = (int)fFld;
                    i28 = 1;
                    do {
                        switch (((i % 5) * 5) + 17) {
                        case 26:
                            i1 += i1;
                            i5 ^= 9;
                            Test.iFld = Test.iFld;
                            break;
                        case 19:
                            i3 = (int)fFld;
                            break;
                        case 34:
                            Test.byFld = (byte)i;
                            break;
                        case 42:
                            try {
                                Test.iFld = (-20979 % i2);
                                i1 = (i4 / 7832);
                                i1 = (i4 % i2);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 31:
                            i3 = (int)Test.instanceCount;
                            break;
                        }
                    } while (++i28 < 1);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
