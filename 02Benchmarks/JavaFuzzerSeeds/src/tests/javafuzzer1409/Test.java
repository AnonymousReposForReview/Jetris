package tests.javafuzzer1409;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:54:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-98L;
    public static byte byFld=-19;
    public static boolean bFld=false;
    public static int iFld=-26480;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -149);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f) {

        int i6=11, i7=-32292, i8=241, i9=-114, i10=-42644, i11=-39801, i12=-252, iArr[]=new int[N];
        double d1=2.122439;
        short s=17950;

        FuzzerUtils.init(iArr, -12);

        i6 ^= i6;
        i6 -= (int)f;
        for (i7 = 8; 171 > i7; ++i7) {
            i9 = 10;
            do {
                i6 += (6 + (i9 * i9));
                switch (((i9 >>> 1) % 9) + 59) {
                case 59:
                    iArr[i9 - 1] -= i7;
                    break;
                case 60:
                    i10 = 1;
                    while (++i10 < 3) {
                        d1 = i9;
                    }
                    i8 += i9;
                    for (i11 = 1; i11 < 3; i11 += 2) {
                        d1 %= 83.488F;
                        i8 += (((i11 * Test.instanceCount) + Test.byFld) - i7);
                        i8 = (int)Test.instanceCount;
                        i12 += i11;
                    }
                    break;
                case 61:
                    i12 &= s;
                    break;
                case 62:
                    i8 += (i9 * i8);
                    break;
                case 63:
                    Test.bFld = Test.bFld;
                case 64:
                    i12 = i9;
                    break;
                case 65:
                    i12 = (int)Test.instanceCount;
                    break;
                case 66:
                    i12 += (int)Test.instanceCount;
                    break;
                case 67:
                    Test.instanceCount = Test.instanceCount;
                    break;
                }
            } while ((i9 -= 3) > 0);
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + s
            + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i, int i1) {

        double d=-50.114566;
        int i2=36940, i3=-10, i4=8174, i5=-88, iArr1[]=new int[N];
        float f1=38.501F;

        FuzzerUtils.init(iArr1, 63195);

        for (d = 11; 284 > d; d++) {
            for (i3 = (int)(d); i3 < 6; i3++) {
                Test.instanceCount = Math.max(i1++, i3);
            }
            i5 = 1;
            do {
                i2 *= iMeth(f1);
                if (Test.bFld) {
                    Test.instanceCount ^= i4;
                    Test.instanceCount = Test.instanceCount;
                    i1 += (-55943 + (i5 * i5));
                    i2 += (i5 + Test.instanceCount);
                }
                iArr1[i5] -= 61;
                i1 += -27;
                i2 += (i5 ^ i2);
                Test.instanceCount += (-8 + (i5 * i5));
                i *= (int)-1L;
            } while (++i5 < 6);
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vSmallMeth(long l) {

        boolean b=false;
        int i13=6;

        b = bMeth(i13, i13);
        i13 <<= (int)l;
        vSmallMeth_check_sum += l + (b ? 1 : 0) + i13;
    }

    public void mainTest(String[] strArr1) {

        int i14=-55, i15=-35593, i16=-107, i17=-3, i18=62;
        double d2=-2.25546;
        float f2=-92.427F, f3=1.728F;
        short s1=-28818;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -18922L);

        try {
            for (int smallinvoc=0; smallinvoc<401; smallinvoc++) vSmallMeth(Test.instanceCount);
            for (i14 = 232; i14 > 12; i14--) {
                i16 = 1;
                while (++i16 < 114) {
                    Test.iFld += i16;
                    d2 = -144;
                }
                i15 += -158;
                for (i17 = 1; i17 < 114; ++i17) {
                    f2 = 1;
                    while (++f2 < 2) {
                        Test.iArrFld[(Test.iFld >>> 1) % N][i14 - 1] *= i14;
                        Test.iArrFld[i17][(int)(f2)] = i18;
                        if (true) break;
                        Test.iArrFld[i17 + 1][(int)(f2)] -= i17;
                        switch (((i18 >>> 1) % 10) + 12) {
                        case 12:
                            i15 += (43828 + (f2 * f2));
                            Test.iArrFld[i17][(int)(f2 + 1)] += i18;
                            Test.instanceCount &= i15;
                        case 13:
                            Test.iFld = (int)-109L;
                            break;
                        case 14:
                            Test.iArrFld[i17 - 1][(int)(f2)] >>= (int)Test.instanceCount;
                            i18 -= i17;
                            i15 += (int)-569270887L;
                            i18 += (int)(f2 * s1);
                            break;
                        case 15:
                            Test.iFld <<= i18;
                            switch ((int)((f2 % 1) + 41)) {
                            case 41:
                                Test.instanceCount = (long)d2;
                                i15 >>>= -27858;
                                f3 = Test.instanceCount;
                                break;
                            }
                            Test.instanceCount = i15;
                        case 16:
                            s1 *= (short)1;
                            Test.iArrFld[i17][(int)(f2 - 1)] = i18;
                        case 17:
                            i18 += (int)-5L;
                            break;
                        case 18:
                            Test.bFld = true;
                            break;
                        case 19:
                            i18 *= (int)Test.instanceCount;
                            break;
                        case 20:
                            lArr[i17 - 1] += -38241;
                            break;
                        case 21:
                            i18 += 12;
                            break;
                        }
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test.iFld = i18;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth bMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
