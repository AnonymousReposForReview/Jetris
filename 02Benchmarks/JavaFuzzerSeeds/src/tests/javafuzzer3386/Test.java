package tests.javafuzzer3386;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:13:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-360473325L;
    public static volatile float fFld=52.757F;
    public static short sFld=20408;
    public boolean bFld=false;
    public static volatile short sArrFld[]=new short[N];
    public static volatile double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)17882);
        FuzzerUtils.init(Test.dArrFld, 63.60853);
        FuzzerUtils.init(Test.lArrFld, 232L);
        FuzzerUtils.init(Test.fArrFld, 2.49F);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5) {

        int i6=1, i7=8, i8=231, i9=-239, i10=-1, i11=12, i12=-44267, iArr[]=new int[N];
        boolean b=false;
        double d1=-55.89616;

        FuzzerUtils.init(iArr, -46604);

        for (i6 = 17; i6 < 355; ++i6) {
            i8 = 1;
            while (++i8 < 5) {
                for (i9 = i6; i9 < 1; ++i9) {
                    iArr[(i10 >>> 1) % N] = (int)Test.instanceCount;
                    i7 -= i8;
                    if (b) break;
                    Test.fFld += (i9 - Test.instanceCount);
                    i7 += (i9 * i9);
                    d1 = Test.instanceCount;
                }
                i10 += (int)-21.782F;
                for (i11 = 1; i11 < 1; i11++) {
                    i7 += i11;
                    i12 += (((i11 * i11) + i7) - i11);
                    i7 = (int)Test.instanceCount;
                    Test.fFld = i12;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i11 + i12 +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(double d) {

        int i3=38, i4=2, i13=187, i14=-28604, i15=193, i16=182;
        byte by=35;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6L);

        for (i3 = 194; i3 > 2; i3 -= 2) {
            vMeth(i3);
            lArr[i3 - 1] *= i3;
            by += (byte)(i3 * i3);
            i4 >>= (int)Test.instanceCount;
        }
        i4 -= (int)Test.instanceCount;
        for (i13 = 15; i13 < 331; i13++) {
            for (i15 = 1; i15 < 5; ++i15) {
                i14 = i14;
            }
            Test.sArrFld[i13 + 1] = (short)i16;
            Test.instanceCount = i13;
            i14 = i15;
            if (b1) continue;
            b1 = false;
            i14 = 39202;
        }
        long meth_res = Double.doubleToLongBits(d) + i3 + i4 + by + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, long l, int i2) {

        long l1=-10L, l2=-46L;
        int i17=2, i18=-56107, i19=10, i20=-162, iArr1[]=new int[N];
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 170);
        FuzzerUtils.init(fArr, 2.984F);

        Test.fFld = (((++Test.fFld) + lMeth(41.123184)) + -16254);
        for (l1 = 1; l1 < 285; ++l1) {
            byte by1=59;
            i2 -= (int)Test.fFld;
            by1 >>>= (byte)58;
        }
        for (i18 = 6; i18 < 159; i18++) {
            switch ((i18 % 6) + 50) {
            case 50:
                i20 = 10;
                while (--i20 > 0) {
                    iArr1[i20 - 1] += -8;
                    fArr = fArr;
                    iArr1[i18] -= i19;
                    Test.fFld *= 11L;
                    i19 = Test.sFld;
                    b2 = b2;
                    Test.instanceCount = (long)Test.fFld;
                    Test.fFld += (i20 * i20);
                }
                break;
            case 51:
                i1 *= i17;
                break;
            case 52:
                fArr[i18 + 1] += i1;
                break;
            case 53:
                l += (i18 * i18);
                break;
            case 54:
                Test.dArrFld[i18] -= i2;
                break;
            case 55:
                l2 = i19;
                break;
            }
        }
        long meth_res = i1 + l + i2 + l1 + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) + l2 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=165, i21=26173, i22=59137, i23=2, i24=31347, i25=60651, i26=166, i27=-11, i28=82, i29=-48518, iArr2[]=new
            int[N];
        double d2=76.57177;
        byte by2=-64;
        short s=-27933;

        FuzzerUtils.init(iArr2, -11750);

        i <<= iMeth(i, Test.instanceCount, i);
        for (i21 = 9; i21 < 218; ++i21) {
            Test.lArrFld[(i21 >>> 1) % N] = i21;
            i23 = 1;
            do {
                Test.instanceCount >>= i21;
            } while (++i23 < 120);
            i22 = i21;
            if (true) break;
            for (i24 = 1; 120 > i24; ++i24) {
                i25 = (int)Test.instanceCount;
                for (i26 = 1; 2 > i26; ++i26) {
                    Test.instanceCount += (((i26 * i22) + i27) - i26);
                    d2 -= -11;
                    Test.instanceCount *= i27;
                    iArr2[(i21 >>> 1) % N] = by2;
                    iArr2[i24] = (int)86L;
                    iArr2[i21] -= i;
                    d2 += s;
                }
                i25 += (((i24 * i21) + i25) - i26);
            }
            try {
                iArrFld[i21] = (iArrFld[i21 + 1] / -13968);
                i = (i22 % i26);
                i25 = (i26 % iArr2[i21]);
            } catch (ArithmeticException a_e) {}
            Test.fArrFld[i21 - 1] *= -77L;
            by2 += (byte)(i21 - i27);
            i25 -= -217;
        }
        if (bFld) {
            iArr2[(-182 >>> 1) % N] = i27;
        } else {
            d2 = i26;
            i25 = i25;
            for (i28 = 8; i28 < 379; ++i28) {
                i = 16205;
                i27 += i28;
                i22 += i28;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
