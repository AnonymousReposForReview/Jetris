package tests.javafuzzer1483;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:18:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static byte byFld=-66;
    public static boolean bFld=false;
    public static volatile float fFld=65.463F;
    public volatile double dFld=-1.117220;
    public static long lArrFld[][]=new long[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3775546132L);
        FuzzerUtils.init(Test.iArrFld, 157);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(boolean b, long l1) {

        float f=-90.336F, fArr[]=new float[N];
        int i2=244, i3=-4, i4=-7, i5=11, i6=9, i7=-53294, iArr[]=new int[N];
        double d2=116.91493;

        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(fArr, -56.418F);

        Test.byFld *= (byte)f;
        i2 += (int)Test.instanceCount;
        for (i3 = 21; i3 < 339; i3++) {
            b = b;
            i4 ^= (int)6446025919885127865L;
            f *= (float)d2;
            try {
                i4 = (i3 / -1656447396);
                i4 = (iArr[i3] % -51);
                iArr[i3] = (iArr[i3 + 1] % i3);
            } catch (ArithmeticException a_e) {}
            Test.byFld = (byte)i3;
            switch ((((i2 >>> 1) % 1) * 5) + 104) {
            case 109:
                i5 = 1;
                do {
                    for (i6 = 1; i6 < 1; i6++) {
                        i2 -= i5;
                        i7 >>= i5;
                        if (i4 != 0) {
                        }
                        fArr[i6 - 1] /= (i6 | 1);
                    }
                } while (++i5 < 5);
                break;
            }
        }
        long meth_res = (b ? 1 : 0) + l1 + Float.floatToIntBits(f) + i2 + i3 + i4 + Double.doubleToLongBits(d2) + i5 +
            i6 + i7 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, long l) {

        double d3=1.118279;
        int i8=-34597, i9=-11, i10=-117, i11=-217, i12=-3, iArr1[]=new int[N];
        float f1=33.251F;

        FuzzerUtils.init(iArr1, 96);

        Test.lArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N] = iMeth1(Test.bFld, Test.instanceCount);
        Test.fFld = i1;
        i1 += (int)Test.instanceCount;
        for (d3 = 131; d3 > 4; --d3) {
            iArr1[(int)(d3 + 1)] = (int)Test.instanceCount;
            iArr1[(int)(d3)] = (int)l;
        }
        i8 *= (int)Test.fFld;
        i9 = 1;
        while (++i9 < 326) {
            i10 = 1;
            do {
                for (i11 = 1; i11 < 1; i11 += 2) {
                    l <<= i10;
                    Test.fFld = f1;
                    i12 -= (int)l;
                }
                Test.lArrFld = Test.lArrFld;
                i12 -= i9;
            } while (++i10 < 5);
        }
        long meth_res = i1 + l + Double.doubleToLongBits(d3) + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, double d1, byte by) {

        int i=44, i13=-27, i14=-59501, i15=-139, i16=-24768, i17=51542;
        float f2=82.998F;
        short s=-30360;

        Test.instanceCount >>>= (Math.max(i, iMeth(i, Test.instanceCount)) + -9);
        i = i13;
        for (i14 = 4; 227 > i14; ++i14) {
            i16 = 1;
            while (++i16 < 7) {
                Test.fFld = i16;
                Test.instanceCount += Test.instanceCount;
                Test.lArrFld[i14] = Test.lArrFld[i16 + 1];
                if (Test.bFld) continue;
                Test.byFld = (byte)Test.fFld;
                i15 += (9 + (i16 * i16));
                Test.instanceCount += (((i16 * i16) + i16) - i16);
                Test.fFld = i13;
            }
            for (f2 = 1; 7 > f2; f2++) {
                i *= s;
                Test.instanceCount += i;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + by + i + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f2) + i17 + s;
    }

    public void mainTest(String[] strArr1) {

        int i18=-14427, i19=3, i20=2, i21=10, i22=-2, i23=-9, i24=22146, i25=-200, iArr2[]=new int[N];
        float fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr1, -30.1005F);
        FuzzerUtils.init(dArr, 0.40487);
        FuzzerUtils.init(iArr2, -8729);

        vMeth(dFld, dFld, Test.byFld);
        for (i18 = 6; i18 < 388; i18++) {
            Test.instanceCount += (i18 * i18);
            Test.iArrFld[i18 - 1] = i19;
            for (i20 = 2; 66 > i20; ++i20) {
                i21 += i19;
                Test.instanceCount += Test.instanceCount;
                i19 = i20;
                for (i22 = 2; i22 > 1; i22 -= 2) {
                    i21 *= i18;
                    i19 *= Test.byFld;
                    Test.instanceCount += (7 + (i22 * i22));
                    if (Test.bFld) break;
                    Test.instanceCount -= Test.instanceCount;
                }
                Test.instanceCount *= i19;
                fArr1 = fArr1;
            }
            i21 += (((i18 * Test.byFld) + i23) - Test.byFld);
            i19 = (int)Test.instanceCount;
            i21 = i22;
            dArr[i18 - 1] = Test.fFld;
            i19 += i18;
        }
        i24 = 1;
        do {
            i25 = 1;
            while (++i25 < 123) {
                i21 += i20;
                Test.iArrFld[i24] ^= i25;
                dFld *= i25;
                i21 = -56;
                Test.fFld *= i22;
                Test.instanceCount *= i20;
                try {
                    i21 = (i21 % -1620787139);
                    i21 = (-210 / i19);
                    iArr2[i25] = (Test.iArrFld[i24] / i19);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i24 < 204);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
