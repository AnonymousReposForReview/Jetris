package tests.javafuzzer1800;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:24:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-199L;
    public static float fFld=76.756F;
    public static double dFld=0.62144;
    public int iFld=8;
    public short sFld=-3683;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i7, long l2) {

        long l3=11L;
        int i8=0;
        byte by=41;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -2.672F);

        for (l3 = 3; 244 > l3; l3++) {
            fArr[(int)(l3 + 1)][(int)(l3)] += i8;
            i8 = i7;
            if (false) break;
            i8 = by;
        }
        Test.fFld *= Test.instanceCount;
        i8 = i7;
        Test.dFld *= Test.fFld;
        long meth_res = i7 + l2 + l3 + i8 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i2, float f1) {

        int i3=25306, i4=-11619, i5=-54425, i6=60423, i9=199, i10=-4456, i11=140, iArr[]=new int[N];
        long l1=36447L;
        double d=1.41850;
        boolean b=true;

        FuzzerUtils.init(iArr, 25905);

        for (i3 = 3; i3 < 392; i3 += 3) {
            i2 -= (int)(((i3 - f1) + (i3 - Test.instanceCount)) * ((l1 + i4) + (d++)));
            for (i5 = 1; i5 < 12; i5++) {
                b = bMeth(3, Test.instanceCount);
                for (i9 = i3; i9 < 2; ++i9) {
                    try {
                        i6 = (i6 % i6);
                        iArr[i5 - 1] = (-17250 % iArr[i3]);
                        i4 = (iArr[i3] % 56816);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount *= -12;
                    i6 ^= i11;
                    try {
                        i6 = (-44224 % i9);
                        i2 = (iArr[i3 - 1] / -10);
                        i4 = (-188 % i9);
                    } catch (ArithmeticException a_e) {}
                    l1 -= 12L;
                    l1 &= l1;
                    i11 &= i4;
                    Test.fFld += -2;
                    Test.lArrFld[i5] /= (i10 | 1);
                }
                Test.fFld += 54462;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i3 + i4 + l1 + Double.doubleToLongBits(d) + i5 + i6 + (b ? 1 :
            0) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, long l) {

        int i=3, i1=-11, i12=7, i13=5, i14=59216, i15=-42319;

        for (i = 8; i < 291; ++i) {
            i1 = iMeth(i1, 0.791F);
            Test.instanceCount = i1;
            i1 = 60366;
            Test.instanceCount *= i;
            for (i12 = 1; i12 < 6; ++i12) {
                Test.instanceCount = i13;
                Test.fFld -= i12;
            }
            if (false) break;
            Test.fFld += i;
            if (i != 0) {
                vMeth_check_sum += Float.floatToIntBits(f) + l + i + i1 + i12 + i13 + i14 + i15;
                return;
            }
            for (i14 = 6; i14 > i; --i14) {
                Test.fFld *= i1;
                i15 += i15;
                i13 -= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i + i1 + i12 + i13 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        byte by1=56;

        vMeth(-1.501F, Test.instanceCount);
        Test.lArrFld[(iFld >>> 1) % N] -= (long)Test.dFld;
        sFld = (short)Test.fFld;
        iFld = iFld;
        by1 += (byte)138;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
