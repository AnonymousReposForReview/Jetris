package tests.javafuzzer1764;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:08:01 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2L;
    public static int iFld=28724;
    public static byte byFld=-28;
    public int iFld1=-120;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61614);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9, int i10) {

        int i11=-3256, i12=-50, i13=-13, i14=0, i15=205, i16=19259;
        float f1=-19.667F;
        short s=-5775;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.89442);

        for (i11 = 5; i11 < 317; i11++) {
            i9 += (((i11 * Test.instanceCount) + f1) - i10);
            i10 += (((i11 * s) + i10) - Test.iFld);
            dArr[i11] += -10;
            switch (((i11 % 1) * 5) + 7) {
            case 8:
                i12 += (i11 * i11);
                break;
            default:
                for (i13 = 5; i13 > 1; i13 -= 3) {
                    i9 *= 2;
                    for (i15 = i13; i15 < 5; ++i15) {
                        Test.instanceCount = Test.instanceCount;
                        i9 -= (int)Test.instanceCount;
                        Test.iArrFld[i15] -= i12;
                    }
                    i14 = (int)Test.instanceCount;
                    Test.instanceCount += i9;
                }
                Test.instanceCount = Test.instanceCount;
            }
        }
        vMeth2_check_sum += i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + s + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(long l1, int i8, long l2) {

        int i17=-54374, i18=-182, i19=1, i20=-7;
        float f2=1.712F;
        boolean b=true, b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 63L);

        vMeth2(i8, 40086);
        Test.iFld = -7;
        Test.iFld = i8;
        i8 -= 42910;
        i8 = 5;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)45);
        i17 = 1;
        do {
            for (f2 = 1; f2 < 9; ++f2) {
                Test.iArrFld[i17 - 1] *= Test.byFld;
            }
            for (i19 = 1; i19 < 9; i19++) {
                float f3=-102.306F;
                i18 *= (int)l1;
                switch (((i19 % 7) * 5) + 29) {
                case 35:
                    if (b) break;
                case 48:
                    lArr[i19] = l2;
                    l1 = i17;
                    break;
                case 47:
                    i18 += (-134 + (i19 * i19));
                case 41:
                    f3 += i19;
                    break;
                case 30:
                case 57:
                    i8 += (i19 | Test.instanceCount);
                case 64:
                    if (b1) continue;
                    break;
                default:
                    if (b1) continue;
                }
            }
        } while (++i17 < 174);
        vMeth1_check_sum += l1 + i8 + l2 + i17 + Float.floatToIntBits(f2) + i18 + i19 + i20 + (b ? 1 : 0) + (b1 ? 1 :
            0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, int i4, int i5) {

        int i6=-8, i7=38623, i21=119;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i6 = 12; i6 < 290; i6++) {
            if (bArr[i6]) break;
            vMeth1(l, i6, Test.instanceCount);
            i4 += i21;
            i7 -= i5;
            i4 = -244;
            Test.instanceCount += i7;
            Test.instanceCount -= i7;
            Test.iFld = i21;
        }
        vMeth_check_sum += l + i4 + i5 + i6 + i7 + i21 + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-61, i1=-17168, i2=167, i3=10, i22=-89, i23=44148, i24=-205, i25=-38;
        float f=-53.0F, fArr[]=new float[N];
        double d=-19.89695, dArr1[]=new double[N];
        boolean b2=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr1, 40.10779);
        FuzzerUtils.init(byArr, (byte)20);
        FuzzerUtils.init(fArr, -61.514F);

        for (i = 209; i > 10; --i) {
            f = Math.min(Math.max(lArrFld[i], Long.reverseBytes(Test.instanceCount)), Test.instanceCount++);
            for (i2 = 6; i2 < 126; ++i2) {
                vMeth(Test.instanceCount, i1, Test.iFld);
                i3 += i2;
                Test.iArrFld = Test.iArrFld;
                f -= i3;
                for (i22 = 1; i22 < 2; ++i22) {
                    Test.iArrFld[i - 1] = (int)Test.instanceCount;
                    f -= (float)d;
                    Test.iFld = (int)f;
                    dArr1[i22] = f;
                    switch (((i22 % 2) * 5) + 13) {
                    case 19:
                        Test.instanceCount = i23;
                        Test.iFld += (int)d;
                        Test.iFld |= i1;
                        break;
                    case 23:
                        f = (float)d;
                        break;
                    }
                    switch (((i22 % 8) * 5) + 49) {
                    case 87:
                        switch ((i2 % 9) + 88) {
                        case 88:
                            i23 *= i2;
                            f = f;
                            break;
                        case 89:
                            Test.instanceCount += (long)(-36.697F + (i22 * i22));
                            if (b2) break;
                            break;
                        case 90:
                            i23 += (int)Test.instanceCount;
                            i1 = (int)-6313L;
                        case 91:
                            if (b2) {
                                i1 = i2;
                            } else if (b2) {
                                Test.iFld += Test.iFld;
                                lArrFld[i2] = i3;
                            } else if (b2) {
                            }
                            i1 += i22;
                            break;
                        case 92:
                            i1 = i3;
                            break;
                        case 93:
                            iFld1 = (int)Test.instanceCount;
                            break;
                        case 94:
                            i3 = (int)-61L;
                            break;
                        case 95:
                            if (false) break;
                            break;
                        case 96:
                            byArr[i - 1] = (byte)i2;
                            break;
                        default:
                            b2 = b2;
                        }
                        break;
                    case 81:
                        iFld1 = iFld1;
                        break;
                    case 70:
                        try {
                            i24 = (Test.iArrFld[i + 1] / -41070);
                            i3 = (1216570066 / i23);
                            Test.iArrFld[i] = (Test.iArrFld[i2] % -35566);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 64:
                        fArr[i + 1] = i23;
                    case 50:
                        i23 = -4;
                        break;
                    case 88:
                        Test.instanceCount += (((i22 * Test.iFld) + iFld1) - i25);
                        break;
                    case 62:
                        i24 *= (int)Test.instanceCount;
                    case 89:
                        d = f;
                        break;
                    default:
                        lArrFld[i] *= -1;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
