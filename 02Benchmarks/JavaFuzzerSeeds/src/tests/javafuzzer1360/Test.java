package tests.javafuzzer1360;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:42:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static float fFld=-79.473F;
    public static double dFld=54.38887;
    public boolean bFld=false;
    public byte byFld=-33;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 108);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2) {

        int i3=150, i4=-230, i5=-18, i6=247, iArr1[]=new int[N];
        byte by=-90;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 36671);
        FuzzerUtils.init(lArr, 3904959702L);

        i3 = 1;
        do {
            for (i4 = 1; i4 < 5; i4++) {
                try {
                    iArr1[i4 - 1] = (i3 / -160);
                    i5 = (i2 % i5);
                    i5 = (0 % i4);
                } catch (ArithmeticException a_e) {}
                i5 ^= (int)Test.instanceCount;
                iArr1[i4 + 1] |= (int)-2425369182L;
                by = (byte)Test.fFld;
                Test.fFld -= i4;
                i5 >>= (int)-793633849850839984L;
                switch (((i3 % 6) * 5) + 107) {
                case 113:
                    i6 = 1;
                    do {
                        i2 = 37;
                        i5 = i2;
                        Test.instanceCount += (i6 + Test.instanceCount);
                    } while (++i6 < 2);
                    iArr1[i3] = (int)Test.instanceCount;
                    i5 &= i5;
                    break;
                case 126:
                    lArr[i3] *= by;
                case 127:
                    i5 += (((i4 * Test.instanceCount) + Test.instanceCount) - i3);
                    break;
                case 114:
                    i5 += i6;
                    break;
                case 125:
                    i2 = i4;
                    break;
                case 120:
                    i2 += 50113;
                    break;
                }
            }
        } while (++i3 < 371);
        vMeth2_check_sum += i2 + i3 + i4 + i5 + by + i6 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i7=-5680, i8=-194, i9=5, i10=13, i11=34398, i12=0, iArr2[]=new int[N];
        double d=-33.108762;

        FuzzerUtils.init(iArr2, -175);

        vMeth2(i7);
        Test.instanceCount += (long)2.286F;
        for (i8 = 11; i8 < 289; ++i8) {
            i9 = i7;
            i9 += (int)-1.98273;
            i9 += (int)-8019025348028666668L;
            iArr2[i8] -= (int)d;
            Test.fFld = i7;
            i9 -= i9;
            for (i10 = i8; i10 < 6; i10++) {
                if (i12 != 0) {
                    vMeth1_check_sum += i7 + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 + i12 +
                        FuzzerUtils.checkSum(iArr2);
                    return;
                }
                d -= i12;
                Test.fFld = i12;
                iArr2[i8] -= i12;
                d = i9;
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l, int i1, boolean b) {

        int i13=-17016, i14=0, i15=59917, i16=224, i17=-4, i18=160;
        float f1=-92.99F;
        short s=-2514;

        Test.fFld -= i1;
        vMeth1();
        i13 = 345;
        do {
            Test.iArrFld[i13] = i1;
            i14 = 5;
            while ((i14 -= 3) > 0) {
                l -= Test.instanceCount;
            }
            i1 += i14;
            for (i15 = 5; i15 > 1; --i15) {
                if (b) break;
                i16 = (int)Test.instanceCount;
                for (i17 = 2; i17 > 1; i17--) {
                    i18 += (((i17 * f1) + s) - l);
                    i16 *= i17;
                    l = l;
                    Test.dFld = -31306;
                }
            }
        } while (--i13 > 0);
        vMeth_check_sum += l + i1 + (b ? 1 : 0) + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f1) + s;
    }

    public void mainTest(String[] strArr1) {

        float f=28.487F;
        int i=15310, i19=-35341, i20=-8702, i21=-11, i22=-10, i23=-242, i24=52757, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 19472);

        Test.instanceCount &= (long)(((f * i) + (-(i - i))) - ((Test.instanceCount + i) * (++iArr[(i >>> 1) % N])));
        vMeth(-1L, i, bFld);
        for (i19 = 3; i19 < 228; ++i19) {
            i20 += (int)Test.instanceCount;
        }
        for (i21 = 21; i21 < 340; ++i21) {
            Test.fFld += i21;
            for (i23 = 79; i23 > i21; i23 -= 2) {
                i -= byFld;
            }
            if (bFld) {
                Test.iArrFld = iArr;
                i20 += i21;
            } else {
                i22 += (i21 - i23);
                Test.iArrFld[i21] = (int)178L;
            }
        }
        iArr[(i19 >>> 1) % N] *= (int)514173401L;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
