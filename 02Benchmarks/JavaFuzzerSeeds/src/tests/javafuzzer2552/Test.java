package tests.javafuzzer2552;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:28:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=53L;
    public static int iFld=-9;
    public static float fFld=-120.358F;
    public boolean bFld=false;
    public static byte byFld=-14;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, 119);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i1=0, i2=-11, i3=44073, i4=-107, iArr[]=new int[N];
        float f1=0.685F;
        double d1=0.30888;

        FuzzerUtils.init(iArr, -7);

        for (i1 = 10; i1 < 385; ++i1) {
            Test.iFld += (((i1 * Test.instanceCount) + i2) - f1);
            for (i3 = 5; i1 < i3; i3--) {
                i4 = (int)f1;
                i2 -= (int)d1;
                if (true) {
                    if (i2 != 0) {
                        vMeth2_check_sum += i1 + i2 + Float.floatToIntBits(f1) + i3 + i4 + Double.doubleToLongBits(d1)
                            + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                } else {
                    if (i4 != 0) {
                        vMeth2_check_sum += i1 + i2 + Float.floatToIntBits(f1) + i3 + i4 + Double.doubleToLongBits(d1)
                            + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    try {
                        i2 = (i3 / -27);
                        Test.iFld = (-20790 % iArr[i1 - 1]);
                        i4 = (iArr[i3 - 1] % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    i2 *= i1;
                }
                i4 = i3;
                i4 += i2;
                i2 >>>= i1;
                f1 -= Test.iFld;
            }
        }
        Test.iFld <<= i4;
        vMeth2_check_sum += i1 + i2 + Float.floatToIntBits(f1) + i3 + i4 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i) {

        long l1=13889L, lArr[]=new long[N];
        int i5=40575, i6=-24852, i7=25263, iArr1[]=new int[N];
        byte by=-86;

        FuzzerUtils.init(lArr, 107L);
        FuzzerUtils.init(iArr1, 3);

        vMeth2();
        lArr[(i >>> 1) % N] = Test.iFld;
        for (l1 = 11; 302 > l1; l1++) {
            i5 += Test.iFld;
            i = -40911;
            Test.iFld = Test.iFld;
        }
        Test.bArrFld = Test.bArrFld;
        i6 = 1;
        do {
            iArr1[i6] *= Test.iFld;
            Test.fFld -= 4;
            by -= (byte)i5;
            i7 = 1;
            do {
                i += i7;
                Test.fFld = l1;
                iArr1[i7 - 1] += 130;
            } while (++i7 < 8);
        } while (++i6 < 198);
        vMeth1_check_sum += l + i + l1 + i5 + i6 + by + i7 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth() {

        float f=92.541F;
        double d=-69.120609;
        int i8=1, i9=-109;

        Test.iFld = (int)(f - (Test.iFld = (int)(d - Test.instanceCount)));
        Test.iFld += (int)Test.instanceCount;
        vMeth1(Test.instanceCount, Test.iFld);
        Test.iArrFld[(Test.iFld >>> 1) % N] = (int)d;
        Test.iArrFld[(26565 >>> 1) % N] -= (int)-2574514539L;
        Test.instanceCount += Test.iFld;
        f += 4645196736095201369L;
        Test.iFld -= 7;
        for (i8 = 3; i8 < 311; i8++) {
            f -= -5;
            i9 = (int)Test.instanceCount;
            lArrFld[i8 - 1] -= Test.instanceCount;
            Test.instanceCount <<= i9;
            i9 >>= (int)Test.instanceCount;
            if (bFld) continue;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i8 + i9;
    }

    public void mainTest(String[] strArr1) {

        int i10=29951, i11=-8, i12=3, i13=-9, i14=-49425, i15=-44473, i16=-106, i17=-9, i18=-17013, i19=10, iArr2[]=new
            int[N];
        double d2=120.59488;
        short s=5904;
        long l3=-13L;
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, 58.232F);
        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(byArr, (byte)-84);

        vMeth();
        for (i10 = 2; i10 < 130; ++i10) {
            fArr[i10 - 1] -= i10;
            i11 = (int)28219L;
            for (i12 = 4; i12 < 196; i12 += 2) {
                fArr[i10] *= Test.iFld;
                Test.fFld -= -47341;
                d2 += i13;
                Test.instanceCount *= i11;
                Test.iFld >>= s;
                Test.instanceCount += (i12 | i11);
                Test.fFld -= i10;
            }
            if (false) {
                for (l3 = 7; l3 < 196; l3++) {
                    i13 = (int)Test.fFld;
                    Test.instanceCount >>= -7383;
                    Test.iArrFld[i10] = i10;
                    Test.iFld = -34118;
                    for (i15 = 1; i15 < 2; ++i15) {
                        i13 >>>= (int)Test.instanceCount;
                        i11 += (i15 * i15);
                    }
                }
                i17 = 196;
                do {
                    i11 += i17;
                    for (i18 = 1; i18 < 3; ++i18) {
                        if (bFld) continue;
                        Test.instanceCount = i19;
                        iArr2[i17 - 1] -= i13;
                        byArr[i10 + 1] -= (byte)i14;
                        fArr[i17 - 1] = i13;
                        iArr2[i10 + 1] += Test.byFld;
                    }
                } while ((i17 -= 3) > 0);
            } else if (bFld) {
                i13 += i18;
            } else if (bFld) {
                s -= (short)i18;
            } else {
                i11 = (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
