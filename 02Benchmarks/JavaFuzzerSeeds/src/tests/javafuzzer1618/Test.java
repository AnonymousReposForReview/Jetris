package tests.javafuzzer1618;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:12:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8241436683893759023L;
    public static double dFld=2.109224;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 94.992F);
        FuzzerUtils.init(Test.iArrFld, 63232);
        FuzzerUtils.init(Test.iArrFld1, 36603);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(boolean b, float f1, int i4) {

        int i5=12, i6=-6, i7=34530, i8=-12053, iArr[]=new int[N];
        double d=-2.36573, dArr[]=new double[N];

        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(dArr, -1.56747);

        switch ((((i4 >>> 1) % 4) * 5) + 114) {
        case 131:
            iArr[(i4 >>> 1) % N] += (int)f1;
            for (i5 = 18; i5 < 326; i5++) {
                for (i7 = 1; 5 > i7; i7++) {
                    iArr[i5] -= (int)d;
                    Test.instanceCount -= (long)106.34F;
                    i6 += i6;
                    dArr = dArr;
                    switch (((i5 % 6) * 5) + 21) {
                    case 27:
                    case 47:
                        i8 += (-61 + (i7 * i7));
                        break;
                    case 30:
                        switch (((i5 % 3) * 5) + 62) {
                        case 69:
                            Test.instanceCount += (i7 * i4);
                            i8 = (int)-2456947459L;
                            f1 += (i7 + Test.instanceCount);
                            if (i5 != 0) {
                            }
                            break;
                        case 63:
                            i8 += i7;
                        case 73:
                            iArr[i5 + 1] *= i6;
                            break;
                        default:
                            iArr[i5 - 1] = (int)Test.instanceCount;
                        }
                        break;
                    case 43:
                        i8 = (int)Test.instanceCount;
                        break;
                    case 51:
                        Test.instanceCount = i8;
                        break;
                    case 29:
                        i6 += (i7 ^ (long)f1);
                    }
                }
            }
        case 118:
            Test.instanceCount *= i7;
            break;
        case 124:
            i4 = i5;
            break;
        case 128:
            iArr[(i5 >>> 1) % N] <<= (int)Test.instanceCount;
            break;
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i2, int i3) {

        boolean b1=false;
        int i10=-157, i11=-4, i12=149;
        double d1=124.50382;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-14517);

        Test.instanceCount >>>= Test.instanceCount;
        lMeth1(true, -124.0F, i3);
        for (int i9 : Test.iArrFld) {
            i2 = i2;
            Test.instanceCount = 998535494L;
            i9 = (int)1.619F;
            if (b1) {
                sArr[(i2 >>> 1) % N] %= (short)-14398;
            } else {
                Test.iArrFld[(i2 >>> 1) % N] = i9;
                i10 = 1;
                while (++i10 < 4) {
                    i3 = i10;
                    for (i11 = 1; i11 < 1; i11++) {
                        i12 += (i11 - i3);
                        i9 >>= i11;
                        d1 *= i3;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + (b1 ? 1 : 0) + i10 + i11 + i12 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i1) {


        i1 *= (int)lMeth(i1, i1);
        vSmallMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.153F, f2=-95.578F;
        int i=10, i13=-7, i14=-34166, i15=6;
        boolean b2=true;
        short s=-9927;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 67.42450);

        for (f = 8; f < 235; ++f) {
            i -= (int)((Math.max(i, i) - (--Test.fArrFld[(int)(f + 1)])) - -50);
        }
        for (int smallinvoc=0; smallinvoc<237; smallinvoc++) vSmallMeth(i);
        i = (int)Test.instanceCount;
        if (b2) {
            Test.iArrFld = Test.iArrFld;
            i *= -118;
            Test.iArrFld[(i >>> 1) % N] -= (int)Test.instanceCount;
            Test.instanceCount -= Test.instanceCount;
        }
        i13 = 1;
        while (++i13 < 373) {
            Test.instanceCount -= i;
            Test.iArrFld[i13 + 1] = i13;
            if (false) continue;
            i -= i13;
            i += (43 + (i13 * i13));
            i += (i13 | i13);
            s -= (short)i13;
            for (i14 = i13; i14 < 68; i14++) {
                if (true) break;
                i += (((i14 * i13) + i14) - Test.instanceCount);
                i = i15;
                Test.instanceCount += i14;
                f2 += (-12400 + (i14 * i14));
                Test.iArrFld[i14 + 1] |= 37398;
                Test.dFld -= i;
                Test.iArrFld1[i14 - 1] = Test.iArrFld1[i13 + 1];
                Test.iArrFld1[i14][i13 - 1] = -10;
            }
            dArr1[(i13 >>> 1) % N] *= i14;
        }
        Test.instanceCount = i15;
        i15 -= i;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  lMeth1 ->  lMeth1 lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
