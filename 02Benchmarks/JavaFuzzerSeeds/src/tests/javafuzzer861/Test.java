package tests.javafuzzer861;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:55:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4079010962L;
    public static int iFld=-4;
    public static volatile double dFld=-105.59816;
    public static byte byFld=-49;
    public static short sFld=-740;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 94L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i2=-48207, i3=45, i4=1, i5=-84;
        float f2=-1.470F, fArr[]=new float[N];
        double d=0.70688;
        boolean b1=true;
        short s=2858;

        FuzzerUtils.init(fArr, 2.599F);

        fArr[(Test.iFld >>> 1) % N] *= Test.iFld;
        for (i2 = 208; i2 > 13; i2 -= 2) {
            i3 = Test.iFld;
            if (false) continue;
            i3 = (int)f2;
            i3 += (((i2 * i3) + i3) - i2);
            i3 /= (int)((long)(d) | 1);
            Test.iFld -= 102;
            i4 = 1;
            while (++i4 < 16) {
                Test.iFld &= i4;
                switch (((Test.iFld >>> 1) % 9) + 115) {
                case 115:
                    i3 += (-64 + (i4 * i4));
                    break;
                case 116:
                    i5 *= i2;
                    b1 = b1;
                    Test.iFld = s;
                    break;
                case 117:
                    s += (short)5;
                case 118:
                    i3 -= i5;
                    break;
                case 119:
                    Test.iFld += (int)l;
                    break;
                case 120:
                    Test.instanceCount += i4;
                case 121:
                    b1 = b1;
                    break;
                case 122:
                    l = Test.iFld;
                    break;
                case 123:
                    Test.iFld /= (int)12L;
                    break;
                }
            }
        }
        vMeth2_check_sum += l + i2 + i3 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i4 + i5 + (b1 ? 1 :
            0) + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(float f, float f1) {

        int i1=6791, i6=-10, i7=-16, i8=-14, i9=-12, i10=-168, i11=-4, i12=2, i13=9, iArr[]=new int[N];
        short s1=7419;
        long l1=-5128508209141954722L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, -104);

        switch ((((Math.min(i1, i1) >>> 1) % 1) * 5) + 21) {
        case 25:
            vMeth2(Test.instanceCount);
            break;
        }
        for (i6 = 268; i6 > 6; i6--) {
            i7 += (int)-3778343381L;
            for (i8 = 1; i8 < 6; i8++) {
                i9 *= 36318;
                i1 += s1;
                bArr = bArr;
                for (i10 = 2; i10 > 1; --i10) {
                    Test.lArrFld[i6 - 1] <<= i10;
                    i7 += 88;
                }
                for (i12 = 1; 2 > i12; i12++) {
                    s1 = (short)i6;
                    l1 = Test.instanceCount;
                    iArr[i12] = i6;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i1 + i6 + i7 + i8 + i9 + s1 + i10 +
            i11 + i12 + i13 + l1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, boolean b) {

        float f3=71.715F, f4=-91.150F, fArr1[]=new float[N];
        int i14=-1, i15=150, i16=-11, i17=111;

        FuzzerUtils.init(fArr1, -1.637F);

        vMeth1(f3, f3);
        i *= Test.iFld;
        for (f4 = 8; f4 < 240; ++f4) {
            i *= (int)Test.dFld;
            i = i14;
            i15 = 1;
            do {
                f3 -= i14;
                i &= i14;
                switch ((int)(((f4 % 2) * 5) + 92)) {
                case 102:
                    if (b) continue;
                    i16 = 1;
                    do {
                        i17 = i;
                        fArr1[i15 - 1] -= i14;
                        i17 = i15;
                        i += (int)Test.instanceCount;
                    } while (--i16 > 0);
                case 100:
                    if (b) continue;
                    break;
                }
            } while (++i15 < 7);
        }
        vMeth_check_sum += i + (b ? 1 : 0) + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i14 + i15 + i16 +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        boolean b2=false;
        int i18=-223, i19=-17275, i20=7, i21=53, i22=44344, i23=-61579, i24=-12;
        float f5=95.783F, f6=53.307F, fArr2[]=new float[N];

        FuzzerUtils.init(fArr2, 32.791F);

        vMeth(Test.iFld, b2);
        Test.byFld >>= (byte)-14;
        Test.iFld = Test.iFld;
        Test.instanceCount *= (long)Test.dFld;
        for (i18 = 4; 169 > i18; i18 += 2) {
            Test.instanceCount += i18;
            if (false) break;
            if (false) {
                Test.instanceCount += (i18 | Test.iFld);
                Test.iFld += (12 + (i18 * i18));
                for (i20 = 1; i20 < 305; i20++) {
                    fArr2 = fArr2;
                    Test.instanceCount -= i18;
                    f5 += i20;
                    i19 += i20;
                    Test.lArrFld[i20 - 1] >>= Test.iFld;
                    Test.lArrFld[i18 - 1] = (long)Test.dFld;
                    Test.lArrFld[i18] = Test.instanceCount;
                    Test.instanceCount = -4279826668L;
                    Test.instanceCount += (i20 - Test.instanceCount);
                }
                for (i22 = 17; i22 < 305; ++i22) {
                    if (b2) {
                        Test.iFld += (i22 ^ i23);
                        for (f6 = 1; f6 < 2; ++f6) {
                            i19 += (0 + (f6 * f6));
                            Test.iFld -= (int)-8652585381150212206L;
                            f5 += (((f6 * Test.iFld) + i20) - Test.byFld);
                            Test.iFld <<= 48171;
                            f5 += f6;
                            Test.lArrFld[i18] = i23;
                        }
                    } else if (false) {
                        Test.instanceCount = i22;
                    } else if (b2) {
                        i19 += (((i22 * Test.instanceCount) + Test.byFld) - Test.sFld);
                    } else {
                        i19 += (((i22 * i20) + i21) - i19);
                    }
                }
            } else {
                iArrFld[i18 + 1] += (int)Test.instanceCount;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
