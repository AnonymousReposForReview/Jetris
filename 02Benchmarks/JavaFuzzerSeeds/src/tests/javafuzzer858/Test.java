package tests.javafuzzer858;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:55:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-727507878L;
    public static int iFld=-240;
    public static float fFld=1.725F;
    public static double dFld=1.67315;
    public static byte byFld=26;
    public static int iFld1=217;

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i1=11448, i2=-7, i3=0, i4=-9, i5=-112, i6=7, iArr[]=new int[N];
        short s=15578;
        float f1=-1.25F, f2=-74.472F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(lArr, 5L);

        if (b) {
            Test.iFld *= 10;
            for (i1 = 230; i1 > 4; i1 -= 2) {
                switch ((i1 % 4) + 122) {
                case 122:
                    Test.iFld += i1;
                    break;
                case 123:
                    s >>= (short)245;
                    iArr[i1] ^= Test.iFld;
                    break;
                case 124:
                    Test.instanceCount = -10902;
                    Test.iFld <<= i1;
                    for (f1 = 14; f1 > 1; --f1) {
                        for (i4 = 1; i4 < 2; i4++) {
                            i3 <<= (int)Test.instanceCount;
                            lArr = FuzzerUtils.long1array(N, (long)-14L);
                            i5 += i4;
                            i2 = i6;
                        }
                    }
                    break;
                case 125:
                    Test.instanceCount += (i1 ^ i5);
                    break;
                default:
                    f2 += i1;
                }
            }
        } else {
            s -= (short)Test.instanceCount;
        }
        long meth_res = i1 + i2 + s + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f2) + (b ? 1
            : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static float fMeth() {

        int i7=-55475, i8=71, i9=21536, i10=39, iArr1[]=new int[N];
        float f3=1.295F;

        FuzzerUtils.init(iArr1, -42);

        dMeth();
        Test.iFld += (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        Test.iFld *= (int)Test.fFld;
        for (i7 = 8; i7 < 266; ++i7) {
            for (i9 = i7; i9 < 6; ++i9) {
                iArr1[i9 - 1] >>>= Test.iFld;
                Test.iFld *= (int)Test.instanceCount;
                Test.iFld += i9;
                iArr1 = iArr1;
            }
        }
        i8 = (int)Test.dFld;
        Test.fFld += Test.instanceCount;
        f3 = 1;
        while (++f3 < 215) {
            i10 += i9;
            Test.fFld = Test.iFld;
        }
        long meth_res = i7 + i8 + i9 + i10 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(float f) {

        int i=50126, i11=198, i12=3, i13=-13, i14=-11, iArr2[]=new int[N];
        short s1=20188;

        FuzzerUtils.init(iArr2, 62732);

        i ^= (int)((-2.845F / ((i * -4) | 1)) - fMeth());
        iArr2 = iArr2;
        iArr2[(i >>> 1) % N] -= -6;
        i = (int)Test.dFld;
        i11 = 369;
        do {
            i <<= i;
            Test.byFld += (byte)(((i11 * Test.instanceCount) + Test.byFld) - i11);
            Test.dFld -= 72L;
            i = 0;
            i12 = 1;
            while (++i12 < 13) {
                i &= i;
                for (i13 = 1; 1 > i13; ++i13) {
                    i = s1;
                }
                iArr2[i11 - 1] = -34823;
                i14 <<= i11;
            }
        } while ((i11 -= 3) > 0);
        vMeth_check_sum += Float.floatToIntBits(f) + i + i11 + i12 + i13 + i14 + s1 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i15=-43613, i16=-23312, i17=45302, i18=34161, i20=46907, i21=-184, i22=83, i23=-191, i24=-245, i25=55580,
            i26=-17921, i27=59, iArr3[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr3, 7);

        vMeth(Test.fFld);
        Test.dFld = Test.iFld;
        Test.instanceCount += Test.byFld;
        for (i15 = 2; i15 < 126; i15++) {
            for (i17 = 4; i17 < 202; i17++) {
                b1 = b1;
                Test.instanceCount *= Test.instanceCount;
            }
            Test.byFld += (byte)(1 + (i15 * i15));
        }
        i16 = -7;
        for (int i19 : iArr3) {
            i19 -= i19;
            for (i20 = 1; i20 < 63; ++i20) {
                Test.byFld = (byte)i21;
                Test.dFld *= Test.fFld;
                Test.fFld += ((long)i20 | (long)i19);
                for (i22 = 1; i22 < 2; i22 += 3) {
                    Test.fFld -= -73;
                    i23 -= (int)Test.instanceCount;
                }
                iArr3[i20 + 1] = (int)Test.fFld;
                i19 = -6;
                b1 = b1;
            }
            i18 >>= 168;
            for (i24 = 2; i24 < 63; i24++) {
                i16 = i16;
                i16 = (int)Test.fFld;
                for (i26 = 1; i26 < 2; ++i26) {
                    i18 -= i20;
                }
            }
            Test.iFld -= i27;
            i23 *= i15;
            Test.iFld1 = i26;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
