package tests.javafuzzer1435;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:34:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4468929512741640424L;
    public static float fFld=0.428F;
    public static volatile short sFld=-20213;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -542642644L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vMeth(int i9, int i10) {


        Test.instanceCount = (long)((Test.fFld--) + (i9 * (i10 - i10)));
        vMeth_check_sum += i9 + i10;
    }

    public static int iMeth(int i11, int i12) {

        long l=-8844738663903664290L, l1=2419197181824113316L;
        int i13=247;
        boolean b=true;
        byte by=-19;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.221F);

        i11 = (int)Test.fFld;
        i11 = (int)(-l);
        Test.sFld += (short)(-((++Test.fFld) * -70));
        vMeth(i12, i12);
        i13 = 1;
        do {
            b = b;
            i11 -= (int)Test.instanceCount;
            l1 = 1;
            while (++l1 < 8) {
                Test.instanceCount <<= 1;
                Test.lArrFld[(int)(l1)] *= (long)Test.fFld;
                by += (byte)(-118 + (l1 * l1));
                switch (((i13 % 6) * 5) + 68) {
                case 94:
                    Test.lArrFld[(int)(l1 + 1)] = i13;
                case 78:
                    i12 *= i11;
                    fArr[(int)(l1)] *= i13;
                    break;
                case 81:
                    Test.fFld = by;
                    break;
                case 91:
                    Test.lArrFld[(int)(l1 - 1)] >>= i11;
                    break;
                case 89:
                    Test.fFld = Test.fFld;
                    break;
                case 73:
                    i12 -= (int)Test.fFld;
                    break;
                }
            }
        } while (++i13 < 212);
        long meth_res = i11 + i12 + l + i13 + (b ? 1 : 0) + l1 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i4, int i5, int i6) {

        int i7=62135, i8=4, i14=31456, i15=189, i16=220, i17=148, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 230);

        for (i7 = 3; i7 < 394; i7++) {
            Test.lArrFld = Test.lArrFld;
            switch (((((iArr1[i7]++) >>> 1) % 1) * 5) + 21) {
            case 23:
                switch ((((i8--) >>> 1) % 2) + 3) {
                case 3:
                    vMeth(62683, Math.min(iMeth(181, i5), i5));
                    break;
                case 4:
                    if (false) continue;
                    for (i14 = 1; i14 < 4; i14++) {
                        i5 += (-8 + (i14 * i14));
                        i4 += (((i14 * i15) + i7) - i5);
                        switch ((i7 % 5) + 69) {
                        case 69:
                            Test.instanceCount += (i14 * i14);
                            for (i16 = i14; i16 < 2; ++i16) {
                                Test.instanceCount >>= i6;
                                iArr1[i14] = i16;
                                Test.instanceCount = i5;
                            }
                            break;
                        case 70:
                            iArr1[i7 - 1] >>= (int)Test.instanceCount;
                            break;
                        case 71:
                            i17 = (int)Test.fFld;
                            break;
                        case 72:
                        case 73:
                            i8 |= -51476;
                        default:
                            Test.instanceCount += (((i14 * i16) + Test.instanceCount) - i6);
                        }
                    }
                    break;
                }
                break;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=59443, i1=4, i2=8, i3=-56090, i18=-62933, i19=12, i20=17080, i21=-224, i22=-7, i23=-172, iArr[]=new
            int[N];
        boolean b1=false;
        byte by1=60;
        double d1=0.128350;

        FuzzerUtils.init(iArr, 3);

        for (i = 15; i < 250; ++i) {
            Test.instanceCount = Math.min((i1++) * (i - i1), i1);
            if (b1) {
                i1 += (i | i);
                i1 = (int)(i1 = (int)(-(Test.instanceCount - i1)));
                i1 = iArr[i + 1];
                for (i2 = 5; i2 < 107; i2 += 2) {
                    i3 = (int)((lMeth(i, i1, i2) + 1.637F) - i1);
                    i3 = i3;
                }
            } else if (true) {
                i3 += (12 + (i * i));
                i1 = i2;
            }
            by1 = (byte)i;
        }
        i18 = 1;
        while ((i18 += 3) < 162) {
            i19 = 280;
            while ((i19 -= 2) > 0) {
                i3 -= -63353;
                i3 += (i19 * i19);
                iArr[i18 + 1] += (int)Test.fFld;
                Test.sFld += (short)29399L;
                for (i20 = 1; i20 < 4; ++i20) {
                    i3 += (i20 * i20);
                    Test.instanceCount ^= 219;
                    iArr[i19] -= i18;
                    by1 += (byte)i20;
                    if (b1) continue;
                    Test.lArrFld[i18] = i1;
                }
                i1 += (((i19 * i3) + i18) - i21);
                i1 = i1;
                for (i22 = 1; i22 < 4; i22++) {
                    d1 *= i19;
                    Test.lArrFld[i18 + 1] *= i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
