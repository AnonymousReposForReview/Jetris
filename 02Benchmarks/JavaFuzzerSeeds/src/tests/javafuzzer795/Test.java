package tests.javafuzzer795;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:06:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9902L;
    public static float fFld=77.431F;
    public static volatile int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i3=-10656, i4=190, i5=-55223, i7=117, i8=54042, i9=36775;
        byte by=-22;
        float f=0.934F;
        short s=-633;

        i3 += by;
        for (i4 = 258; i4 > 15; i4--) {
            double d1=75.51840;
            f = i4;
            i3 >>>= i3;
            i7 = 1;
            while (++i7 < 7) {
                f += (((i7 * i7) + i5) - i5);
                Test.iArrFld[i7 - 1] += i7;
                i3 = s;
                for (i8 = 1; i8 < 1; i8 += 2) {
                    s >>= (short)-8L;
                }
                Test.instanceCount -= i8;
                i9 = (int)1.623F;
            }
            d1 -= i4;
            Test.iArrFld[i4 - 1] >>= (int)-90L;
            i3 *= s;
        }
        vMeth_check_sum += i3 + by + i4 + i5 + Float.floatToIntBits(f) + i7 + s + i8 + i9;
    }

    public static long lMeth1(int i2) {

        double d=-38.59403, d2=-1.77707;
        int i10=-4, i11=114, i12=-35, i13=4, i14=40264, i15=46588, i16=-101, i17=8;
        float f1=-2.548F;
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)9937);
        FuzzerUtils.init(lArr1, 26899L);

        Test.iArrFld[(i2 >>> 1) % N] = (int)(((i2 - -81.247F) + sArr[(i2 >>> 1) % N]) + (d++));
        vMeth();
        i2 += i2;
        for (d2 = 3; d2 < 195; ++d2) {
            Test.iArrFld[(int)(d2)] <<= (int)Test.instanceCount;
        }
        for (i11 = 8; i11 < 250; i11++) {
            i13 += (-26011 + (i11 * i11));
            i14 = 1;
            while (++i14 < 7) {
                Test.instanceCount -= i2;
                i15 = 1;
                do {
                    lArr1 = lArr1;
                } while (++i15 < 1);
                switch ((((-4 >>> 1) % 1) * 5) + 65) {
                case 68:
                    for (i16 = 1; i16 < 1; ++i16) {
                        i13 += (((i16 * f1) + Test.instanceCount) - i16);
                        lArr1[i11] = i16;
                    }
                    break;
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d2) + i10 + i11 + i12 + i13 + i14 +
            i15 + i16 + i17 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(long l) {

        int i1=1, i18=-14, i19=1, i20=2273, i21=-39747, i22=68, i23=218, i24=13863;
        short s1=-28604;
        double d3=-81.91208;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 3613395955L);
        FuzzerUtils.init(fArr, -1.490F);

        lArr[(i1 >>> 1) % N] += (((i1 -= i1) - lMeth1(-245)) + -2127346448894034421L);
        for (i18 = 23; i18 < 383; ++i18) {
            i20 = 1;
            do {
                for (i21 = 1; 1 > i21; ++i21) {
                    i19 = s1;
                }
                fArr[i20] += i18;
                try {
                    i22 = (29715 % i20);
                    i19 = (i22 % i19);
                    i1 = (-2109999834 % i22);
                } catch (ArithmeticException a_e) {}
                s1 = (short)-21477;
            } while (++i20 < 5);
            l += (long)Test.fFld;
        }
        i19 *= i22;
        Test.fFld += i1;
        for (i23 = 9; i23 < 159; i23++) {
            d3 %= (i22 | 1);
            i24 = -3;
            Test.fFld -= i19;
        }
        long meth_res = l + i1 + i18 + i19 + i20 + i21 + i22 + s1 + i23 + i24 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-72, i25=-11, i26=230, i27=8, i28=-198, i29=13, i30=10, i31=65213, i32=-7625, i33=56253;
        long l2=-6L, l3=8L;
        double d4=0.3067;
        boolean b=true;

        i += Test.iArrFld[(i >>> 1) % N];
        i = (int)(Test.instanceCount--);
        i -= (int)(lMeth(l2) + l3);
        for (i25 = 15; 369 > i25; i25++) {
            Test.fFld += (i25 - Test.fFld);
            i = 33581;
            l2 <<= l2;
            for (i27 = 4; i27 < 71; ++i27) {
                i29 = 1;
                while (++i29 < 2) {
                    Test.fFld = i27;
                    Test.instanceCount += (long)Test.fFld;
                    i26 -= i25;
                    Test.instanceCount = i25;
                    i26 -= (int)1.346F;
                    Test.instanceCount += (((i29 * i) + i25) - l2);
                    d4 = 37131;
                    i26 >>= (int)l2;
                }
                switch (((i27 % 2) * 5) + 33) {
                case 41:
                    Test.iArrFld[i27] -= 12;
                    break;
                case 34:
                    Test.fFld += (i27 * i27);
                    for (i30 = 1; i30 < 2; i30++) {
                        Test.iArrFld = Test.iArrFld;
                        Test.fFld *= i27;
                        i28 -= (int)Test.instanceCount;
                        Test.iArrFld[i25 + 1] = i31;
                    }
                    for (i32 = i25; i32 < 2; ++i32) {
                        i33 += (i32 * i32);
                        i33 = (int)-2.106231;
                        Test.bArrFld[i32 + 1] = b;
                        if (false) break;
                    }
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
