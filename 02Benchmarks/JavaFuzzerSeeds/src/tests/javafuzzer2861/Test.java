package tests.javafuzzer2861;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:44:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=171L;
    public static boolean bFld=true;
    public static int iFld=89;
    public static byte byFld=54;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -117);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4) {

        int i5=77, i6=34836, i7=45, i8=-15185, i9=-9, i10=-12, iArr[]=new int[N];
        float f=62.524F;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -151);
        FuzzerUtils.init(dArr, 0.40826);

        for (i5 = 15; i5 < 252; ++i5) {
            i4 = (int)Test.instanceCount;
            Test.instanceCount -= i3;
            i3 /= -4;
            if (true) continue;
        }
        for (i7 = 15; i7 < 378; i7++) {
            for (i9 = 5; i9 > 1; i9--) {
                iArr[i9] += (int)f;
                i3 <<= i9;
                b = b;
                if (b) continue;
                dArr[i9] = f;
                i3 = i7;
                if (i6 != 0) {
                    vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                i6 = i9;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1(int i) {

        int i1=-200, i2=-24921;
        long l1=0L;
        short s=6005;
        byte by=-17;

        for (i1 = 164; i1 > 10; i1 -= 3) {
            vMeth(i2, i1);
            l1 = 1;
            while (++l1 < 30) {
                Test.instanceCount += i;
                i2 = i;
                i += (int)l1;
                i += (int)(((l1 * s) + i1) - i1);
                i2 *= (int)Test.instanceCount;
                s -= (short)-57364;
                Test.iArrFld[i1] -= by;
                if (Test.bFld) break;
                i2 += (int)(l1 * i2);
                i = i1;
            }
            i *= i2;
        }
        i = i;
        long meth_res = i + i1 + i2 + l1 + s + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i11=114, i12=-7, i13=3447, i14=-23731, i15=7, i16=-38877, i17=47179;
        float f1=-1.475F;

        switch ((((iMeth1(i11) >>> 1) % 2) * 5) + 59) {
        case 61:
            switch ((((57 >>> 1) % 2) * 5) + 6) {
            case 11:
                i11 = i11;
                break;
            case 8:
                i11 -= i11;
                break;
            }
            l *= i11;
            i11 -= (int)-2.801F;
            break;
        case 67:
            for (i12 = 10; i12 < 264; i12++) {
                f1 += Test.instanceCount;
                i13 += (((i12 * i11) + i11) - i11);
                for (i14 = i12; i14 < 6; ++i14) {
                    try {
                        i11 = (Test.iArrFld[i12 + 1] % i12);
                        i13 = (i12 / Test.iArrFld[i14]);
                        Test.iArrFld[i12] = (Test.iArrFld[i12] / i13);
                    } catch (ArithmeticException a_e) {}
                    i13 += i15;
                    for (i16 = 1; i16 < 1; i16++) {
                        f1 = i17;
                        i15 -= (int)Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = l + i11 + i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s1=-17857;
        double d=0.84309;
        int i18=-172, i19=50765, i20=-20979, i21=-45127, i22=8, i23=4, i24=31797;
        float f2=21.274F;
        long l3=-4L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 9L);

        iMeth(Test.instanceCount);
        s1 = (short)-42;
        Test.iFld >>= Test.iFld;
        Test.iFld = (int)Test.instanceCount;
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        for (d = 2; d < 128; ++d) {
            for (i19 = 199; i19 > 11; i19--) {
                if (Test.bFld) {
                    Test.instanceCount += (((i19 * i20) + f2) - i19);
                    for (l3 = 2; l3 > 1; l3 -= 2) {
                        Test.iArrFld[(int)(d + 1)] -= (int)Test.instanceCount;
                        Test.bFld = Test.bFld;
                    }
                } else {
                    Test.iArrFld[(int)(d)] -= 167;
                }
                i22 = 1;
                do {
                    Test.instanceCount = i19;
                    Test.iFld &= -47259;
                    if (Test.bFld) continue;
                    Test.instanceCount -= (long)d;
                    Test.byFld -= (byte)f2;
                    i21 -= (int)-57.65625;
                    i18 = (int)l3;
                    i21 -= i22;
                } while (++i22 < 2);
                Test.bFld = Test.bFld;
            }
            i21 = i18;
            i20 -= (int)f2;
            Test.instanceCount += i18;
            Test.instanceCount *= i18;
            for (i23 = 2; i23 < 199; i23++) {
                f2 = Test.instanceCount;
                Test.iFld += Test.byFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
