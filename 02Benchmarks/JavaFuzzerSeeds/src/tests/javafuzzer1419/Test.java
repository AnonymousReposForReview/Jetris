package tests.javafuzzer1419;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:09:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3158178870744064969L;
    public static int iFld=-245;
    public static double dFld=-83.89229;
    public static int iFld1=-75;
    public int iFld2=114;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 8.118071);
        FuzzerUtils.init(Test.iArrFld, 129);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vMeth1(boolean b, float f, long l1) {

        int i=-141, i1=2316;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3L);

        Test.iFld = (int)Test.dFld;
        for (i = 1; i < 223; ++i) {
            lArr[i] = (Test.instanceCount |= (long)((++f) * (i - i)));
            Test.dFld = -9336;
        }
        vMeth1_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + l1 + i + i1 + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth() {

        boolean b1=true;
        int i2=-60175, i3=12, i4=-63735, i5=-28325, i6=-250, i7=193, iArr[]=new int[N];
        double d=2.24453;
        float f1=82.138F, fArr[]=new float[N];
        short s=12394;

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(fArr, -2.694F);

        vMeth1(b1, -1.626F, 5L);
        Test.iFld = Test.iFld1;
        i2 = 1;
        do {
            for (d = 1; d < 7; ++d) {
                Test.dArrFld[(int)(d - 1)] = Test.iFld;
                for (i4 = 1; 2 > i4; ++i4) {
                    f1 += f1;
                    Test.instanceCount = 0;
                    i5 = s;
                    i3 += Test.iFld1;
                }
                Test.iFld -= i3;
                for (i6 = 2; 1 < i6; i6 -= 3) {
                    iArr = iArr;
                    iArr[i2 + 1] += (int)f1;
                }
                fArr[(int)(d - 1)] = (float)2.96411;
            }
        } while (++i2 < 215);
        long meth_res = (b1 ? 1 : 0) + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + Float.floatToIntBits(f1) + s +
            i6 + i7 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l) {

        float f2=-1.533F, fArr1[]=new float[N];
        long l2=3721952438354110772L;
        int i8=72, i9=195, i10=243, i11=9, i12=-198, i13=22685;
        byte by=-61;

        FuzzerUtils.init(fArr1, -97.445F);

        Test.iFld = ((-(Test.iFld * -10)) + Test.iFld);
        vMeth1(fMeth() != l, f2, Test.instanceCount);
        Test.dFld += l2;
        for (i8 = 1; i8 < 242; i8++) {
            for (i10 = i8; i10 < 7; ++i10) {
                Test.iArrFld[(i11 >>> 1) % N] = i10;
                Test.iFld1 += (int)Test.instanceCount;
                i11 = Test.iFld1;
                for (i12 = 1; i12 < 1; ++i12) {
                    f2 *= (float)Test.dFld;
                    fArr1[i8] /= (0 | 1);
                    l2 += i11;
                    l2 = 13;
                    i11 ^= by;
                    Test.iFld -= (int)f2;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f2) + l2 + i8 + i9 + i10 + i11 + i12 + i13 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i15=-11, i16=-241, i17=-102, i18=-16851, i19=14;
        float f3=113.679F, f4=-1.700F;
        long l3=-3004107143L;
        boolean b2=false, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        vMeth(Test.instanceCount);
        Test.iFld1 += Test.iFld;
        for (int i14 : Test.iArrFld) {
            try {
                Test.iFld1 = (61560 % Test.iFld);
                Test.iArrFld[(186 >>> 1) % N] = (15594 % Test.iArrFld[(13 >>> 1) % N]);
                Test.iFld = (Test.iFld % -18085);
            } catch (ArithmeticException a_e) {}
            for (i15 = 1; i15 < 63; i15++) {
                Test.dFld = i16;
                f3 += f3;
                i14 >>= 0;
                Test.iArrFld[i15 - 1] = i15;
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.instanceCount = i18;
                    Test.iArrFld[i15 - 1] |= 14;
                    Test.iFld += i17;
                    Test.instanceCount *= (long)-1.821F;
                    Test.instanceCount >>= i16;
                    Test.iArrFld[i15 + 1] |= -49886;
                    iFld2 <<= Test.iFld1;
                    f3 -= -35052;
                    fArrFld[i15 + 1] *= 1.902F;
                }
            }
            switch (((11 >>> 1) % 10) + 38) {
            case 38:
                Test.iArrFld = Test.iArrFld;
                i18 *= i14;
                for (l3 = 2; l3 < 63; l3++) {
                    i19 = i18;
                    if (b2) break;
                    f4 = 1;
                    do {
                        i14 += (int)l3;
                        Test.instanceCount *= (long)Test.dFld;
                        bArr[(int)(f4 + 1)][(int)(l3 - 1)] = b2;
                        bArr[(int)(l3)][(int)(l3)] = false;
                    } while (++f4 < 2);
                }
                break;
            case 39:
                f3 = i19;
                break;
            case 40:
                Test.iFld += iFld2;
                break;
            case 41:
                f3 += iFld2;
                break;
            case 42:
                i16 -= (int)l3;
                break;
            case 43:
                i18 = i14;
                break;
            case 44:
                i16 *= Test.iFld1;
                break;
            case 45:
                i18 = (int)Test.instanceCount;
                break;
            case 46:
                i16 &= iFld2;
                break;
            case 47:
                Test.iArrFld[(-12849 >>> 1) % N] = (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest fMeth
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
