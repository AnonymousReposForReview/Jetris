package tests.javafuzzer2334;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:38:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=31327L;
    public static volatile short sFld=-1371;
    public static float fFld=42.415F;
    public static volatile int iFld=-28304;
    public static long lArrFld[]=new long[N];
    public static volatile float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -794266121494778441L);
        FuzzerUtils.init(Test.fArrFld, 1.205F);
        FuzzerUtils.init(Test.iArrFld, -483);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i6=41386, i7=-9, i8=10, i9=13, iArr[]=new int[N];
        boolean b1=false;
        double d1=51.1835;
        byte by=111;

        FuzzerUtils.init(iArr, 51579);

        for (i6 = 8; i6 < 186; i6++) {
            switch (((i6 % 7) * 5) + 113) {
            case 131:
                for (i8 = 1; i8 < 9; i8++) {
                    b1 = b1;
                }
                d1 *= i7;
                break;
            case 132:
                i9 -= i8;
                if (b1) {
                    Test.instanceCount = i9;
                    Test.sFld = (short)Test.instanceCount;
                    i7 >>= i6;
                }
                iArr[i6 - 1] += by;
                break;
            case 130:
                i7 -= i9;
                i9 *= i9;
                i7 += i6;
                Test.instanceCount = i6;
                break;
            case 120:
                iArr[i6] >>= (int)Test.instanceCount;
                break;
            case 141:
                iArr[i6 - 1] -= i8;
            case 143:
                i9 += 24;
                break;
            case 135:
                i7 = i7;
                break;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + by +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(boolean b, double d) {

        int i4=-4, i5=1, i10=-4, i11=5, i12=4;
        short s=24035, sArr[]=new short[N];
        double d2=2.121023;

        FuzzerUtils.init(sArr, (short)1654);

        i4 = 1;
        while (++i4 < 281) {
            Test.instanceCount = Math.abs((i4 - s) + (++sArr[i4 - 1]));
            Test.instanceCount += (i4 * i4);
            i5 -= (int)lMeth();
            for (d2 = 1; d2 < 6; d2++) {
                Test.fFld += (float)d2;
                for (i11 = 2; i11 > 1; i11 -= 2) {
                    i10 += (i11 * i12);
                    i12 += i11;
                    i12 = 150;
                    i5 -= i12;
                    i10 |= (int)Test.instanceCount;
                    i5 *= 219;
                    i5 = i4;
                }
                if (b) continue;
            }
        }
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(d) + i4 + s + i5 + Double.doubleToLongBits(d2) + i10 +
            i11 + i12 + FuzzerUtils.checkSum(sArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i1, long l) {

        int i2=14, i3=0, i13=-6, i14=-24819, i15=-4, iArr1[]=new int[N];
        boolean b2=true;
        double d3=-1.123636;
        float f=-2.238F;

        FuzzerUtils.init(iArr1, -116);

        for (i2 = 227; i2 > 13; i2 -= 2) {
            Test.lArrFld[i2 + 1] += (long)dMeth(b2, d3);
            try {
                i1 = (1713751427 % i3);
                iArr1[(i3 >>> 1) % N] = (iArr1[i2] / i3);
                iArr1[i2 - 1] = (40 % i1);
            } catch (ArithmeticException a_e) {}
            for (f = 15; f > i2; --f) {
                l += (long)((long)f ^ i3);
                try {
                    i1 = (i2 % -217);
                    i1 = (i2 % 491552285);
                    i3 = (i2 % i1);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount >>= i1;
                l = i1;
            }
            for (i14 = 15; 1 < i14; i14 -= 3) {
                Test.lArrFld[i14] <<= i1;
                i1 = 82;
                i15 += i14;
                i13 += (i14 + Test.sFld);
                i13 -= 54039;
            }
            Test.fArrFld[i2 + 1][i2 - 1] -= l;
        }
        long meth_res = i1 + l + i2 + i3 + (b2 ? 1 : 0) + Double.doubleToLongBits(d3) + Float.floatToIntBits(f) + i13 +
            i14 + i15 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3341, i16=-2074, i17=-44, i18=-39591, i19=31211, i20=-49707, i21=62081, i22=41570, i23=-60571;
        float f1=-21.507F;
        boolean b3=true, bArr[]=new boolean[N];
        double d4=110.27061;

        FuzzerUtils.init(bArr, false);

        i *= (int)(Test.instanceCount *= ((242 - (-1280 + iMeth(-83, Test.instanceCount))) * Test.instanceCount));
        i >>= i;
        i = i;
        i16 = 1;
        do {
            Test.iArrFld = Test.iArrFld;
            i = i;
            i = (int)Test.instanceCount;
            i *= i;
        } while (++i16 < 357);
        for (f1 = 292; f1 > 16; --f1) {
            i += (int)(f1 * f1);
            Test.sFld += (short)f1;
        }
        for (i18 = 11; 226 > i18; i18++) {
            Test.instanceCount = Test.instanceCount;
            Test.instanceCount = i17;
            for (i20 = 5; 117 > i20; i20++) {
                Test.instanceCount += i20;
                for (i22 = 1; i22 < 2; i22++) {
                    Test.fFld += (((i22 * i23) + Test.fFld) - Test.instanceCount);
                    bArr[i18] = b3;
                    if (b3) break;
                    switch ((i22 % 6) + 119) {
                    case 119:
                        Test.instanceCount &= i21;
                        i19 <<= i;
                        break;
                    case 120:
                        Test.lArrFld[i22 + 1] = Test.iFld;
                        i21 &= i22;
                        i17 *= (int)d4;
                        bArr[i18] = b3;
                        break;
                    case 121:
                        Test.fArrFld[i18 - 1][i22 - 1] = Test.instanceCount;
                        i19 = i;
                        i23 += i18;
                        break;
                    case 122:
                        d4 -= d4;
                        break;
                    case 123:
                    case 124:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    default:
                        i19 *= (int)Test.instanceCount;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
