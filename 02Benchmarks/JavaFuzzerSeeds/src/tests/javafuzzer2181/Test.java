package tests.javafuzzer2181;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:46:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=858L;
    public static short sFld=31481;
    public static double dFld=2.128878;
    public static boolean bFld=false;
    public float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -40245);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i14, int i15, int i16) {

        int i17=-3, i18=152, i19=59045, i20=-37720, i21=-2613, i22=32, i23=14, i24=-7;
        float f3=0.767F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -34.45353);

        i14 -= 23;
        for (i17 = 19; 363 > i17; ++i17) {
            float f2=-48.230F;
            f2 += Test.instanceCount;
            i18 += i17;
            Test.iArrFld[i17 - 1] += Test.sFld;
            i15 = i16;
            for (i19 = i17; i19 < 5; i19++) {
                i15 = i14;
            }
            Test.instanceCount = (long)79.282F;
            dArr[i17 - 1] += i18;
        }
        for (i21 = 1; i21 < 156; i21++) {
            Test.instanceCount += (((i21 * i15) + i18) - i22);
            for (i23 = 1; i23 < 10; ++i23) {
                i20 = i24;
                f3 = f3;
            }
        }
        vMeth1_check_sum += i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f3)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i11, int i12, double d) {

        short s=-19128;
        float f1=0.636F;
        int i13=-7, i25=58070, i26=148, i27=-50, i28=132;
        double d1=-67.41908, d2=0.53918;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        i12 &= i12;
        i11 = s;
        i11 = (int)(((++i11) + (39 * lArr[(i12 >>> 1) % N])) * ((s + Test.instanceCount) + (-(++i12))));
        f1 += i11;
        i13 = 1;
        do {
            i11 += (-175 + (i13 * i13));
        } while (++i13 < 183);
        vMeth1(-3, i11, i11);
        for (i25 = 203; i25 > 5; --i25) {
            i12 >>= i11;
            Test.instanceCount += (((i25 * i11) + Test.instanceCount) - s);
            i26 += (((i25 * i12) + f1) - i25);
            for (d1 = 1; d1 < 8; d1++) {
                for (d2 = 1; 2 > d2; d2++) {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-35538);
                    i27 += (int)(d2 * d2);
                }
            }
        }
        vMeth_check_sum += i11 + i12 + Double.doubleToLongBits(d) + s + Float.floatToIntBits(f1) + i13 + i25 + i26 +
            Double.doubleToLongBits(d1) + i27 + Double.doubleToLongBits(d2) + i28 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i7, int i8, float f) {

        int i9=3, i10=11, i29=-180, i30=-29830, i31=40018, i32=-208, i33=132;

        i8 <<= i8;
        for (i9 = 6; i9 < 168; i9++) {
            i10 = (int)(--f);
        }
        vMeth(41, i10, Test.dFld);
        i29 = 1;
        do {
            for (i30 = i29; 7 > i30; i30++) {
                Test.instanceCount -= i30;
            }
            i10 += (-3 + (i29 * i29));
            i31 = i31;
            i7 %= -123;
            Test.sFld += (short)1.120856;
            i31 += (((i29 * Test.instanceCount) + i30) - i10);
            for (i32 = 1; i32 < 7; i32++) {
                i7 += (int)Test.dFld;
                i31 >>= 224;
            }
        } while (++i29 < 225);
        long meth_res = i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i29 + i30 + i31 + i32 + i33;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=62153, i1=40, i2=10, i3=-7, i4=-8, i5=23335, i6=221, i34=3012, i35=-2, i36=-67, i37=116, i38=191, i39=-8,
            i40=0;
        long l=170L, l1=-5246300405724398562L;
        byte by=114;
        float f4=-20.683F;

        for (i = 14; i < 278; i++) {
            for (i2 = 95; i2 > 4; --i2) {
                for (l = 2; 1 < l; l--) {
                    Test.instanceCount += (-1685999521991259109L + (l * l));
                }
            }
            fArrFld[i + 1] += (((i3 * i4) + (i4 - 77L)) - (--by));
        }
        for (i5 = 9; i5 < 215; i5++) {
            fArrFld[i5] = ((Test.instanceCount * iMeth(118, i3, f4)) - i3);
            if (Test.bFld) {
                i1 = i;
                i6 = (int)Test.instanceCount;
            } else if (Test.bFld) {
                f4 += (((i5 * i4) + Test.instanceCount) - i4);
                l1 = 1;
                do {
                    i6 = i5;
                    i1 = 24500;
                    for (i34 = 1; 1 > i34; i34++) {
                        Test.sFld = (short)i5;
                        Test.instanceCount = i3;
                    }
                    i4 = 1;
                    i6 += (int)l1;
                    i35 += (int)l1;
                } while (++l1 < 122);
                i4 = i2;
                Test.instanceCount = i1;
            } else if (Test.bFld) {
                Test.instanceCount += (i5 * i5);
            } else {
                by ^= (byte)135;
                for (i36 = 4; i36 < 122; ++i36) {
                    Test.iArrFld[i5] <<= i34;
                    i37 <<= i3;
                    for (i38 = 1; 2 > i38; ++i38) {
                        Test.instanceCount = i38;
                        i1 = i3;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
