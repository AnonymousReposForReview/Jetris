package tests.javafuzzer2077;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:39:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5604697268461784668L;
    public static byte byFld=37;
    public static long lFld=-229L;
    public float fFld=0.850F;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 59.832F);
        FuzzerUtils.init(Test.iArrFld1, -52462);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i12, int i13) {

        int i14=42, i15=12, i16=-234, i17=7416, i18=-47264, i19=13916, i20=-14, i21=-1, i22=-38487, i23=247;
        boolean b=true;
        byte byArr[][]=new byte[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)52);
        FuzzerUtils.init(lArr1, -32288L);

        for (i14 = 281; i14 > 9; i14 -= 3) {
            i16 = 1;
            do {
                i13 >>= 6;
                for (i17 = 1; i17 < 1; i17++) {
                    i18 |= i17;
                    Test.instanceCount <<= i12;
                    i18 *= i12;
                    Test.iArrFld1[i17 + 1] <<= (int)Test.instanceCount;
                }
            } while (++i16 < 17);
            for (i19 = 17; 1 < i19; --i19) {
                i21 = 2;
                do {
                    byArr[i19][i14 - 1] = (byte)i14;
                    Test.instanceCount >>= Test.byFld;
                } while ((i21 -= 2) > 0);
                for (i22 = 1; 2 > i22; i22++) {
                    lArr1 = lArr1;
                    b = b;
                }
            }
        }
        vMeth1_check_sum += i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i7) {

        int i8=9090, i9=-7, i10=-223, i11=176;
        float f1=-13.800F;
        double d=-63.49268;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5257577648853243856L);

        Test.instanceCount %= ((-Test.instanceCount) | 1);
        for (i8 = 228; 12 < i8; i8--) {
            for (i10 = i8; i10 < 7; ++i10) {
                i11 = (int)((Test.fArrFld[i10 - 1]--) + i10);
                i9 = (int)(Double.longBitsToDouble(i9 + -4058) - (-i10));
                i11 -= (int)lArr[i10 + 1];
                vMeth1(i7, -31);
                i11 += (i10 + i11);
                i9 += (i10 | i9);
                i11 = (int)-17395L;
                i9 = i8;
            }
        }
        i7 -= (int)Test.instanceCount;
        if (b1) {
            f1 *= (float)d;
            Test.iArrFld1[(i7 >>> 1) % N] = (int)Test.instanceCount;
        } else {
            d = d;
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + (b1 ? 1 :
            0) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i3, int i4) {

        int i5=17422, i6=-23543, i24=-45090, i25=-33397, i26=29225, i27=-13, i28=34856;
        double d1=0.107675;
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i5 = 9; 170 > i5; ++i5) {
            float f=-72.310F;
            f -= ((Test.instanceCount++) ^ Test.instanceCount);
            switch ((i5 % 4) + 12) {
            case 12:
                i4 += (i5 | i6);
                vMeth(229);
            case 13:
                switch (((i3 >>> 1) % 9) + 55) {
                case 55:
                    i4 >>>= i6;
                    for (i24 = 1; 10 > i24; i24++) {
                        Test.byFld = (byte)Test.instanceCount;
                        Test.instanceCount += i24;
                    }
                    break;
                case 56:
                    d1 = 1;
                    while (++d1 < 10) {
                        for (i26 = 1; i26 < 1; i26++) {
                            Test.fArrFld = Test.fArrFld;
                            Test.instanceCount >>= i6;
                            i3 >>>= i27;
                        }
                    }
                    break;
                case 57:
                case 58:
                    bArr[i5 + 1] = b2;
                case 59:
                    f = i4;
                    break;
                case 60:
                    Test.instanceCount += (((i5 * i24) + Test.instanceCount) - i6);
                    break;
                case 61:
                    Test.iArrFld1[i5] += -6527;
                    break;
                case 62:
                    Test.instanceCount += i5;
                    break;
                case 63:
                    i28 += (i5 ^ i28);
                    break;
                }
            case 14:
                Test.iArrFld1[i5 - 1] -= -2;
                break;
            case 15:
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i24 + i25 + Double.doubleToLongBits(d1) + i26 + i27 + (b2 ? 1 : 0) + i28 +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i1=3, i2=-51, i29=17538, i30=110, i31=6, i32=-10, i33=-7859, i34=3, i35=-3034, i36=-15718, i37=-10,
            i38=-12;
        long l=-5L;

        for (i = 6; 246 > i; i++) {
            for (l = 2; l < 105; l++) {
                i1 -= (++i1);
                iArrFld[(int)(l + 1)] = (int)((iArrFld[i] -= iMeth(i2, i)) - Test.lFld);
                for (i29 = 2; 1 < i29; --i29) {
                    fFld = i30;
                    Test.instanceCount += (((i29 * i29) + i29) - i);
                }
                i30 += -33679;
                for (i31 = i; i31 < 2; i31++) {
                    Test.fArrFld[i31] = i2;
                    i2 = (int)Test.lFld;
                }
            }
            fFld -= i29;
            i30 = i1;
            try {
                iArrFld[i + 1] = (i1 % 12278);
                i30 = (Test.iArrFld1[i] / -178);
                i32 = (i % -25473);
            } catch (ArithmeticException a_e) {}
            i30 += (i * i);
            i30 = (int)l;
        }
        for (i33 = 23; i33 < 383; ++i33) {
            i2 = -54713;
            i1 ^= i32;
            fFld = i34;
        }
        fFld = Test.byFld;
        i2 |= i33;
        for (i35 = 5; i35 < 219; ++i35) {
            for (i37 = i35; i37 < 117; i37++) {
                Test.iArrFld1[i35 - 1] *= i37;
                i32 = 3;
                i34 *= (int)l;
            }
            if (Test.bFld) break;
            i36 = (int)62.95598;
            Test.iArrFld1[i35 - 1] = (int)5978196499103779861L;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
