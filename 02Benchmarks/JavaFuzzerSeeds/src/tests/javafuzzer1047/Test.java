package tests.javafuzzer1047;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:22:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static int iFld=-140;
    public static boolean bFld=true;
    public static float fFld=-23.906F;
    public static short sFld=5843;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth1() {

        boolean b=false;

        Test.iArrFld[(Test.iFld >>> 1) % N] -= (int)(++Test.instanceCount);
        b = b;
        long meth_res = (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth2(float f1) {

        int i4=6, i5=16714, i6=-146, i7=14, i8=9;
        short s=11323;
        double d=0.116896;

        Test.iFld += Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        i4 = 1;
        while (++i4 < 139) {
            for (i5 = 1; i5 < 11; ++i5) {
                int i9=37;
                i6 *= (int)Test.instanceCount;
                for (i7 = 1; 2 > i7; ++i7) {
                    Test.instanceCount = i4;
                    if (Test.bFld) continue;
                    Test.instanceCount /= (i5 | 1);
                }
                i6 *= Test.iFld;
                Test.iFld -= Test.iFld;
                Test.bFld = Test.bFld;
                i9 = i4;
                s = (short)i7;
            }
            i8 -= (int)d;
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + s + Double.doubleToLongBits(d);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l1) {

        int i10=24073, i11=6, i12=-62069;
        short s1=20357;
        byte by=-96;
        float f2=0.410F;
        double d1=0.18790;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -4972448114776455989L);

        iMeth2(-28.580F);
        for (i10 = 12; 252 > i10; i10++) {
            s1 = (short)-53;
            i12 = 7;
            while (--i12 > 0) {
                by -= (byte)i11;
                if (true) {
                    Test.bFld = Test.bFld;
                } else {
                    i11 = i10;
                    Test.iArrFld[i10] = i10;
                }
                i11 -= (int)f2;
                Test.iFld |= i10;
                lArr2[i12 - 1] *= -11L;
                d1 = i10;
                f2 += i12;
            }
            try {
                Test.iFld = (44105 % i11);
                i11 = (i10 / -27698);
                i11 = (-3043 / Test.iFld);
            } catch (ArithmeticException a_e) {}
        }
        vMeth_check_sum += l1 + i10 + i11 + s1 + i12 + by + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth(int i3) {

        int i13=-26552, i14=21166, i15=-4, i16=2;
        short s2=-30696;
        long l2=-141L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 6471863290281761830L);

        Test.iArrFld[(i3 >>> 1) % N] &= iMeth1();
        for (long l : lArr1) {
            double d2=-65.62689;
            vMeth(Test.instanceCount);
            switch ((((i3 >>> 1) % 8) * 5) + 31) {
            case 46:
                if (Test.bFld) {
                    for (i13 = 1; i13 < 4; ++i13) {
                        Test.iArrFld[i13] *= -57911;
                        s2 <<= (short)-12;
                        Test.iFld *= i14;
                        Test.bFld = Test.bFld;
                    }
                    i3 >>= i14;
                    i14 = i3;
                    for (i15 = 1; i15 < 4; ++i15) {
                        Test.bFld = Test.bFld;
                        l2 += -15198;
                    }
                } else {
                    d2 += -42445;
                }
                break;
            case 52:
                Test.fFld -= i14;
                break;
            case 56:
                Test.instanceCount *= 44809L;
                break;
            case 49:
                l2 >>= 40138;
                break;
            case 54:
                d2 = 49161;
                break;
            case 65:
                i16 %= (int)(i16 | 1);
                break;
            case 67:
            case 38:
                i14 = (int)l2;
                break;
            default:
            }
        }
        long meth_res = i3 + i13 + i14 + s2 + i15 + i16 + l2 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-6, i2=9, i17=-57454, i18=3, i19=3, i20=-3, i21=44, iArr[]=new int[N];
        float f=0.320F;
        double d3=-74.14201;
        byte by1=69;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -45927);
        FuzzerUtils.init(lArr, 15832L);

        iArr[(i >>> 1) % N] = (-i);
        i = (int)((++lArr[(i >>> 1) % N][(i >>> 1) % N]) * f);
        i = (((i + 10) - Integer.reverseBytes(-68)) * i);
        for (i1 = 7; i1 < 361; ++i1) {
            f += (-12 + (i1 * i1));
            iArr[i1 + 1] = 28828;
            iArr[i1] = (int)(i1 - (iMeth(-34) - Test.instanceCount));
            i2 -= i2;
            i17 = 1;
            while (++i17 < 71) {
                Test.iFld = i2;
                for (i18 = 1; i18 < 1; ++i18) {
                    i19 <<= (int)Test.instanceCount;
                    try {
                        iArr[i17 - 1] = (29301 / i);
                        iArr[i17 + 1] = (i20 % -30);
                        i19 = (148 / i19);
                    } catch (ArithmeticException a_e) {}
                    switch (((i >>> 1) % 8) + 125) {
                    case 125:
                        Test.iFld = (int)-1711634521L;
                        break;
                    case 126:
                        d3 = 3436562268L;
                        break;
                    case 127:
                    case 128:
                        i20 *= (int)Test.instanceCount;
                        Test.instanceCount >>= i19;
                        Test.instanceCount = Test.sFld;
                        if (Test.bFld) {
                            Test.instanceCount >>= i1;
                            d3 = i;
                            if (true) {
                                Test.instanceCount += Test.sFld;
                                iArr[i17 - 1] = (int)Test.instanceCount;
                                Test.sFld += (short)(((i18 * i18) + i19) - Test.instanceCount);
                                switch ((i1 % 2) + 38) {
                                case 38:
                                    iArr[i17 + 1] = i20;
                                    Test.instanceCount = 109;
                                    Test.iFld = i19;
                                    break;
                                case 39:
                                    i2 += (((i18 * i) + Test.instanceCount) - Test.instanceCount);
                                    break;
                                default:
                                    i21 += (((i18 * Test.iFld) + Test.instanceCount) - i20);
                                }
                            }
                        } else {
                            Test.fFld = i20;
                        }
                        break;
                    case 129:
                        lArr[i1] = lArr[i17 - 1];
                        break;
                    case 130:
                        Test.fFld += Test.instanceCount;
                        break;
                    case 131:
                        by1 += (byte)(i18 * Test.instanceCount);
                        break;
                    case 132:
                        d3 = 59148;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
