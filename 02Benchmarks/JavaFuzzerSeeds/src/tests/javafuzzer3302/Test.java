package tests.javafuzzer3302;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:45:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static int iFld=209;
    public volatile double dFld=0.69639;
    public static int iFld1=3;
    public static volatile short sFld=-29746;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 18);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(float f1) {

        int i13=3, i14=5, i15=36039, i16=-62638, i17=-12, i18=-65113, iArr1[][]=new int[N][N];
        short s=-26488;
        double d1=-1.49698;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 8);
        FuzzerUtils.init(lArr, 385726028825612333L);

        i13 = i13;
        i13 = s;
        f1 = Test.instanceCount;
        iArr1[(i13 >>> 1) % N][(i13 >>> 1) % N] += i13;
        for (d1 = 11; d1 < 381; ++d1) {
            Test.instanceCount ^= i13;
            f1 += (float)(d1 + i15);
            for (i16 = 1; i16 < 5; i16++) {
                i18 = 1;
                while (++i18 < 2) {
                    i13 += i18;
                    i14 *= i13;
                    try {
                        i14 = (i13 % i14);
                        i14 = (i18 % 73);
                        i17 = (-130 % iArr1[i16][(i18 >>> 1) % N]);
                    } catch (ArithmeticException a_e) {}
                    i13 += (int)Test.instanceCount;
                    lArr[i18] += i15;
                    Test.instanceCount <<= 139L;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i13 + s + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + i18
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i7, byte by) {

        int i8=1, i9=-51818, i10=-91, i11=-55937, i12=-16382, iArr[]=new int[N];
        boolean b=false;
        double d2=72.38874;

        FuzzerUtils.init(iArr, 135);

        for (i8 = 327; i8 > 8; i8 -= 2) {
            i10 = 1;
            do {
                float f=2.950F;
                switch ((i8 % 1) + 46) {
                case 46:
                    i7 += (((i10 * f) + Test.instanceCount) - f);
                    for (i11 = 1; i11 > 1; --i11) {
                        iArr = iArr;
                        i7 = (int)lMeth1(f);
                        if (b) continue;
                    }
                    i12 -= (int)Test.instanceCount;
                    i9 += (((i10 * f) + f) - i11);
                }
                b = false;
                i12 += i10;
                iArr[i8] ^= i8;
                f *= f;
                i9 += (int)d2;
            } while (++i10 < 10);
        }
        long meth_res = i7 + by + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i3, double d, int i4) {

        int i5=-41890, i6=-162, i19=2, i20=0, i21=41, i22=-51718;
        byte by1=-112;
        float f2=31.601F;

        for (i5 = 4; i5 < 358; ++i5) {
            i4 -= (int)(((Test.instanceCount + Test.instanceCount) * (i6 / (i3 | 1))) - i5);
            lMeth(i3, by1);
        }
        for (i19 = 4; i19 < 171; ++i19) {
            i3 -= i20;
            i6 = (int)2.75105;
            i20 >>= (int)Test.instanceCount;
            Test.instanceCount += (i19 * i19);
            Test.iArrFld[i19] >>= (int)Test.instanceCount;
            f2 += i20;
        }
        i3 = (int)Test.instanceCount;
        for (i21 = 10; i21 < 261; ++i21) {
            i3 *= i3;
            f2 += i21;
            Test.iFld /= (int)(i4 | 1);
        }
        vMeth_check_sum += i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + by1 + i19 + i20 + Float.floatToIntBits(f2)
            + i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        int i=-12802, i1=-6, i2=13, i23=-12, i24=0, i25=4, i26=4, i27=-1, i28=0;
        float f3=75.467F;
        boolean b1=false;
        long lArr1[][]=new long[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr1, 18311L);
        FuzzerUtils.init(byArr, (byte)-116);

        i += i;
        for (i1 = 11; 398 > i1; i1++) {
            i2 *= i1;
            vMeth(50, dFld, i2);
            Test.iArrFld[i1 + 1] += i1;
        }
        lArr1[(Test.iFld >>> 1) % N][(i >>> 1) % N] -= (long)dFld;
        i = Test.iFld;
        f3 += i2;
        i >>= i;
        Test.instanceCount += i2;
        for (i23 = 377; i23 > 14; i23 -= 2) {
            Test.instanceCount -= i23;
            Test.iArrFld[i23] = (int)Test.instanceCount;
            if (b1) break;
            Test.instanceCount *= (long)dFld;
            for (i25 = 2; i25 < 139; ++i25) {
                byte by2=-96;
                by2 -= (byte)Test.instanceCount;
                by2 = (byte)i25;
                Test.instanceCount = i;
                Test.iArrFld[i23] = Test.iFld1;
                for (i27 = i23; 2 > i27; i27 += 2) {
                    i = Test.iFld1;
                    switch (((41 >>> 1) % 9) + 99) {
                    case 99:
                        i26 -= (int)Test.instanceCount;
                        i26 = (int)f3;
                        f3 = Test.instanceCount;
                        break;
                    case 100:
                        Test.iFld = Test.iFld;
                        break;
                    case 101:
                        dFld = i24;
                        Test.instanceCount += Test.instanceCount;
                        dFld = i;
                        break;
                    case 102:
                        lArr1[i25][i25 - 1] |= Test.iFld;
                    case 103:
                        byArr[i25] = by2;
                    case 104:
                        i28 = (int)-4.521F;
                        break;
                    case 105:
                        Test.iArrFld[i25 - 1] += by2;
                        break;
                    case 106:
                        Test.instanceCount <<= 41;
                        break;
                    case 107:
                        Test.instanceCount = Test.sFld;
                        break;
                    default:
                        by2 += (byte)i27;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
