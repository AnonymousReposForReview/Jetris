package tests.javafuzzer3262;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:03:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-10L;
    public static byte byFld=75;
    public static volatile int iFld=8;
    public double dFld=-31.84293;
    public int iFld1=-12;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 23861);
        FuzzerUtils.init(Test.lArrFld, -54L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, float f2) {

        int i8=58091, i9=-8, i10=-11, i11=13, i12=-26, i13=11, i14=-12, iArr[]=new int[N];
        double d=40.117706, dArr[]=new double[N];
        boolean b2=false;
        short s=-5749;

        FuzzerUtils.init(iArr, -52919);
        FuzzerUtils.init(dArr, 2.69544);

        i8 /= (int)(i8 | 1);
        i9 = 1;
        while (++i9 < 234) {
            i8 ^= i8;
            i8 ^= (int)Test.instanceCount;
        }
        for (d = 1; 192 > d; d++) {
            for (i11 = 1; 8 > i11; ++i11) {
                iArr[i11 + 1] <<= (int)Test.instanceCount;
                if (b2) continue;
                for (i13 = 2; 1 < i13; i13 -= 3) {
                    s *= (short)l;
                    i12 += (int)(2.334F + (i13 * i13));
                    l += (-47766 + (i13 * i13));
                    if (false) {
                        dArr[i13] = l;
                    } else {
                        Test.byFld += (byte)i12;
                    }
                }
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f2) + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 + i12 + (b2
            ? 1 : 0) + i13 + i14 + s + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(boolean b1, int i3, float f1) {

        int i4=-37, i5=-16481, i6=-16157, i7=1, i15=66, i16=123, i17=2938, i18=-7, i19=44008, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -34724);

        for (i4 = 21; i4 < 367; ++i4) {
            for (i6 = 1; i6 < 5; i6++) {
                vMeth1(16402L, f1);
                i15 = 1;
                do {
                    i7 = (int)-22421L;
                    f1 *= i4;
                    Test.instanceCount = i4;
                    try {
                        i7 = (i15 % 25154);
                        i3 = (-39932 % iArr1[i4 - 1]);
                        i7 = (23330 / i4);
                    } catch (ArithmeticException a_e) {}
                    i5 -= i16;
                    Test.instanceCount += (((i15 * Test.instanceCount) + i6) - i7);
                    try {
                        i16 = (iArr1[i4 - 1] / iArr1[i6 + 1]);
                        iArr1[i4 - 1] = (26 / iArr1[i4 + 1]);
                        i16 = (iArr1[i6] / i17);
                    } catch (ArithmeticException a_e) {}
                    i5 += i15;
                } while (++i15 < 2);
                for (i18 = 2; i18 > 1; i18--) {
                    Test.byFld = (byte)106;
                    Test.instanceCount += (((i18 * i3) + i5) - i6);
                }
            }
        }
        long meth_res = (b1 ? 1 : 0) + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i15 + i16 + i17 + i18 + i19
            + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, boolean b, float f) {

        int i1=-33466, i2=-143;
        byte by=4;
        double d1=-100.114638;

        for (i1 = 16; i1 < 291; ++i1) {
            by += (byte)((-(i2 - i)) * lMeth(b, i, 0.15F));
            Test.iArrFld = FuzzerUtils.int2array(N, (int)56206);
            i2 += (((i1 * Test.instanceCount) + i) - i);
            Test.iArrFld[i1 - 1] = Test.iArrFld[i1];
            by = (byte)i1;
        }
        f *= i;
        f = i2;
        i = (int)d1;
        Test.iArrFld[(i1 >>> 1) % N][(i2 >>> 1) % N] = (int)-25931L;
        vMeth_check_sum += i + (b ? 1 : 0) + Float.floatToIntBits(f) + i1 + i2 + by + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        boolean b3=true;
        float f3=1.785F;
        int i20=-164, i21=28496, i22=5, i23=56678, i24=14, i25=-11, i26=46625, i27=-211, i28=3;
        long l2=-3296176202L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-30739);

        vMeth(14, b3, f3);
        for (long l1 : Test.lArrFld) {
            i20 = 1;
            while (++i20 < 63) {
                Test.iFld += (18939 + (i20 * i20));
                Test.iFld *= -1;
                Test.iFld <<= i20;
            }
            try {
                Test.iFld = (i20 / -231);
                Test.iFld = (i20 % 160);
                Test.iArrFld[(i21 >>> 1) % N][(-13 >>> 1) % N] = (21410 % i21);
            } catch (ArithmeticException a_e) {}
            b3 = b3;
            for (i22 = 3; i22 < 63; ++i22) {
                i23 -= 21294;
                i23 += (i22 | Test.instanceCount);
                for (i24 = i22; 2 > i24; i24++) {
                    i23 ^= (int)Test.instanceCount;
                    Test.iFld = (int)dFld;
                    Test.iFld += (i24 * i24);
                    i26 += (i24 * i24);
                    sArr[i24] = (short)Test.instanceCount;
                    i21 += i21;
                    f3 *= Test.instanceCount;
                    i23 /= (int)(l1 | 1);
                    i25 = Test.iFld;
                    dArrFld[i24 + 1] -= 15161;
                }
                i27 = 1;
                while (++i27 < 2) {
                    Test.iArrFld[i22][i27 + 1] -= iFld1;
                    Test.iFld += i27;
                    Test.instanceCount |= Test.instanceCount;
                }
            }
            for (l2 = 63; l2 > 3; --l2) {
                dFld += Test.byFld;
                f3 += (((l2 * i26) + Test.iFld) - i27);
                i28 >>= i21;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
