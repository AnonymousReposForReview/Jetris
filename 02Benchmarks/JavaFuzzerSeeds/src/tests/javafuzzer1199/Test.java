package tests.javafuzzer1199;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:22:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5580507575457964358L;
    public int iFld=-46;
    public float fFld=28.178F;
    public static boolean bFld=true;
    public static int iFld1=13;
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)13575);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, float f2, int i10) {

        int i11=3, i12=10, i13=-213;
        long l1=-8687982361892178774L;

        i10 = i10;
        i10 = i10;
        for (i11 = 12; 264 > i11; ++i11) {
            i12 <<= (int)Test.instanceCount;
            i13 = 1;
            do {
                byte by1=-35;
                by1 += (byte)(-11687 + (i13 * i13));
                i12 += (8271 + (i13 * i13));
                i10 += i13;
                Test.instanceCount >>>= i11;
                Test.instanceCount *= i11;
                i12 = (int)-13L;
                i10 += (((i13 * i10) + l1) - Test.instanceCount);
                if (i10 != 0) {
                }
                i10 = i10;
            } while (++i13 < 6);
            i12 += (i11 * i11);
        }
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + l1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f, int i2) {

        int i3=12207, i4=-1, i5=232, i6=29384, i7=35601, i8=10, i9=-69, iArr[]=new int[N];
        byte by=77;
        long l=-9L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 25938);
        FuzzerUtils.init(lArr, -7060293603241478205L);

        for (i3 = 365; 21 < i3; i3 -= 2) {
            f += (i3 * Test.instanceCount);
            for (i5 = 1; i5 < 9; ++i5) {
                i4 += i5;
                for (i7 = 1; 2 > i7; i7++) {
                    i6 = (-((31776 + (--i2)) * Math.abs(i8)));
                    f += (--Test.instanceCount);
                    switch (((i7 % 2) * 5) + 108) {
                    case 114:
                        i9 += (((i7 * by) + i2) - f);
                        f += (((i7 * f) + i3) - i6);
                        Test.bFld = Test.bFld;
                        i8 = (int)((i9 = iArr[i5]) - ((--lArr[i5]) + (--iArr[i3 - 1])));
                    case 116:
                        l = iMeth(f, f, i9);
                        i2 = -10;
                    default:
                        i8 += i7;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + by + l +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i=-44980, i1=-39324, i15=-6857, iArr1[]=new int[N];
        double d=-90.30314;
        float f3=7.828F, f4=0.266F;
        short s1=18099;

        FuzzerUtils.init(iArr1, 217);

        for (i = 2; i < 127; ++i) {
            vMeth1(1.211F, i);
            i1 = (int)d;
            iArr1 = iArr1;
            for (f3 = 1; f3 < 13; f3++) {
                f4 = Test.instanceCount;
                i1 += (int)(((f3 * i15) + i) - f3);
                try {
                    iArr1[i] = (48 % iArr1[(int)(f3 + 1)]);
                    iArr1[i] = (i1 % 13847);
                    Test.iFld1 = (iArr1[(int)(f3)] % i1);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount *= i1;
                s1 += (short)(((f3 * i) + i1) - s1);
                s1 = (short)i;
                d = i15;
                f4 = -6;
                i15 += i;
                Test.sArrFld[i] ^= (short)-1;
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + i15 +
            Float.floatToIntBits(f4) + s1 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        short s=18395;
        int i16=-140, i17=62025, i18=-13, i19=-8, i20=-2, i21=8, i22=19523, i23=-206, i24=69, i25=-34595, iArr2[]=new
            int[N];
        double d1=69.17501;
        byte by2=94;

        FuzzerUtils.init(iArr2, 242);

        iFld *= (int)(s / ((long)(fFld) | 1));
        vMeth();
        i16 = 1;
        while (++i16 < 342) {
            d1 -= d1;
            Test.instanceCount *= iFld;
            Test.iFld1 = (int)d1;
            iArr2[i16 - 1] += i16;
            for (i18 = 4; i18 < 74; i18++) {
                d1 *= Test.iFld1;
            }
            i17 = i18;
            switch ((i16 % 4) + 102) {
            case 102:
            case 103:
                Test.bFld = Test.bFld;
                break;
            case 104:
            case 105:
                by2 -= (byte)iFld;
                for (i20 = 4; i20 < 74; ++i20) {
                    iArr2[i20] <<= i17;
                    for (i22 = 1; i22 < 2; ++i22) {
                        i17 += (int)Test.instanceCount;
                        try {
                            Test.iFld1 = (iArr2[i22 - 1] % i19);
                            Test.iFld1 = (i23 / i19);
                            i17 = (Test.iFld1 % -4052);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.iFld1 *= i16;
                    iArr2[i20 + 1] += i23;
                    d1 += i17;
                    switch ((i16 % 6) + 2) {
                    case 2:
                        i19 = i19;
                        Test.iFld1 ^= (int)Test.instanceCount;
                        for (i24 = 2; i24 > 1; i24--) {
                            iFld *= i22;
                            Test.iFld1 = i17;
                            iArr2[i20 + 1] <<= i25;
                            Test.iFld1 = s;
                            iFld += (i24 | i19);
                        }
                        break;
                    case 3:
                        i19 += -30;
                        break;
                    case 4:
                        d1 *= -9506L;
                        break;
                    case 5:
                        Test.iFld1 >>= i22;
                        break;
                    case 6:
                        Test.iFld1 += (((i20 * i16) + i23) - i17);
                        break;
                    case 7:
                        i21 -= (int)-94.10046;
                        break;
                    default:
                        i23 += (7 + (i20 * i20));
                    }
                }
                break;
            default:
                i17 += i16;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
