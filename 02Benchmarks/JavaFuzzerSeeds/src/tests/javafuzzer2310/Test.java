package tests.javafuzzer2310;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:02:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9797L;
    public byte byFld=-105;
    public static double dFld=-42.79896;
    public float fFld=-51.925F;
    public static float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.22F);
        FuzzerUtils.init(Test.iArrFld, -3);
        FuzzerUtils.init(Test.byArrFld, (byte)-122);
    }

    public static long fMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(short s, int i9, int i10) {

        int i11=182, i12=-1, i13=8673, i14=14;

        Test.fArrFld[(i10 >>> 1) % N][(62204 >>> 1) % N] = Test.instanceCount;
        for (i11 = 2; i11 < 231; i11++) {
            float f1=1.974F;
            if (false) continue;
            i10 = i9;
            i10 = i12;
            Test.instanceCount -= (long)f1;
        }
        Test.iArrFld = Test.iArrFld;
        Test.iArrFld[(i12 >>> 1) % N] = (int)Test.instanceCount;
        for (i13 = 22; i13 < 372; ++i13) {
            i12 -= i13;
            Test.byArrFld[i13 - 1] += (byte)Test.instanceCount;
            i14 += i13;
            i9 = -53137;
            Test.dFld *= i14;
        }
        i9 <<= -83;
        long meth_res = s + i9 + i10 + i11 + i12 + i13 + i14;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static short sMeth(float f, int i8) {

        short s1=28374;

        i8 -= (int)lMeth(s1, i8, i8);
        long meth_res = Float.floatToIntBits(f) + i8 + s1;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static float fMeth(int i5, long l) {

        int i6=-6, i7=55577, i15=249, i16=13, i17=-223;
        float f2=1.396F;
        byte by=0;

        for (i6 = 16; 362 > i6; ++i6) {
            sMeth(f2, i5);
            i15 = 1;
            do {
                i7 += (((i15 * i15) + i6) - by);
                for (i16 = 1; i16 > 1; i16 -= 2) {
                    int i18=-54862;
                    short s2=-22560;
                    i17 += (((i16 * i6) + i7) - i16);
                    try {
                        i17 = (Test.iArrFld[i6] % 11389);
                        i7 = (i17 / 93);
                        i18 = (i18 % i17);
                    } catch (ArithmeticException a_e) {}
                    f2 += (-119 + (i16 * i16));
                    switch ((i16 % 2) + 84) {
                    case 84:
                        switch ((i15 % 2) + 28) {
                        case 28:
                            f2 += i16;
                            switch (((i15 % 2) * 5) + 95) {
                            case 103:
                                f2 -= i6;
                                i7 += -50126;
                                i7 += (i16 * Test.instanceCount);
                                break;
                            case 98:
                                i7 >>>= s2;
                                break;
                            }
                            break;
                        case 29:
                            try {
                                i18 = (61973 / i7);
                                i18 = (i16 % i7);
                                i5 = (i6 / 42913);
                            } catch (ArithmeticException a_e) {}
                        default:
                            Test.iArrFld = Test.iArrFld;
                        }
                        break;
                    case 85:
                        l += (i16 * i16);
                    }
                }
            } while (++i15 < 5);
        }
        long meth_res = i5 + l + i6 + i7 + Float.floatToIntBits(f2) + i15 + by + i16 + i17;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-241, i1=126, i2=13, i3=31799, i4=-41, i19=53770, i20=57749, i21=253, i22=-10, i23=-5;
        float f3=-83.739F;

        i = 1;
        while (++i < 254) {
            for (i1 = 3; i1 < 99; i1++) {
                for (i3 = i; i3 < 2; ++i3) {
                    i2 = (int)(i2 >>>= (int)(byFld - (-16216L - Integer.reverseBytes(10))));
                    i2 = i3;
                    Test.instanceCount *= (long)(Test.instanceCount + fMeth(i19, Test.instanceCount));
                    Test.instanceCount = i2;
                    switch ((i1 % 2) + 67) {
                    case 67:
                        i19 -= i2;
                        i4 += (i3 * i3);
                    case 68:
                        i19 |= i4;
                        Test.instanceCount += (i3 * i3);
                        Test.iArrFld[i - 1] = (int)-2097618939113869719L;
                        break;
                    }
                    fFld = byFld;
                }
                try {
                    i20 = (515078835 % i);
                    Test.iArrFld[i1] = (i2 % i3);
                    i4 = (-1412960218 % Test.iArrFld[i - 1]);
                } catch (ArithmeticException a_e) {}
                for (f3 = 1; f3 < 2; f3++) {
                    fFld += (f3 + i2);
                    Test.instanceCount = i19;
                    Test.dFld = i;
                    Test.instanceCount -= 2;
                    Test.fArrFld[i1 + 1][(int)(f3 + 1)] *= (float)-47.23517;
                    Test.instanceCount -= Test.instanceCount;
                    i19 = i1;
                    Test.instanceCount <<= Test.instanceCount;
                }
                i4 += i1;
                for (i22 = 1; 2 > i22; i22++) {
                    i2 *= (int)Test.instanceCount;
                    Test.byArrFld[i22 + 1] = (byte)i;
                    i19 = 13;
                    i21 -= 19457;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  sMeth ->  sMeth fMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
