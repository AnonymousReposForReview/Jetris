package tests.javafuzzer1370;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:01:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=40052L;
    public static double dFld=0.5041;
    public static int iFld=-12;
    public static int iFld1=-1148;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6261688944864342836L);
        FuzzerUtils.init(Test.iArrFld, 96);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f2, long l1) {

        int i6=-7, i7=-8, i8=47, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -50248);

        i6 = 313;
        do {
            Test.instanceCount = i6;
            Test.dFld = Test.dFld;
            Test.lArrFld[i6] <<= -108;
            if (false) {
                l1 += (109 + (i6 * i6));
                switch ((((i6 >>> 1) % 4) * 5) + 68) {
                case 71:
                    Test.iFld -= (int)f2;
                    Test.iFld += i6;
                case 79:
                    Test.instanceCount += i6;
                    i7 = 1;
                    do {
                        i8 = 1;
                        while (--i8 > 0) {
                            if (b1) continue;
                            f2 /= (Test.instanceCount | 1);
                            Test.iFld *= i7;
                        }
                    } while (++i7 < 15);
                case 85:
                case 86:
                    Test.iFld += i6;
                    break;
                default:
                    Test.dFld = f2;
                }
            }
        } while ((i6 -= 3) > 0);
        vMeth1_check_sum += Float.floatToIntBits(f2) + l1 + i6 + i7 + i8 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f1, int i3, long l) {

        int i4=7, i5=-1319, i10=3, i11=151, i12=59888, i13=-30825;

        i3 *= Math.max(-(i3 - i3), ++Test.iFld);
        for (i4 = 8; 243 > i4; ++i4) {
            vMeth1(f1, -2289090077088958143L);
            for (i10 = 1; i10 < 7; ++i10) {
                for (i12 = 1; i12 < 2; i12++) {
                    Test.iArrFld[i12] = i10;
                    i3 &= -221;
                    Test.dFld -= Test.iFld;
                    i3 -= (int)Test.dFld;
                    i5 = i3;
                    Test.instanceCount >>>= i4;
                    Test.instanceCount += 5L;
                    Test.iFld += Test.iFld;
                    Test.iFld -= (int)Test.instanceCount;
                    Test.lArrFld[i10] = -164;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i3 + l + i4 + i5 + i10 + i11 + i12 + i13;
    }

    public static void vSmallMeth() {

        float f3=2.577F;

        vMeth(f3, 43955, Test.instanceCount);
        vSmallMeth_check_sum += Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=-244, i2=-52, i14=-6, i15=6, i16=-60325, i17=-160, i18=44823, i19=-198, i20=119, i21=-81,
            i22=-62826;
        float f=118.250F, fArr[]=new float[N];
        boolean b=false;
        byte by=-114;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 5.57507);
        FuzzerUtils.init(fArr, -1.519F);

        for (i = 3; i < 127; ++i) {
            short s=-4935;
            i2 = 1;
            while (++i2 < 202) {
                i1 *= Math.abs(i1--);
                f += i2;
                b = (((b || b) | b) == ((i >= -95) && (Test.instanceCount <= Test.instanceCount)));
                Test.dFld = Test.instanceCount;
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth();
                Test.iFld += i2;
            }
            Test.instanceCount += (i * i1);
            Test.iFld >>>= s;
        }
        for (i14 = 2; 209 > i14; i14++) {
            for (i16 = 2; i16 < 121; ++i16) {
                i1 = Test.iFld;
            }
            Test.iFld *= i16;
            Test.iArrFld[i14] <<= i2;
            for (i18 = 2; i18 < 121; i18 += 3) {
                switch (((i1 >>> 1) % 1) + 30) {
                case 30:
                }
            }
            if (b) {
                i15 = -2;
                f = i2;
            }
        }
        by = (byte)i2;
        i17 = (int)Test.instanceCount;
        for (double d : dArr) {
            Test.iFld1 -= by;
            i20 = (int)-25392L;
            i17 = -1;
            for (i21 = 1; i21 < 63; ++i21) {
                Test.iArrFld[i21] = i19;
                try {
                    Test.iArrFld[i21] = (55506 % Test.iArrFld[i21 - 1]);
                    i15 = (i2 / -43);
                    i19 = (35691 % i17);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = i15;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
