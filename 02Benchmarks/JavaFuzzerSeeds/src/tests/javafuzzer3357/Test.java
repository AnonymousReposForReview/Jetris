package tests.javafuzzer3357;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:38:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public int iFld=7;
    public static boolean bFld=false;
    public static volatile short sFld=-20946;
    public static float fFld=-2.963F;
    public volatile double dFld=-2.105243;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, -9.980F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        double d2=0.74545;
        int i4=-65, i5=-7, i6=-185, i7=-8, iArr1[]=new int[N];
        float f1=-104.195F;

        FuzzerUtils.init(iArr1, -8);

        for (int i3 : iArr1) {
            Test.instanceCount += i3;
            i3 -= 95;
        }
        if (Test.bFld) {
            for (d2 = 192; 6 < d2; --d2) {
                double d3=0.93746;
                d3 = f1;
                for (i5 = (int)(d2); i5 < 9; i5++) {
                    if (i5 != 0) {
                        vMeth2_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i4 +
                            Float.floatToIntBits(f1) + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    Test.instanceCount *= i4;
                    i6 &= 17;
                    Test.bFld = Test.bFld;
                    i6 *= i4;
                    iArr1[i5] *= (int)Test.instanceCount;
                    if (Test.bFld) break;
                }
            }
            i7 = -7;
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i4 + Float.floatToIntBits(f1) + i5
            + i6 + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        byte by=86;
        float f2=0.466F;
        int i8=192, i9=13, i10=-16570, i11=193;
        long l1=-4042003794L;

        Test.instanceCount |= (by ^ (Test.instanceCount++));
        vMeth2(f2);
        for (i8 = 12; i8 < 288; ++i8) {
            f2 *= i9;
            Test.instanceCount += (i8 * i8);
            i9 >>= i9;
        }
        l1 = 1;
        while (++l1 < 221) {
            f2 *= -20;
            i9 += (int)(l1 * l1);
            i9 += Test.sFld;
        }
        if (true) {
            for (i10 = 12; 213 > i10; i10++) {
                i9 = (int)l1;
                i11 += i10;
            }
            i11 >>= i8;
        } else {
            i11 = i9;
        }
        vMeth1_check_sum += by + Float.floatToIntBits(f2) + i8 + i9 + l1 + i10 + i11;
    }

    public static void vMeth(long l, int i2, double d1) {

        int i12=-33894, i13=-48729, i14=6, i15=-62, i16=46;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 84.45450);
        FuzzerUtils.init(lArr, 7L);

        dArr = (dArr = (dArr = (dArr = dArr)));
        vMeth1();
        Test.bArrFld[(i2 >>> 1) % N] = Test.bFld;
        i12 = 1;
        while (++i12 < 396) {
            i2 -= (int)Test.instanceCount;
            for (i13 = 1; i13 < 4; ++i13) {
                Test.instanceCount -= Test.instanceCount;
                lArr[i13 - 1] += i12;
                Test.fArrFld[i12 + 1] -= i2;
            }
            l *= -5;
        }
        for (i15 = 4; i15 < 162; i15++) {
            byte by1=71;
            dArr[i15] *= l;
            by1 = (byte)i13;
            if (true) break;
        }
        i14 += (int)Test.instanceCount;
        vMeth_check_sum += l + i2 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d=74.107297, dArr1[]=new double[N];
        int i=-235, i17=-51, i18=-2, i19=159, i20=104, i21=13, i22=34023, i23=21, iArr[]=new int[N];
        float f3=-69.247F, f4=-2.740F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(lArr1, 510325085680801361L);
        FuzzerUtils.init(dArr1, -53.109266);

        iArr[(-1732 >>> 1) % N] += iFld;
        for (d = 7; d < 303; d++) {
            iArr[(int)(d + 1)] *= (int)(--Test.instanceCount);
            vMeth(Test.instanceCount, iFld, d);
            iArr[(int)(d)] = i;
            Test.fFld += (float)(d + i);
            i -= i;
        }
        Test.sFld *= (short)Test.fFld;
        iFld |= i;
        for (i17 = 7; i17 < 168; ++i17) {
            switch (((i17 % 6) * 5) + 11) {
            case 35:
                Test.instanceCount >>= i;
                Test.fFld %= (i17 | 1);
                i19 -= i;
                break;
            case 22:
                Test.instanceCount += i17;
                lArr1[i17] += Test.instanceCount;
                break;
            case 40:
                Test.fFld += 125;
                break;
            case 16:
                dArr1[i17 + 1] = f3;
                i18 -= (int)Test.instanceCount;
            case 41:
                Test.instanceCount += i17;
                for (f4 = 9; f4 < 156; ++f4) {
                    lArr1[i17 - 1] *= Test.instanceCount;
                }
                Test.instanceCount = i20;
                for (i21 = 6; i21 < 156; ++i21) {
                    if (true) continue;
                    i22 = i22;
                    i23 = 1;
                    while ((i23 += 2) < 2) {
                        dFld -= Test.instanceCount;
                        i19 += (int)1.755F;
                    }
                    i20 += i20;
                }
                break;
            case 37:
                Test.instanceCount = Test.instanceCount;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
