package tests.javafuzzer1842;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:25:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1646L;
    public static short sFld=-4029;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -122);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, double d1) {

        byte by1=65;
        short s2=-21547;
        int i7=14, i8=6, i9=215, iArr1[]=new int[N];
        float f3=1.459F;

        FuzzerUtils.init(iArr1, 135);

        by1 -= (byte)s2;
        for (i7 = 2; i7 < 285; ++i7) {
            i8 = i8;
            iArr1[i7] = i6;
            Test.instanceCount -= i8;
            f3 += Test.instanceCount;
            i6 = (int)d1;
            i9 = 1;
            while (++i9 < 6) {
                i8 += (((i9 * i9) + i9) - i9);
            }
            Test.instanceCount += (i7 * i7);
        }
        iArr1[(i9 >>> 1) % N] = i9;
        i6 = 226;
        vMeth_check_sum += i6 + Double.doubleToLongBits(d1) + by1 + s2 + i7 + i8 + Float.floatToIntBits(f3) + i9 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth1(int i3, double d, int i4) {

        float f1=-1.936F, f2=-124.918F;
        int i5=-16, iArr2[]=new int[N];
        double d2=0.94184;
        byte by2=55;

        FuzzerUtils.init(iArr2, 3);

        i4 |= (int)((i3 * (f1 + i4)) * ((i4 * i4) + Math.max(i4, i3)));
        for (f2 = 6; f2 < 307; f2++) {
            vMeth(i3, d);
            iArr2[(int)(f2)] = -40385;
        }
        d2 = 1;
        while (++d2 < 373) {
            i4 += Test.sFld;
            i3 += i4;
            iArr2[(int)(d2 + 1)] *= i5;
            iArr2 = iArr2;
            i4 += (int)Test.instanceCount;
            i3 = i3;
            by2 += (byte)f1;
            Test.instanceCount = i5;
            Test.instanceCount >>>= Test.instanceCount;
        }
        i5 += i4;
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i5
            + Double.doubleToLongBits(d2) + by2 + FuzzerUtils.checkSum(iArr2);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i1, byte by, int i2) {

        float f=102.78F, f4=-1.423F;
        short s1=207;
        int i12=-8, i13=-5, i14=-10, i15=12548, i16=-6839, i17=2;
        double d3=0.76982;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 439757123L);

        if ((20 + lMeth1(i1, -85.66366, i2)) <= Test.instanceCount) {
            f -= (--s1);
        } else {
            i12 -= i2;
            for (i13 = 7; i13 < 316; ++i13) {
                i2 -= i1;
                for (i15 = 1; i15 < 5; ++i15) {
                    try {
                        i16 = (Test.iArrFld[i15 - 1] / -62);
                        i12 = (281008226 % i1);
                        Test.iArrFld[i15 - 1] = (22 / i14);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i15] = (int)d3;
                    for (f4 = 1; f4 < 2; f4++) {
                        switch ((int)((f4 % 1) + 123)) {
                        case 123:
                            i17 <<= 33568;
                            Test.instanceCount -= Test.instanceCount;
                            s1 -= (short)f;
                            Test.instanceCount -= (long)d3;
                            break;
                        default:
                            i17 = -198;
                        }
                    }
                }
            }
        }
        long meth_res = i1 + by + i2 + Float.floatToIntBits(f) + s1 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d3) + Float.floatToIntBits(f4) + i17 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=29667;
        int i=23, i18=130, i19=-8041, i20=2, i21=-63, i22=0, i23=11, i24=-35496, i25=167, iArr[]=new int[N];
        byte by3=-28;
        float f5=0.752F, f6=-44.627F;
        boolean b=false;
        double d4=14.22794;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -168);
        FuzzerUtils.init(lArr1, 1962638118290295802L);

        s = (short)(((i--) / ((++iArr[(i >>> 1) % N]) | 1)) - lMeth(i, by3, -13));
        Test.iArrFld[(i >>> 1) % N] = (int)Test.instanceCount;
        for (i18 = 11; i18 < 185; i18++) {
            i20 = 1;
            while (++i20 < 144) {
                i = i20;
                i <<= i18;
            }
            iArr[i18 + 1] = i20;
        }
        i19 += (int)f5;
        i21 = 1;
        while ((i21 += 3) < 268) {
            i19 += i21;
            if (b) continue;
            i19 += i21;
            Test.iArrFld[i21 + 1] = 34013;
        }
        lArr1[(i19 >>> 1) % N] -= (long)f5;
        for (i22 = 11; i22 < 249; ++i22) {
            i -= (int)-89.805F;
            by3 = (byte)13;
            f6 = 1;
            do {
                i19 = i22;
                for (i24 = 1; i24 < 1; ++i24) {
                    i19 += (i24 ^ Test.instanceCount);
                    dArrFld[i22 + 1] += i18;
                    d4 -= i19;
                    if (b) continue;
                    i25 -= 24;
                    Test.iArrFld[(int)(f6 - 1)] -= i22;
                    Test.instanceCount += i24;
                    Test.instanceCount += (i24 - Test.instanceCount);
                    Test.instanceCount -= i24;
                }
                i19 += (int)f6;
            } while (++f6 < 106);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
