package tests.javafuzzer650;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:25:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static float fFld=102.883F;
    public static boolean bFld=false;
    public short sFld=-9706;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.95837);
        FuzzerUtils.init(Test.lArrFld, -934L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i14, short s, int i15) {

        int i16=103, i17=-134, i18=-205, i19=22302, i20=37, iArr1[][]=new int[N][N];
        double d1=2.15033;

        FuzzerUtils.init(iArr1, -30557);

        for (i16 = 13; i16 < 208; ++i16) {
            i18 = 1;
            while (++i18 < 8) {
                Test.fFld -= -2;
                i14 += (i18 * i15);
                iArr1[i18][(i18 >>> 1) % N] = i16;
                if (Test.bFld) break;
                for (i19 = i18; i19 < 1; i19++) {
                    i17 += i19;
                    i14 = i18;
                    i15 -= (int)1.620F;
                    i20 = (int)1.56332;
                    d1 = 0.15293;
                }
                if (Test.bFld) break;
                i20 |= i16;
            }
            if (Test.bFld) break;
        }
        long meth_res = i14 + s + i15 + i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i7, long l1) {

        int i8=12, i9=35, i10=57, i11=56764, i12=-11855, i13=248, iArr[]=new int[N], iArr2[]=new int[N];
        double d=-72.118444;
        short s1=-21890;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 132);
        FuzzerUtils.init(lArr, -6L);
        FuzzerUtils.init(iArr2, 62249);

        for (i8 = 3; i8 < 123; i8 += 2) {
            switch ((((iArr[i8] >>> 1) % 10) * 5) + 105) {
            case 120:
                i9 += (int)(-l1);
                break;
            case 154:
                i7 *= (int)(++Test.fFld);
            case 112:
                for (i10 = 1; i10 < 26; ++i10) {
                    for (i12 = 1; i12 < 2; i12++) {
                        i7 = -11563;
                        i11 &= (int)l1;
                        d = -11;
                        i7 = (int)(-7 - (iMeth1(-50654, s1, i13) + l1));
                    }
                    i13 = i13;
                    i11 <<= -135;
                }
            case 126:
                lArr[i8 + 1] |= s1;
                lArr[i8 - 1] = s1;
            case 143:
            case 121:
                i11 -= (int)9L;
                break;
            case 152:
                Test.instanceCount &= i9;
                break;
            case 131:
                i9 = i8;
                break;
            case 133:
                iArr2[i8 + 1] = (int)Test.instanceCount;
                break;
            case 119:
                i7 = (int)Test.instanceCount;
                break;
            default:
                i11 += (-41357 + (i8 * i8));
            }
        }
        long meth_res = i7 + l1 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + s1 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        long l=26360L;
        int i2=57930, i3=4907, i4=-12, i5=-7, i6=11, iArr3[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-24779);
        FuzzerUtils.init(iArr3, -81);

        for (l = 12; l < 199; l++) {
            switch ((((Math.min(i2, -87) >>> 1) % 9) * 5) + 56) {
            case 73:
                for (i3 = 1; i3 < 9; ++i3) {
                    for (i5 = 1; i5 < 2; ++i5) {
                        double d2=-1.47217;
                        sArr[i3 + 1] -= (short)iMeth(i2, 581459289L);
                        i2 += (i5 - i3);
                        Test.instanceCount += i5;
                        i4 = i5;
                        Test.fFld *= l;
                        i2 <<= i3;
                        i6 += (((i5 * Test.instanceCount) + l) - i3);
                        d2 = d2;
                    }
                    i6 = i6;
                    Test.fFld += i3;
                    i6 = i6;
                }
                break;
            case 79:
                iArr3[(int)(l)] = i3;
                break;
            case 92:
                i6 = i5;
                break;
            case 63:
            case 71:
                i6 = (int)-63094L;
            case 100:
                iArr3[(int)(l + 1)] += i2;
                break;
            case 91:
                iArr3 = iArr3;
                break;
            case 77:
                if (Test.bFld) continue;
                break;
            case 99:
                Test.dArrFld[(int)(l + 1)] = -71;
            }
        }
        vMeth_check_sum += l + i2 + i3 + i4 + i5 + i6 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=137, i1=-215, i21=20786, i22=-20255, i23=-7, iArr4[][]=new int[N][N];
        double d3=2.14030;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr4, 204);
        FuzzerUtils.init(fArr, -1.155F);

        Test.instanceCount *= (i++);
        i -= (int)Test.instanceCount;
        i1 = 344;
        while (--i1 > 0) {
            vMeth();
            i += i;
            for (d3 = 4; d3 < 73; ++d3) {
                iArr4[i1 + 1][i1 - 1] = 31015;
                Test.fFld -= -40553L;
                for (i22 = 1; i22 < 2; i22++) {
                    fArr[i1] = 109;
                    iArr4[i1][i22 - 1] -= sFld;
                    fArr[i22] += i22;
                    if (Test.bFld) break;
                    switch (((i >>> 1) % 5) + 2) {
                    case 2:
                        Test.instanceCount = Test.instanceCount;
                        switch ((i22 % 1) + 58) {
                        case 58:
                            i21 &= i1;
                            break;
                        default:
                            Test.instanceCount = Test.instanceCount;
                            i &= (int)Test.instanceCount;
                            Test.lArrFld[i1 - 1] >>= i1;
                        }
                    case 3:
                        Test.instanceCount -= i22;
                        if (false) break;
                    case 4:
                        i23 += (int)Test.fFld;
                        iArr4[i22][i1 - 1] = i23;
                    case 5:
                        i21 = -121;
                        iArr4[i22][i1 - 1] += -39337;
                        break;
                    case 6:
                        Test.bFld = Test.bFld;
                        i21 += i22;
                        if (Test.bFld) break;
                        Test.instanceCount += (-7840163785163895318L + (i22 * i22));
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
