package tests.javafuzzer2571;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:49:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-242L;
    public static float fFld=-103.987F;
    public static long lFld=-6877129416873906035L;
    public volatile double dFld=0.89877;
    public short sFld=30177;
    public static boolean bFld=true;
    public byte byFld=56;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 42840L);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i3=4, i4=-14, i5=122, i6=-35511, i7=169, i8=-4, i9=36980;
        short s1=-32728;
        boolean b=false;
        byte by=-5;
        double d=-109.55952;
        float f2=0.165F;

        Test.lArrFld[(-2 >>> 1) % N][(i3 >>> 1) % N] >>= i4;
        i4 = (int)Test.instanceCount;
        i4 >>= -27;
        s1 = (short)Test.lFld;
        for (i5 = 295; i5 > 18; i5 -= 2) {
            b = b;
            Test.lFld += (((i5 * i5) + by) - i5);
            i4 += i5;
            i6 += (((i5 * Test.lFld) + i6) - Test.instanceCount);
            for (d = 1; d < 11; ++d) {
                Test.instanceCount = i7;
                Test.instanceCount += (long)(d * d);
                for (i8 = i5; i8 < 2; i8++) {
                    i7 += (((i8 * i3) + f2) - i7);
                    f2 = i3;
                }
            }
        }
        long meth_res = i3 + i4 + s1 + i5 + i6 + (b ? 1 : 0) + by + Double.doubleToLongBits(d) + i7 + i8 + i9 +
            Float.floatToIntBits(f2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(short s, long l, int i2) {

        int i10=-2, i11=-40, i12=138, i13=2377, iArr2[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, 21917);
        FuzzerUtils.init(sArr, (short)-32378);

        Test.fFld -= (--iArr2[(i2 >>> 1) % N]);
        l <<= iMeth1();
        for (i10 = 3; 176 > i10; i10++) {
            sArr[i10] = (short)i11;
            switch ((i10 % 2) + 43) {
            case 43:
                iArr2[i10] = (int)Test.lFld;
                i11 *= 1;
                i2 = 192;
            case 44:
                Test.lArrFld[i10][i10] += i11;
                dFld *= -104;
                i11 >>= i2;
            default:
                i2 = 69;
            }
            i12 = 1;
            while (++i12 < 9) {
                i13 = i2;
                Test.instanceCount = i2;
            }
        }
        long meth_res = s + l + i2 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(int i1, float f1) {

        int i14=-137, i15=14, i16=78, i17=-53372, i18=-1, iArr1[]=new int[N];
        long lArr[]=new long[N];
        boolean bArr[][]=new boolean[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(lArr, -213L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, -121.930F);

        Test.instanceCount *= (long)((Math.abs(-26.993F) + (iArr1[(i1 >>> 1) % N]++)) + ((i1++) >> (-121L * iMeth(sFld,
            -718659959L, i1))));
        dFld = i1;
        for (long l1 : lArr) {
            i1 -= i1;
            i1 *= i1;
            for (i14 = 1; i14 < 4; i14++) {
                switch ((i14 % 9) + 27) {
                case 27:
                    iArr1 = iArr1;
                    i1 <<= i1;
                case 28:
                    switch (((-11671 >>> 1) % 10) + 22) {
                    case 22:
                        i16 = 1;
                        do {
                            dFld += i15;
                            i15 += (i16 * i16);
                            i1 /= (int)((long)(f1) | 1);
                            Test.bFld = Test.bFld;
                        } while (++i16 < 2);
                        break;
                    case 23:
                        i1 += (i14 - i17);
                        break;
                    case 24:
                        Test.instanceCount *= i16;
                        break;
                    case 25:
                        i15 = (int)l1;
                        break;
                    case 26:
                    case 27:
                        i15 += i14;
                        break;
                    case 28:
                        iArr1 = FuzzerUtils.int1array(N, (int)-209);
                        break;
                    case 29:
                        Test.bFld = Test.bFld;
                    case 30:
                        if (false) break;
                        break;
                    case 31:
                        Test.lFld += (((i14 * i18) + byFld) - i18);
                        break;
                    default:
                        i17 &= (int)-7L;
                    }
                    break;
                case 29:
                    bArr = bArr;
                    break;
                case 30:
                    if (Test.bFld) continue;
                    break;
                case 31:
                    i15 += (i14 ^ Test.instanceCount);
                    break;
                case 32:
                    iArr1[i14] >>>= 1;
                    break;
                case 33:
                    Test.lFld = -4;
                    break;
                case 34:
                    sFld &= (short)-4850029679330826001L;
                    break;
                case 35:
                    i1 = i14;
                default:
                    fArr[i14 + 1] -= (float)-66.20276;
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-20.963F;
        int i=11, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -37107);

        f = i;
        i -= (--iArr[(-13698 >>> 1) % N]);
        Test.instanceCount *= (long)f;
        dMeth(i, 0.576F);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
