package tests.javafuzzer1392;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:35:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2923446342115755437L;
    public static volatile int iFld=253;
    public static boolean bFld=true;
    public static float fFld=2.247F;
    public static short sFld=-877;
    public static long lFld=2898626756202601612L;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
        FuzzerUtils.init(Test.fArrFld, 2.724F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i9, int i10, int i11) {

        int i12=8, i13=-13, i14=-253, i15=8, i16=55818;
        float f2=-1.300F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 3.388F);

        i12 = 194;
        do {
            for (i13 = 1; i13 < 8; ++i13) {
                byte by=98;
                fArr[i12 + 1] -= i14;
                i14 = -118;
                Test.instanceCount <<= -57345;
                f2 -= Test.instanceCount;
                Test.instanceCount += (((i13 * i9) + f2) - i11);
                by += (byte)Test.instanceCount;
                for (i15 = 1; i15 < 2; i15++) {
                    i11 += -123;
                    Test.iArrFld[i13] = i14;
                    Test.iFld -= (int)68.334F;
                    f2 = i16;
                    f2 += i14;
                    Test.instanceCount = (long)f2;
                }
            }
        } while (--i12 > 0);
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l) {

        float f=-74.418F, f1=2.824F, f3=0.224F;
        double d=0.24806;
        int i5=-62265, i6=-146, i7=-9, i8=-159;
        short s=13757;
        byte by1=-1;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2205047046361536247L);

        Test.iFld = (int)(Test.instanceCount = (long)(f % ((Test.iFld - Test.iFld) | 1)));
        d *= (++d);
        i5 = 1;
        while (++i5 < 349) {
            Test.iFld += Math.min(Test.iArrFld[i5]++, Math.min(i5, i5));
            for (f1 = 1; 5 > f1; f1 += 2) {
                if (Test.bFld) {
                    for (i7 = 1; 3 > i7; i7++) {
                        boolean b=false;
                        i8 = (-248 % (Test.iArrFld[(int)(f1 - 1)] | 1));
                        i6 -= i8;
                        switch ((int)(((f1 % 10) * 5) + 106)) {
                        case 133:
                            i8 *= (int)(Math.max(i8 * i6, lMeth1(i6, 36, i5)) + -13552);
                            Test.iArrFld[i7 + 1] *= (int)f;
                            if (b) {
                                l <<= s;
                                i8 <<= i8;
                            } else {
                                i8 -= i7;
                            }
                        case 126:
                            Test.iFld -= i6;
                            break;
                        case 151:
                            lArr = lArr;
                            break;
                        case 155:
                            i8 += (i7 * i7);
                        case 154:
                            by1 += (byte)i7;
                            break;
                        case 144:
                            i6 += (-19 + (i7 * i7));
                            break;
                        case 111:
                            s = (short)i7;
                        case 121:
                            i6 %= (int)((long)(f3) | 1);
                            break;
                        case 129:
                        case 107:
                            i6 = (int)l;
                            break;
                        }
                    }
                } else {
                    i6 = (int)f;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) +
            i6 + i7 + i8 + s + by1 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr);
    }

    public long lMeth(int i2, int i3, int i4) {

        double d1=79.82406, d2=-15.9977;
        int i17=11, i18=15463, i19=-47512, i20=45101, i21=4;
        byte by2=13;

        i3 -= (int)(-((--Test.instanceCount) - -189L));
        vMeth(Test.instanceCount);
        for (d1 = 20; 387 > d1; ++d1) {
            i17 *= (int)d1;
            i17 -= i2;
            for (i18 = (int)(d1); i18 < 5; ++i18) {
                for (i20 = 1; i20 < 1; i20++) {
                    if (Test.bFld) {
                        Test.instanceCount += Test.iFld;
                    } else if (Test.bFld) {
                        Test.fFld = i20;
                        i21 += (i20 - Test.instanceCount);
                        Test.sFld = (short)i3;
                        if (true) continue;
                    }
                    by2 = (byte)i21;
                    d2 = 56L;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + Double.doubleToLongBits(d1) + i17 + i18 + i19 + i20 + i21 + by2 +
            Double.doubleToLongBits(d2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=118, i1=2, i23=26446, i24=11160, i25=-46291, i26=-2833, i27=-66, i28=141, i29=178;
        byte by3=16;
        double d3=0.57339;

        for (i = 7; i < 336; i++) {
            int i22=23818;
            i1 = (int)lMeth(Test.iFld, i, Test.iFld);
            Test.instanceCount += (((i * i22) + Test.instanceCount) - i22);
            if (true) {
                for (i23 = 1; i23 < 76; i23++) {
                    Test.instanceCount = 35152;
                    Test.iFld = (int)Test.lFld;
                }
                by3 *= (byte)1.24428;
            } else {
            }
            d3 %= (by3 | 1);
            i24 = Test.iFld;
            Test.bFld = Test.bFld;
            switch (((3 >>> 1) % 1) + 84) {
            case 84:
                if (Test.bFld) break;
            }
            for (i25 = 3; i25 < 76; ++i25) {
                i22 += (int)Test.instanceCount;
                if (true) break;
                Test.lFld = -3;
            }
            i27 = 76;
            do {
                i26 = (int)Test.instanceCount;
                if (Test.bFld) {
                    Test.fFld *= 57327;
                    Test.instanceCount -= i24;
                    Test.lFld += i27;
                    Test.fFld -= i;
                } else if (true) {
                    Test.fArrFld[i27 + 1] = by3;
                } else {
                    lArrFld[i] *= -1199035594L;
                    for (i28 = 1; i28 < 1; i28++) {
                        i1 = 0;
                        d3 -= i1;
                        Test.instanceCount = 8;
                    }
                }
            } while (--i27 > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
