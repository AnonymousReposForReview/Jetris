package tests.javafuzzer525;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:17:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2846467222L;
    public static boolean bFld=true;
    public byte byFld=44;

    public static long vSmallMeth_check_sum = 0;
    public static long vSmallMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(long l) {

        int i=1, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 15874);

        Test.instanceCount += Math.min(Math.max((int)(-40685 - (l + -2.829F)), --iArr[(i >>> 1) % N]), i * i);
        vSmallMeth_check_sum += l + i + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(float f, int i4) {

        int i5=3, i6=-136, i7=-7, i8=118, i9=52822, iArr2[]=new int[N];
        byte by=85;
        double d=-51.31402, dArr[]=new double[N];

        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(dArr, -1.16627);

        i4 /= (int)(i4 | 1);
        for (i5 = 10; i5 < 349; ++i5) {
            Test.instanceCount = 3;
            i6 = i4;
            i7 = 1;
            do {
                boolean b=false;
                if (b) break;
                i4 += (((i7 * by) + f) - i6);
                for (i8 = i5; i8 < 1; i8++) {
                    i9 += i8;
                    i9 = (int)d;
                    i6 -= i6;
                    Test.instanceCount = i5;
                    iArr2 = iArr2;
                    i6 = (int)Test.instanceCount;
                    dArr[i7 + 1] -= i9;
                }
            } while (++i7 < 5);
        }
        long meth_res = Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + by + i8 + i9 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i3=-49761, i11=-14089, i12=-31139, i13=46, i14=48995, iArr1[]=new int[N];
        float f1=-1.426F;
        double d1=-2.3111, d2=-110.25163;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 14);
        FuzzerUtils.init(lArr, -8L);

        i3 += Integer.reverseBytes(i3);
        iArr1[(i3 >>> 1) % N] = (int)lMeth(f1, i3);
        i3 += (int)f1;
        lArr[(i3 >>> 1) % N] = -234;
        for (int i10 : iArr1) {
            d1 *= f1;
            i3 = i10;
            i3 += (int)58.11F;
            for (i11 = 1; i11 < 4; i11++) {
                for (i13 = 1; i13 < 2; i13++) {
                    try {
                        i12 = (i13 / -12);
                        i3 = (iArr1[i11] / iArr1[i11]);
                        i14 = (116653320 / i13);
                    } catch (ArithmeticException a_e) {}
                    if (true) continue;
                }
                if (Test.bFld) {
                    i12 = i14;
                    i10 = (int)-4838783077072077803L;
                } else {
                    d2 *= -132L;
                }
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth1() {


        vMeth();
        vSmallMeth1_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i1=-7, i2=212, i15=-12, i16=3, i17=1, i18=-20445, iArr3[]=new int[N];
        short s=6154;
        long l1=2917264512311893518L, lArr1[]=new long[N];
        float f2=0.415F, fArr[]=new float[N];

        FuzzerUtils.init(iArr3, 248);
        FuzzerUtils.init(lArr1, 3113792830L);
        FuzzerUtils.init(fArr, -2.684F);

        for (int smallinvoc=0; smallinvoc<503; smallinvoc++) vSmallMeth(Test.instanceCount++);
        for (i1 = 4; i1 < 314; i1++) {
            i2 += (-116 + (i1 * i1));
            if (Test.bFld) {
                for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth1();
                Test.instanceCount += (i1 * i1);
                s += (short)(i1 - i1);
                iArr3[i1 + 1] = byFld;
            } else if (Test.bFld) {
                for (i15 = 1; i15 < 81; i15++) {
                    i17 = 1;
                    while (++i17 < 2) {
                        i2 -= i1;
                        if (false) continue;
                        if (Test.bFld) break;
                        lArr1[i15] -= i16;
                        Test.instanceCount = i2;
                        i16 -= (int)Test.instanceCount;
                        i16 /= (int)(i2 | 1);
                        i16 = (int)Test.instanceCount;
                        iArr3[i17 + 1] <<= i2;
                        i16 = -121;
                    }
                    for (l1 = 1; l1 < 2; ++l1) {
                        iArr3[i15] += -6133;
                        i16 = i17;
                        i2 += i1;
                        f2 += (((l1 * Test.instanceCount) + i15) - i18);
                        f2 = f2;
                        i16 -= (int)-44.13663;
                        iArr3[i1] *= i17;
                    }
                }
                if (true) break;
            } else if (Test.bFld) {
                fArr = fArr;
            } else {
                byFld += (byte)i1;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vSmallMeth1 ->  vSmallMeth1 mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth1 mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth1 mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
