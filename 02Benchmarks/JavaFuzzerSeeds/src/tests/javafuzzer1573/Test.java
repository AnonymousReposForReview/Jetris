package tests.javafuzzer1573;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:12:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3732L;
    public static int iFld=7;
    public static volatile double dFld=0.86176;
    public static volatile float fFld=-74.458F;
    public static byte byFld=83;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9398);
        FuzzerUtils.init(Test.lArrFld, 3943244957L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=47321, i6=37329, i7=-14, i8=-178, i9=-46276, i10=-40965, i11=-2688;
        byte by=-110;
        float f1=16.140F;
        boolean b1=true;

        Test.iFld = Test.iFld;
        for (i5 = 363; i5 > 18; --i5) {
            by -= (byte)-6;
            switch ((((i7 >>> 1) % 5) * 5) + 23) {
            case 24:
                for (i8 = 5; i8 > i5; i8--) {
                    i6 /= (int)(i9 | 1);
                    Test.lArrFld[i8][i8 + 1] *= (long)f1;
                    if (b1) continue;
                    Test.iArrFld[i8 + 1] = (int)f1;
                }
                break;
            case 29:
                for (i10 = 5; i10 > 1; --i10) {
                    Test.iFld *= (int)f1;
                    Test.instanceCount += (i10 * i10);
                    i6 >>>= 28757;
                    Test.iArrFld[i5] >>= 93;
                }
                Test.iFld += (((i5 * i11) + i11) - i5);
            case 48:
                i9 >>= i11;
            case 39:
                i7 = i8;
                break;
            case 30:
                i11 += i7;
                break;
            }
        }
        vMeth1_check_sum += i5 + i6 + by + i7 + i8 + i9 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i10 + i11;
    }

    public static int iMeth(short s, int i4) {

        int i12=-5341, i13=-133, i14=63680, i15=-8, i16=28775;
        byte by1=17;
        long l1=-6L;
        double d1=-57.20278, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -57.2292);

        vMeth1();
        i12 = 1;
        do {
            Test.fFld += (i12 * i12);
            Test.iArrFld[i12 - 1] >>= Test.iFld;
            dArr[i12 + 1] += by1;
            Test.iFld *= (int)Test.dFld;
        } while (++i12 < 384);
        Test.instanceCount = (long)Test.fFld;
        Test.lArrFld[(i12 >>> 1) % N][(114 >>> 1) % N] = Test.iFld;
        for (l1 = 376; 15 < l1; l1--) {
            for (i14 = (int)(l1); i14 < 5; i14++) {
                i4 += i14;
                for (d1 = 1; d1 > 1; d1--) {
                    i16 += (169 + (d1 * d1));
                    by1 += (byte)(((d1 * i15) + l1) - i13);
                    Test.iArrFld = Test.iArrFld;
                }
            }
        }
        long meth_res = s + i4 + i12 + by1 + l1 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, long l) {

        double d=-1.91381;
        int i1=50896, i2=171, i3=-58796, i17=-1351, i18=12;
        float f=-1.131F;
        boolean b=false;
        short s1=3686;

        for (d = 5; d < 199; ++d) {
            l = (long)(f + ((l++) * i));
            Test.iArrFld[(int)(d + 1)] -= Test.iFld;
            for (i2 = 1; i2 < 8; i2++) {
                b = ((--i3) <= ((++Test.dFld) * (l - i2)));
                l -= (long)((i2 - (Test.dFld + d)) + ((Test.iFld + Test.dFld) + Math.min(l, l)));
                Test.instanceCount -= (iMeth(s1, i1) + 7);
                Test.iArrFld = Test.iArrFld;
                f += (((i2 * i2) + Test.iFld) - i1);
                if (b) continue;
                i1 = (int)Test.instanceCount;
            }
            for (i17 = 1; i17 < 8; i17++) {
                i18 = (int)d;
                Test.iFld <<= -192;
                Test.iArrFld = Test.iArrFld;
            }
        }
        vMeth_check_sum += i + l + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f) + i2 + i3 + (b ? 1 : 0) +
            s1 + i17 + i18;
    }

    public void mainTest(String[] strArr1) {

        int i20=20241, i21=78, i22=-6, i23=-5796, i25=-5, i26=-13;
        float f2=-29.452F;
        short s2=17219;

        Test.instanceCount >>>= Short.reverseBytes((short)((Test.iFld >> Test.iFld) * (--Test.iFld)));
        vMeth(Test.iFld, Test.instanceCount);
        Test.byFld = (byte)-54.184F;
        for (int i19 : Test.iArrFld) {
            for (i20 = 2; 63 > i20; ++i20) {
                Test.instanceCount = -20254;
                i19 += (i20 + i21);
                i21 += i19;
                f2 += i20;
                f2 += i20;
                for (i22 = 1; i22 < 2; ++i22) {
                    int i24=3;
                    i21 += i22;
                    i19 = i19;
                    s2 = Test.byFld;
                    i24 -= i23;
                    fArrFld = fArrFld;
                    Test.instanceCount *= 109L;
                    Test.instanceCount ^= 70;
                    try {
                        Test.iArrFld[i22] = (Test.iFld % -31951);
                        i19 = (Test.iArrFld[i22] / i22);
                        i19 = (161 / Test.iArrFld[(i20 >>> 1) % N]);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i20 + 1] *= i19;
                }
                fArrFld[i20 + 1][i20 - 1] = i23;
            }
            Test.iFld += Test.byFld;
            Test.iArrFld[(i20 >>> 1) % N] >>= -21312;
            i19 -= Test.iFld;
            if (false) continue;
            Test.dFld -= i19;
            for (i25 = 1; i25 < 63; i25++) {
                Test.instanceCount = i25;
            }
        }
        i26 = (int)Test.dFld;
        Test.instanceCount -= i23;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
