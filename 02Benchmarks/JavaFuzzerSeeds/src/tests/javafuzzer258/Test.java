package tests.javafuzzer258;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public double dFld=2.117265;
    public static long lArrFld[]=new long[N];
    public float fArrFld[][]=new float[N][N];
    public volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3045973842117081160L);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1) {

        int i7=-42923, i8=-11, i9=12187, i10=161;
        float f1=-1.423F, f2=2.865F;
        byte by2=54;
        boolean b1=false;

        i7 <<= i7;
        try {
            i8 = 246;
            do {
                i7 += i8;
            } while (--i8 > 0);
            i9 = 1;
            do {
                try {
                    i7 = (-32 % i7);
                    i7 = (i7 % i9);
                    i7 = (i8 / i9);
                } catch (ArithmeticException a_e) {}
                for (f1 = 1; f1 < 7; f1++) {
                    i7 += (int)(f1 * f1);
                    i7 += (int)(f1 * by2);
                    i10 -= (int)31.48170;
                    l1 += (long)(f1 + i8);
                    f2 = i10;
                    i7 -= (int)Test.instanceCount;
                    Test.instanceCount = i10;
                }
                b1 = b1;
            } while (++i9 < 219);
        }
        catch (ArrayIndexOutOfBoundsException exc2) {
            l1 *= i8;
        }
        catch (NegativeArraySizeException exc3) {
            i7 += i8;
        }
        long meth_res = l1 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + by2 + Float.floatToIntBits(f2) + (b1 ? 1 :
            0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public byte byMeth(int i5, int i6) {

        float f3=-2.168F, f4=-1.931F;
        int i11=-3294, i12=92, i13=9900, i14=2;
        boolean b2=false;

        fMeth(Test.instanceCount);
        for (f3 = 14; 312 > f3; ++f3) {
            f4 *= -4088306815L;
            Test.instanceCount -= Test.instanceCount;
            i5 += (int)((long)f3 | i11);
            i6 += 11;
            i6 = (int)1.102742;
            i12 = 1;
            do {
                for (i13 = 1; i13 < 3; ++i13) {
                    Test.instanceCount *= i5;
                    i5 += i5;
                    i14 *= i6;
                    i11 += i13;
                    Test.instanceCount <<= i5;
                    b2 = b2;
                }
            } while ((i12 += 3) < 6);
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f3) + i11 + Float.floatToIntBits(f4) + i12 + i13 + i14 + (b2 ? 1
            : 0);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth(int i4, byte by1, long l) {

        int i15=-195, i16=141, i17=3, i18=-8866, i19=8, iArr[]=new int[N];
        long l2=-118L, l3=-62L;
        double d=-2.29439;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.191F);
        FuzzerUtils.init(iArr, -1);

        l <<= (((i4 + i4) * byMeth(i4, i4)) + -11010);
        Test.lArrFld[(7 >>> 1) % N] -= i15;
        i15 -= i4;
        Test.instanceCount = (long)1.742F;
        for (l2 = 5; l2 < 331; ++l2) {
            for (i17 = 1; 5 > i17; ++i17) {
                fArr[(int)(l2)] -= -972322633L;
                l >>>= by1;
                for (l3 = i17; l3 < 2; ++l3) {
                    i16 -= by1;
                    iArr[(int)(l3 - 1)] = by1;
                    i18 += (int)(l3 ^ i19);
                    iArr[i17 - 1] %= (int)(l3 | 1);
                }
                Test.lArrFld[(int)(l2 + 1)] *= (long)d;
            }
        }
        l = (long)-15.263F;
        vMeth_check_sum += i4 + by1 + l + i15 + l2 + i16 + i17 + i18 + l3 + i19 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=6, i1=30488, i2=-3, i3=-3, i20=3364, i21=40837, i22=-58069, i23=-10, i24=-3, i25=-45475, i26=-20,
            i27=-54, i28=0, iArr1[]=new int[N];
        float f=-6.847F;
        boolean b=true;
        short s=-29029;
        byte by=-24;

        FuzzerUtils.init(iArr1, -247);

        for (i = 4; i < 254; i++) {
            i1 -= (int)((long)((i1 - -2L) * (f - 7)) >> -70);
            i1 += i;
            b = (((i1 - i) - (Test.instanceCount + s)) != ((by += (byte)-5L) % ((Test.instanceCount - i1) | 1)));
            b = (b = b);
        }
        for (i2 = 13; 220 > i2; i2++) {
            vMeth(215, by, -138L);
            iArr1[i2] %= (int)19846L;
            switch ((i2 % 10) + 26) {
            case 26:
                i3 += (int)(1972972707626653254L + (i2 * i2));
                if (b) break;
                break;
            case 27:
                fArrFld[i2][i2 + 1] += f;
                for (i20 = 3; i20 < 121; ++i20) {
                    Test.instanceCount -= i2;
                    Test.lArrFld[i20 - 1] += (long)f;
                    for (i22 = 1; i22 < 2; i22++) {
                        iArr1[i22] -= (int)Test.instanceCount;
                        i1 = i1;
                        b = b;
                    }
                    i21 += (i20 | (long)f);
                    i24 = 1;
                    do {
                        i21 >>= i21;
                    } while (++i24 < 2);
                }
                dArrFld[i2 - 1] -= s;
                f += (i2 + i1);
            case 28:
                for (i25 = 6; i25 < 121; ++i25) {
                    Test.instanceCount = 18;
                }
                for (i27 = i2; i27 < 121; ++i27) {
                    Test.lArrFld[(4 >>> 1) % N] += -10L;
                    i21 = i27;
                    i28 += i28;
                }
                break;
            case 29:
                i23 += (int)f;
            case 30:
                s <<= (short)i3;
                break;
            case 31:
                i21 += (int)Test.instanceCount;
                break;
            case 32:
                i3 += i26;
            case 33:
                iArr1 = FuzzerUtils.int1array(N, (int)-144);
                break;
            case 34:
                Test.lArrFld[i2] = i24;
                break;
            case 35:
                iArr1[i2] <<= i3;
            default:
                dFld *= i1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
