package tests.javafuzzer2958;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:49:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30L;
    public static float fFld=-107.892F;
    public boolean bFld=true;
    public short sFld=4641;
    public byte byFld=-109;
    public static double dFld=-1.40119;
    public static boolean bFld1=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 31883);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i14, float f1) {

        int i15=-42, i16=47442;

        for (i15 = 15; i15 < 312; ++i15) {
            f1 += (((i15 * Test.instanceCount) + i15) - i14);
        }
        long meth_res = i14 + Float.floatToIntBits(f1) + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i12, long l, int i13) {

        int i17=2, i18=0, i19=-9;
        double d1=-2.27069;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-10);

        iMeth(i13, Test.fFld);
        Test.fFld += l;
        Test.instanceCount = i13;
        for (i17 = 7; i17 < 121; i17++) {
            i13 = (int)l;
            i18 = (int)l;
            if (bFld) {
                i19 = 1;
                do {
                    i13 %= (int)(Test.instanceCount | 1);
                } while (++i19 < 14);
                byArr[i17 + 1] += (byte)28877;
                if (bFld) {
                    if (bFld) continue;
                } else if (bFld) {
                    i12 -= 40198;
                    d1 -= i18;
                } else {
                    d1 += -3;
                }
            } else {
                Test.fFld += (((i17 * i17) + Test.fFld) - sFld);
            }
        }
        vMeth_check_sum += i12 + l + i13 + i17 + i18 + i19 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(byArr);
    }

    public long lMeth() {

        int i4=24653, i6=6, i7=3843, i8=43826, i9=9, i10=-89, i11=-22974, i21=123, i22=8;
        double d=0.2921;
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)29432);
        FuzzerUtils.init(lArr1, -3409494334L);

        i4 = 1;
        while (++i4 < 389) {
            int i5=17991;
            i5 -= i5;
        }
        i6 = 1;
        while (++i6 < 150) {
            i7 *= ((-(--i7)) + ((++i7) + (13 + (i7++))));
            for (i8 = i6; i8 < 11; ++i8) {
                for (i10 = 1; i10 < 1; i10++) {
                    Test.fFld -= Test.fFld;
                }
                Test.iArrFld[i8 + 1] = (int)((++sArr[i8 + 1]) - (++d));
                Test.iArrFld[i6] >>>= (Test.iArrFld[i6 + 1]++);
                lArr1[i6] *= (-(i7--));
                vMeth(i10, Test.instanceCount, i4);
                for (i21 = 1; i21 > 1; i21 -= 2) {
                    Test.fFld += i21;
                    byFld &= (byte)Test.instanceCount;
                    i9 += (i21 + Test.instanceCount);
                }
            }
        }
        long meth_res = i4 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i21 + i22 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-150, i1=27531, i2=-19837, i3=-174, i23=4425, i24=-53716, i25=-2, i26=144;
        float f=87.490F, f2=0.440F;
        long lArr[]=new long[N];
        double dArr[]=new double[N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(lArr, -4L);
        FuzzerUtils.init(dArr, -1.60424);
        FuzzerUtils.init(sArr1, (short)-23847);

        lArr[(59141 >>> 1) % N] = Test.iArrFld[(i >>> 1) % N];
        for (f = 14; f < 234; f++) {
            if (Test.bFld1) {
                if (bFld) {
                    for (i2 = 5; 114 > i2; i2++) {
                        Test.instanceCount -= lMeth();
                        Test.instanceCount = i1;
                        byFld = (byte)Test.instanceCount;
                        dArr[i2] = -10;
                        sArr1[(6 >>> 1) % N] -= (short)Test.instanceCount;
                        i23 += (int)Test.instanceCount;
                    }
                } else {
                    i >>= (int)Test.instanceCount;
                    Test.instanceCount = (long)Test.dFld;
                }
            } else {
                Test.instanceCount *= i2;
            }
            i1 = (int)Test.instanceCount;
            i1 >>= i23;
            for (i24 = 7; i24 < 114; i24++) {
                switch ((((i >>> 1) % 1) * 5) + 66) {
                case 68:
                    i23 >>= (int)Test.instanceCount;
                    if (Test.bFld1) break;
                    i25 += (((i24 * i) + i2) - i1);
                    break;
                default:
                    Test.fFld -= 6;
                    i25 += i3;
                }
                if (Test.bFld1) break;
                i3 = byFld;
                i -= i23;
            }
        }
        for (f2 = 12; f2 < 255; ++f2) {
            i26 >>= -12;
        }
        Test.iArrFld[(-58965 >>> 1) % N] %= (int)(i | 1);
        i1 -= i3;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
