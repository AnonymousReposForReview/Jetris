package tests.javafuzzer2617;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:31:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4773L;
    public static float fFld=123.924F;
    public static boolean bFld=true;
    public byte byFld=-71;
    public static volatile double dFld=-39.111052;
    public short sArrFld[]=new short[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=3, i8=11, i9=13, i10=-164, iArr1[]=new int[N];
        short s1=9479;

        FuzzerUtils.init(iArr1, 14);

        iArr1[(i7 >>> 1) % N] = i7;
        i8 = 1;
        do {
            s1 += (short)(((i8 * i8) + i7) - i8);
            i7 >>= (int)Test.instanceCount;
            for (i9 = 1; i9 < 8; ++i9) {
                Test.instanceCount = Test.instanceCount;
                iArr1[i9 + 1] = i7;
                if (Test.bFld) break;
                Test.instanceCount += (i9 * i9);
                Test.instanceCount -= Test.instanceCount;
                i10 *= (int)Test.fFld;
                i7 += (i9 + i10);
                Test.instanceCount *= Test.instanceCount;
                i10 >>= (int)Test.instanceCount;
            }
            Test.instanceCount *= -253;
        } while (++i8 < 195);
        vMeth1_check_sum += i7 + i8 + s1 + i9 + i10 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i6) {

        int i11=5, i12=-4, i13=-7, i14=14, i15=2, i16=-59884, i17=-14743, iArr2[]=new int[N];
        byte by=-119;

        FuzzerUtils.init(iArr2, 119);

        vMeth1();
        Test.instanceCount = i6;
        for (i11 = 5; i11 < 231; ++i11) {
            switch (((i6 >>> 1) % 3) + 43) {
            case 43:
                for (i13 = 1; i13 < 7; ++i13) {
                    switch ((((i15 >>> 1) % 10) * 5) + 31) {
                    case 78:
                        if (i6 != 0) {
                            vMeth_check_sum += i6 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + by +
                                FuzzerUtils.checkSum(iArr2);
                            return;
                        }
                        for (i16 = 1; i16 < 2; ++i16) {
                            i12 %= (int)(Test.instanceCount | 1);
                            i6 ^= -59394;
                            Test.instanceCount >>= i15;
                            Test.fFld += (((i16 * i12) + i12) - i14);
                            iArr2[i13] += i13;
                            Test.fFld += (i16 * i16);
                            if (i12 != 0) {
                                vMeth_check_sum += i6 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + by +
                                    FuzzerUtils.checkSum(iArr2);
                                return;
                            }
                        }
                        break;
                    case 80:
                    case 59:
                        i12 -= i13;
                        break;
                    case 42:
                        i6 *= i13;
                        break;
                    case 35:
                    case 69:
                        i15 += (((i13 * Test.fFld) + Test.instanceCount) - Test.instanceCount);
                        break;
                    case 41:
                        i12 += (i13 * i12);
                        break;
                    case 38:
                        Test.instanceCount += (i13 * i13);
                    case 55:
                        i12 *= i14;
                        break;
                    case 60:
                        Test.fFld = i16;
                        break;
                    }
                }
                break;
            case 44:
            case 45:
                by += (byte)i11;
                break;
            default:
                i12 += i11;
            }
        }
        vMeth_check_sum += i6 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + by + FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth(int i5) {

        int i18=40109;

        vMeth(i5);
        i18 = 1;
        do {
            i5 = i5;
        } while (++i18 < 359);
        long meth_res = i5 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=67, i1=-103, i2=46618, i3=-209, i4=-65296, i19=1, i20=20, i21=-13, i22=3, i23=4, i24=-9, i25=4106,
            iArr[]=new int[N];
        short s=-25420;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(fArr, 96.550F);

        i += -138;
        for (i1 = 18; 318 > i1; i1++) {
            s = (short)(i2--);
            if ((i2 *= i) >= Test.fFld) continue;
            i <<= i1;
            for (i3 = 1; i3 < 84; i3++) {
                iArr[i3 + 1] /= (int)((iMeth(i2) + i3) | 1);
                try {
                    i2 = (i2 / i4);
                    iArr[i1] = (i1 % 57);
                    i2 = (64 % i4);
                } catch (ArithmeticException a_e) {}
                i2 >>= i4;
                Test.fFld += i1;
                i19 = 1;
                do {
                    i4 += (i19 ^ i1);
                    sArrFld[i19 + 1] <<= (short)i;
                    Test.fFld += Test.instanceCount;
                    s -= (short)i2;
                    Test.instanceCount += (((i19 * Test.instanceCount) + i3) - Test.instanceCount);
                    i2 -= 4;
                    i += i19;
                    Test.instanceCount -= Test.instanceCount;
                } while (++i19 < 2);
                i2 = (int)-600800076L;
            }
        }
        for (i20 = 142; i20 > 1; --i20) {
            i22 = 1;
            while (++i22 < 178) {
                i23 = 1;
                do {
                    fArr[i22 - 1][(i22 >>> 1) % N] *= 1;
                    byFld >>>= (byte)Test.instanceCount;
                    i4 += i19;
                    s = (short)Test.dFld;
                } while (++i23 < 1);
                for (i24 = 1; i24 < 1; ++i24) {
                    Test.dFld = i25;
                    i25 = i1;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
