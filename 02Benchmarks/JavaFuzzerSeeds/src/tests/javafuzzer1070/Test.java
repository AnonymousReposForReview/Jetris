package tests.javafuzzer1070;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:58:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8805112021558844789L;
    public static float fFld=60.769F;
    public long lFld=-354046142L;
    public static int iFld=1;
    public double dFld=0.10048;
    public volatile int iFld1=-8;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 94);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, int i4, int i5) {

        int i6=-13, i7=0, i8=63, i9=3, i10=1;
        short s=19189;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -13104L);
        FuzzerUtils.init(dArr, 0.75614);

        Test.instanceCount *= i4;
        Test.fFld = Test.fFld;
        lArr[(i5 >>> 1) % N] = i3;
        for (i6 = 21; i6 < 344; ++i6) {
            dArr[i6] = -6.75F;
            lArr[i6] = i6;
            s += (short)(i6 * i6);
            i7 <<= i7;
            i8 = 1;
            while (++i8 < 5) {
                i4 += (i8 ^ i7);
                Test.iArrFld[i6 + 1] %= (int)((long)(Test.fFld) | 1);
                i4 += (int)94.87940;
                for (i9 = 1; i9 < 1; ++i9) {
                    i10 -= (int)28L;
                    lArr[i8 + 1] *= i9;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + s + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(long l, int i2) {

        long l1=-143L;
        int i11=-101, i12=-10, i13=-1, i14=29579, i15=-11063, i16=-91;
        double d=-1.59921;
        short s1=10285;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)71);

        for (byte by : byArr) {
            Test.instanceCount = lMeth(-32467, i2, 116);
            l1 = i2;
        }
        for (i11 = 3; i11 < 278; ++i11) {
            d -= s1;
            i2 = i11;
            i13 = 1;
            do {
                i2 = i12;
                for (i14 = 1; 1 < i14; i14--) {
                    i15 -= i13;
                    Test.iArrFld[i14 - 1] *= (int)Test.fFld;
                    i16 <<= i11;
                    i15 -= i12;
                    i2 = (int)-2.769F;
                    d = i14;
                }
            } while (++i13 < 6);
        }
        long meth_res = l + i2 + l1 + i11 + i12 + Double.doubleToLongBits(d) + s1 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i, int i1) {

        double d1=-2.73060;
        int i17=-55, i18=128, i19=-47475;
        byte by1=98, byArr1[]=new byte[N];
        boolean b=true;

        FuzzerUtils.init(byArr1, (byte)-68);

        iMeth1(3752226442470136618L, i1);
        i1 >>= i1;
        byArr1[(47 >>> 1) % N] += (byte)Test.instanceCount;
        switch (((i >>> 1) % 7) + 87) {
        case 87:
            Test.iArrFld[(7 >>> 1) % N] -= i1;
            d1 = i;
            break;
        case 88:
            Test.iArrFld[(i >>> 1) % N] -= (int)Test.instanceCount;
            d1 = Test.instanceCount;
            break;
        case 89:
            for (i17 = 6; 204 > i17; ++i17) {
                i19 = 1;
                do {
                    Test.iArrFld[i17] *= (int)Test.instanceCount;
                    i1 *= i17;
                    i18 -= (int)Test.instanceCount;
                    i %= (int)(i | 1);
                    i18 = (int)lFld;
                } while (++i19 < 8);
            }
            break;
        case 90:
            Test.iArrFld[(-102 >>> 1) % N] = -117;
        case 91:
            i += i17;
            break;
        case 92:
            by1 -= (byte)Test.fFld;
            break;
        case 93:
            i1 = 10;
            break;
        default:
            b = b;
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d1) + i17 + i18 + i19 + by1 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(byArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=-14, i22=-11, i23=14, i24=-52, i25=-72, i26=181, i27=46596, i28=-37616, i29=-8700;
        byte by2=-56, byArr2[]=new byte[N];
        double d2=-2.97590;
        short s2=14894;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1L);
        FuzzerUtils.init(byArr2, (byte)99);

        iMeth(Test.iFld, Test.iFld);
        for (int i20 : Test.iArrFld) {
            switch (((i20 >>> 1) % 1) + 19) {
            case 19:
                lArr1[(i20 >>> 1) % N] -= (long)Test.fFld;
                break;
            default:
                byArr2[(Test.iFld >>> 1) % N] += (byte)dFld;
                i21 = 1;
                do {
                    Test.iFld += i21;
                    lArr1[i21 - 1] -= by2;
                    i20 >>>= i20;
                    for (d2 = 1; d2 < 1; ++d2) {
                        i20 *= i20;
                        try {
                            Test.iArrFld[(int)(d2 - 1)] = (i22 / Test.iFld);
                            i20 = (-611041477 / i20);
                            i23 = (5 % i20);
                        } catch (ArithmeticException a_e) {}
                        i23 *= iFld1;
                        s2 = (short)i23;
                        Test.iArrFld[(int)(d2 - 1)] *= (int)Test.fFld;
                        Test.fFld -= (float)dFld;
                        Test.instanceCount = i22;
                        Test.fFld *= Test.instanceCount;
                        i22 = i23;
                    }
                } while (++i21 < 63);
                for (i24 = 3; i24 < 63; i24++) {
                    for (i26 = 1; i26 < 2; i26++) {
                        iFld1 += (i26 ^ i26);
                    }
                    for (i28 = 1; i28 < 2; i28++) {
                        Test.fFld += (i28 * i24);
                    }
                    Test.iFld += (i24 ^ Test.iFld);
                    Test.iArrFld[i24] += (int)dFld;
                    Test.instanceCount = lFld;
                    Test.instanceCount += -8373261314215755055L;
                    lArr1[i24 - 1] = lFld;
                    i22 += (0 + (i24 * i24));
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
