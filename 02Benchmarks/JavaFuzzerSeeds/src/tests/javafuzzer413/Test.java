package tests.javafuzzer413;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:20:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7988634634139635684L;
    public int iFld=-6;
    public static volatile short sFld=13924;
    public double dFld=0.108935;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 16967);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-144, i3=76, i4=3, i5=19558, i6=-6, i7=-40666;
        float f=0.1004F;
        boolean b=true;
        double d3=-1.66421, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 148L);
        FuzzerUtils.init(dArr, 0.81507);

        for (long l1 : lArr) {
            i2 = 1;
            while (++i2 < 4) {
                i3 -= -254;
                i4 = 1;
                do {
                    l1 -= (long)f;
                    dArr[i2 - 1] = l1;
                    i3 *= i4;
                    b = b;
                    dArr[i4 - 1] += i2;
                    i5 = (int)f;
                } while (++i4 < 1);
            }
        }
        for (i6 = 8; i6 < 341; ++i6) {
            Test.instanceCount -= (long)f;
        }
        i3 *= (int)d3;
        i3 = (int)f;
        Test.instanceCount += i2;
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f) + (b ? 1 : 0) + i5 + i6 + i7 +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        double d1=47.44557, d2=27.49054;
        byte by=91;
        int i8=-5, i9=28017, i10=1, i11=1013, i12=-75, i13=13, i14=-152, i15=-133;
        float f1=-2.580F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.488F);

        d1 = ((i1 = by) - Test.iArrFld[(i1 >>> 1) % N][(-102 >>> 1) % N]);
        d2 = iMeth();
        i1 *= i1;
        Test.iArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N] = (int)d2;
        for (i8 = 7; i8 < 283; ++i8) {
            i9 <<= i1;
            i1 = i9;
        }
        for (i10 = 17; i10 < 304; ++i10) {
            for (i12 = 1; i12 < 6; i12++) {
                i11 += (i12 * i13);
                f1 = f1;
                for (i14 = 2; i14 > 1; --i14) {
                    i9 = i10;
                    fArr[(i10 >>> 1) % N] += i12;
                    i11 = i11;
                }
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d1) + by + Double.doubleToLongBits(d2) + i8 + i9 + i10 + i11 +
            i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(double d, int i, long l) {

        int i16=-11, i17=-123, i18=7403, i19=-135;
        boolean b1=false;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 115.25299);

        try {
            vMeth(i);
            for (i16 = 22; i16 < 383; i16++) {
                if (b1) {
                    i18 = 5;
                    do {
                        i17 >>>= 47;
                        i17 -= i16;
                        if (i != 0) {
                        }
                        b1 = b1;
                        Test.instanceCount -= Test.sFld;
                        Test.iArrFld[i18][i16] = (int)-3160446865L;
                        i19 = 1;
                        do {
                            if (b1) continue;
                            i17 = (int)Test.instanceCount;
                            i17 -= (int)Test.instanceCount;
                        } while (++i19 < 3);
                    } while ((i18 -= 3) > 0);
                } else if (b1) {
                    i17 = i17;
                } else if (b1) {
                    b1 = b1;
                } else {
                    i17 = 15404;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            i *= (int)l;
        }
        finally {
            d = -21398;
        }
        long meth_res = Double.doubleToLongBits(d) + i + l + i16 + i17 + i18 + (b1 ? 1 : 0) + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-13487, i21=26, i22=-43114, i23=-109, i24=-185, i25=-126;
        float f2=36.106F;
        long l2=-30555L;
        boolean b2=false;
        double dArr2[][]=new double[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr2, 1.106088);
        FuzzerUtils.init(byArr, (byte)-65);

        Test.instanceCount = (((--iFld) + Integer.reverseBytes(iFld)) * ((iFld - Test.instanceCount) * 299));
        lMeth(-2.78496, iFld, Test.instanceCount);
        for (i20 = 7; i20 < 207; i20++) {
            f2 -= -2.627F;
            iFld -= (int)Test.instanceCount;
            iFld = Test.sFld;
            switch ((i20 % 6) + 90) {
            case 90:
                iFld += (((i20 * iFld) + Test.instanceCount) - i20);
                dArr2[i20 - 1][i20 + 1] *= dFld;
                iFld = i20;
                i21 += (((i20 * i21) + Test.instanceCount) - Test.instanceCount);
                break;
            case 91:
                for (i22 = 2; i22 < 126; i22++) {
                    for (l2 = i20; l2 < 2; l2++) {
                        lArrFld = lArrFld;
                        i24 += (int)Test.instanceCount;
                        i21 = i20;
                    }
                    i23 *= i23;
                    Test.sFld += (short)(-119.151F + (i22 * i22));
                    i23 *= i24;
                    i21 = i23;
                    f2 += l2;
                    i25 = 1;
                    do {
                        bArrFld[i22 + 1] = b2;
                        dFld += i21;
                        byArr[i20 + 1] -= (byte)i23;
                        Test.instanceCount = i22;
                        Test.instanceCount *= (long)dFld;
                        i23 = i22;
                        bArrFld[i25 - 1] = true;
                        Test.instanceCount <<= i23;
                    } while (++i25 < 2);
                }
                break;
            case 92:
                Test.iArrFld[i20][i20 - 1] = (int)l2;
            case 93:
                Test.instanceCount = Test.instanceCount;
            case 94:
                i23 = i22;
                break;
            case 95:
                i23 -= (int)dFld;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
