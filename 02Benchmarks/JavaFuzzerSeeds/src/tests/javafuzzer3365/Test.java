package tests.javafuzzer3365;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:45:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57372L;
    public static short sFld=5912;
    public static int iFld=-46491;
    public static double dFld=118.42985;
    public static volatile boolean bFld=true;
    public static float fFld=-123.335F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i2=-5, i3=3668, i4=-3, i5=-46, i6=-1094, iArr[]=new int[N];
        float f=-1.639F;
        double d=-16.86838;

        FuzzerUtils.init(iArr, -40671);

        i2 = 1;
        do {
            Test.instanceCount = i2;
            try {
                i3 = (-199 % i2);
                iArr[i2 - 1] = (i2 / i3);
                i3 = (i2 / i3);
            } catch (ArithmeticException a_e) {}
            for (i4 = 6; 1 < i4; --i4) {
                f *= (float)d;
                switch ((i4 % 2) + 69) {
                case 69:
                    i3 -= i4;
                    Test.instanceCount += (i4 | i3);
                    i6 = 2;
                    do {
                        Test.instanceCount = i5;
                        Test.sFld += (short)i6;
                        switch (((-26 >>> 1) % 3) + 17) {
                        case 17:
                            i5 = i4;
                            Test.instanceCount += i5;
                            Test.instanceCount += (i6 | Test.instanceCount);
                            break;
                        case 18:
                            i5 += (i6 * i2);
                            break;
                        case 19:
                            i5 = (int)Test.instanceCount;
                            break;
                        default:
                            i5 = i2;
                        }
                    } while (--i6 > 0);
                    break;
                case 70:
                    i5 *= i2;
                }
            }
        } while (++i2 < 272);
        vMeth2_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i=-226, i1=-11, i7=-14, i8=4, i9=-12, i10=-14680;
        double d1=1.25018;

        for (i = 336; 21 < i; --i) {
            vMeth2();
            Test.instanceCount = (long)d1;
            for (i7 = 1; i7 < 5; i7++) {
                float f1=-2.886F;
                i1 ^= -251;
                i8 += (int)Test.instanceCount;
                f1 = i7;
                Test.sFld += (short)f1;
            }
            Test.iFld = i8;
        }
        for (i9 = 1; i9 < 294; i9++) {
            float f2=0.390F;
            Test.iFld >>>= i8;
            Test.iFld >>= 8;
            i10 = (int)f2;
            Test.iArrFld[i9 - 1] = (int)d1;
            Test.iFld += (i9 | Test.iFld);
        }
        vMeth1_check_sum += i + i1 + Double.doubleToLongBits(d1) + i7 + i8 + i9 + i10;
    }

    public static void vMeth(long l) {

        float f3=-55.234F, f4=1.615F;
        int i11=28306, i12=-40, i13=-222, i14=-11;

        vMeth1();
        f3 -= Test.iFld;
        Test.iFld = Test.iFld;
        for (i11 = 16; i11 < 286; ++i11) {
            f4 = 1;
            do {
                i12 = (int)Test.instanceCount;
                i12 = i12;
                for (i13 = (int)(f4); 1 > i13; i13++) {
                    l = i14;
                    Test.iArrFld[i13] += Test.iFld;
                    f3 *= -36179;
                    i14 = (int)Test.dFld;
                    Test.instanceCount += i14;
                    f3 = Test.instanceCount;
                    l += (i13 * i13);
                }
            } while (++f4 < 6);
        }
        vMeth_check_sum += l + Float.floatToIntBits(f3) + i11 + i12 + Float.floatToIntBits(f4) + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=9780, i16=233, i17=-39330, i18=6793, i19=146, i20=-28137, i21=118, i22=-5978, i23=-2007, i24=50;
        double d2=1.32598;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)106);

        vMeth(Test.instanceCount);
        for (i15 = 14; i15 < 302; i15++) {
            for (i17 = 3; i17 < 87; i17++) {
                float f6=1.291F;
                for (i19 = i17; i19 < 2; i19++) {
                    float f5=-31.401F;
                    f5 *= f5;
                    Test.bFld = Test.bFld;
                    Test.instanceCount -= Test.instanceCount;
                    Test.instanceCount = -103;
                    i18 = i18;
                    i20 += (int)(-5605437187440751877L + (i19 * i19));
                    if (Test.bFld) continue;
                    i20 = i17;
                }
                i20 += (((i17 * i15) + i18) - Test.instanceCount);
                i16 += (int)Test.instanceCount;
                f6 += (i17 * i21);
                i20 += (i17 * i17);
                i20 += (int)Test.dFld;
                if (Test.bFld) break;
                i18 >>= (int)Test.instanceCount;
                byArr[i15 - 1] ^= (byte)-8108155959823434686L;
            }
            i22 = 1;
            while (++i22 < 87) {
                i20 += (((i22 * i19) + Test.iFld) - Test.fFld);
            }
            for (i23 = 3; 87 > i23; ++i23) {
                d2 = 1;
                while (++d2 < 2) {
                    Test.dFld *= -4648;
                    Test.iFld &= Test.iFld;
                    Test.instanceCount = -98;
                    Test.iFld = i19;
                    Test.dFld += Test.dFld;
                    i16 += (int)Test.dFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
