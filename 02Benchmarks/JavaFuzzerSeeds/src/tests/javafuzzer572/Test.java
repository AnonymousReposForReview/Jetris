package tests.javafuzzer572;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:06:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public int iFld=-15563;
    public static float fFld=-53.778F;
    public static byte byFld=-110;
    public static volatile int iFld1=-33;
    public int iFld2=9;
    public boolean bFld=false;
    public double dArrFld[][]=new double[N][N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        boolean b=false;
        int i6=-8707, i7=4, iArr[]=new int[N];
        short s=23502;
        double d1=107.36830, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 2.84841);
        FuzzerUtils.init(iArr, -182);
        FuzzerUtils.init(lArr, -183L);

        b = b;
        dArr[(i4 >>> 1) % N] += i3;
        for (int i5 : iArr) {
            Test.instanceCount += (long)Test.fFld;
            i3 -= i4;
            for (i6 = 1; i6 < 4; ++i6) {
                i4 ^= i4;
                lArr[i6 - 1] *= i3;
                i5 |= s;
                i5 /= (int)(i4 | 1);
                d1 *= -2.734F;
                i7 += (i6 + Test.fFld);
                s <<= (short)i4;
                iArr[i6 - 1] = i4;
                i4 >>= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i3 + i4 + (b ? 1 : 0) + i6 + i7 + s + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l) {

        int i2=-1073, i8=-35830, i9=12, i10=142, i11=-187, iArr1[]=new int[N];
        float f1=-107.629F;
        double d2=125.115521;
        boolean b1=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -173);
        FuzzerUtils.init(sArr, (short)-28555);

        i2 *= (int)f1;
        vMeth1(i2, i2);
        try {
            i2 <<= 10536;
            i2 += 53;
            for (i8 = 4; 290 > i8; i8++) {
                if (b1) {
                    i2 *= (int)d2;
                    i2 = i2;
                } else if (b1) {
                    for (i10 = 1; i10 < 6; i10++) {
                        l *= -72;
                        iArr1[i8 + 1] >>>= i2;
                    }
                    Test.instanceCount <<= i10;
                    b1 = true;
                } else if (b1) {
                    sArr[i8] = (short)11612;
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            i11 += i11;
        }
        vMeth_check_sum += l + i2 + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d2) + i10 + i11 + (b1
            ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public long lMeth(int i, int i1, float f) {

        int i12=-187, i13=-61, i14=-14, i15=16, i16=-226;
        double d3=-1.55207, d4=-1.22343;

        vMeth(Test.instanceCount);
        for (i12 = 3; i12 < 385; ++i12) {
            d3 = i13;
            Test.instanceCount += (((i12 * i) + iFld) - Test.instanceCount);
            i *= (int)Test.instanceCount;
        }
        i14 = 1;
        while (++i14 < 321) {
            i = iFld;
            i += (((i14 * i13) + i12) - iFld);
            dArrFld[i14][i14] += Test.byFld;
            iFld = iFld;
            i15 = 1;
            while ((i15 += 2) < 5) {
                for (d4 = i14; d4 < 3; d4++) {
                    Test.byFld = (byte)Test.iFld1;
                    Test.byFld += (byte)d4;
                    i13 = (int)-957714340953646130L;
                }
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f) + i12 + i13 + Double.doubleToLongBits(d3) + i14 + i15 +
            Double.doubleToLongBits(d4) + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=2.75387;
        int i17=-18868, i18=0, i19=55960, i20=3462, i21=-73, i22=-7, i23=19316, iArr2[]=new int[N];
        short s1=-780;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.325F);
        FuzzerUtils.init(iArr2, 8);

        fArr[(iFld >>> 1) % N] += ((long)((-Test.instanceCount) * d) << lMeth(iFld, Test.iFld1, 126.609F));
        Test.fFld *= Test.iFld1;
        i17 = 1;
        while (++i17 < 304) {
            Test.instanceCount += (i17 | iFld);
            for (i18 = 2; i18 < 83; i18 += 2) {
                for (i20 = 1; i20 < 3; ++i20) {
                    d -= Test.fFld;
                    iFld += (int)Test.instanceCount;
                    i21 &= i20;
                    iFld *= (int)Test.fFld;
                    Test.fFld += (((i20 * i17) + Test.fFld) - Test.iFld1);
                    i19 *= i17;
                }
                for (i22 = 3; i22 > 1; i22--) {
                    iFld2 -= (int)Test.fFld;
                    iArr2[i22] &= i18;
                    d = Test.fFld;
                    iArr2[i17 + 1] -= i18;
                    Test.iFld1 = i19;
                    if (bFld) {
                        s1 += (short)i17;
                    } else {
                        i21 = i20;
                        if (false) continue;
                    }
                    try {
                        iFld2 = (i18 / i23);
                        i21 = (22954 / i20);
                        iArr2[i18] = (iFld2 / -23644);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = 127;
                    fArr[i22] -= Test.fFld;
                    Test.instanceCount &= i23;
                }
                Test.iFld1 += 27682;
            }
            iArr2[i17] += (int)Test.instanceCount;
            iFld ^= i19;
        }
        s1 *= (short)-2345939972297887153L;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
