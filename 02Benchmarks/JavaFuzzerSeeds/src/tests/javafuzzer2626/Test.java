package tests.javafuzzer2626;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=357594584L;
    public static long lFld=152L;
    public boolean bFld=false;
    public static double dFld=2.120581;
    public volatile byte byFld=30;
    public volatile int iFld=-12;
    public short sFld=-5986;
    public static volatile double dArrFld[][]=new double[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -124.65418);
        FuzzerUtils.init(Test.iArrFld, -204);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, float f, int i8) {

        double d=0.30179;
        int i9=-32, i10=-123, i11=25;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        Test.dArrFld[(166 >>> 1) % N][(13 >>> 1) % N] -= d;
        i7 = i7;
        i9 = 1;
        while (++i9 < 397) {
            Test.instanceCount >>= i9;
            f += i9;
            i10 = 1;
            while (++i10 < 4) {
                i11 = 1;
                while (++i11 < 1) {
                    if (true) {
                        i8 -= (int)Test.instanceCount;
                        bArr[i10] = b1;
                    } else {
                        i8 = i7;
                        Test.iArrFld[i11] += (int)d;
                        i7 >>= i11;
                        vMeth2_check_sum += i7 + Float.floatToIntBits(f) + i8 + Double.doubleToLongBits(d) + i9 + i10 +
                            i11 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    i8 -= (int)f;
                    if (b1) continue;
                }
            }
        }
        vMeth2_check_sum += i7 + Float.floatToIntBits(f) + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + (b1 ? 1 :
            0) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i3, int i4) {

        int i5=-199, i6=-3, i12=17, i13=9, iArr1[]=new int[N];
        byte by1=6;
        boolean b=true;
        float f1=1.495F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(lArr1, -6450152875014806619L);

        iArr1[(35 >>> 1) % N] = (int)((Math.abs(Test.instanceCount) * i3) - ((i4 + -23929) << (i3 *
            Test.instanceCount)));
        for (i5 = 1; i5 < 133; i5++) {
            i6 >>>= (--i6);
            i4 += i5;
            i6 += (((i5 * i6) + by1) - i5);
            b = b;
            if (b) {
                vMeth2(6, f1, 36314);
                Test.instanceCount = -3;
                i4 += (i5 * i4);
            }
            Test.instanceCount += (39352 + (i5 * i5));
            i3 &= (int)Test.instanceCount;
            for (i12 = i5; i12 < 12; i12++) {
                lArr1[i5] *= by1;
                f1 *= i12;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + by1 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i12 + i13 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(byte by, int i1) {

        long l=1L, l1=745777508998886678L;
        int i2=7, i14=61337, i15=39006, i16=89, iArr[]=new int[N];
        float f2=2.317F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -105.642F);
        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(byArr, (byte)125);

        for (l = 20; 354 > l; ++l) {
            i2 = (int)(((i1 % (Test.instanceCount | 1)) - (i2 + i1)) + ((i1++) + (-i1)));
            fArr[(int)(l + 1)] *= (-(iArr[(int)(l + 1)] + byArr[(int)(l + 1)]));
            vMeth1(i2, i2);
            Test.instanceCount += (((l * i1) + by) - Test.lFld);
            for (i14 = 5; i14 > l; --i14) {
                if (i2 != 0) {
                    vMeth_check_sum += by + i1 + l + i2 + i14 + i15 + l1 + i16 + Float.floatToIntBits(f2) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(byArr);
                    return;
                }
                for (l1 = 1; l1 > l; --l1) {
                    i2 += (int)(l1 ^ l1);
                    i2 <<= (int)7L;
                    i16 += 42;
                    if (bFld) continue;
                }
                i1 -= (int)Test.instanceCount;
                Test.dFld = Test.dFld;
                Test.lFld += (((i14 * f2) + l1) - i2);
            }
        }
        vMeth_check_sum += by + i1 + l + i2 + i14 + i15 + l1 + i16 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=1, i17=-11, i18=68, i19=-33645, i20=13, i21=-42970, i22=168, i23=-59080, i24=10, i25=-54;
        float f3=-79.952F, f4=82.583F, fArr1[][]=new float[N][N];
        long l2=-85L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(fArr1, 2.259F);

        lArr[(i >>> 1) % N] <<= (Test.instanceCount << (i++));
        vMeth(byFld, i);
        f3 += (float)Test.dFld;
        for (i17 = 2; i17 < 129; i17++) {
            for (i19 = 197; i19 > 9; i19 -= 3) {
                Test.instanceCount *= 11;
                i = (int)43526L;
                for (i21 = 1; i21 < 4; i21++) {
                    i -= (int)Test.dFld;
                    Test.lFld = 47059;
                    Test.lFld += Test.instanceCount;
                    i20 = (int)-2.383F;
                    if (true) {
                        iFld = (int)l2;
                        l2 += (((i21 * i21) + Test.lFld) - f3);
                    }
                }
                for (f4 = 1; f4 < 4; f4++) {
                    i23 += (int)f4;
                    i20 *= (int)Test.lFld;
                    Test.instanceCount = -2L;
                    sFld += (short)f4;
                    l2 += (5 + (f4 * f4));
                }
                lArr[i17] -= i19;
                i22 /= (int)((long)(f3) | 1);
                for (i24 = 1; i24 < 4; i24++) {
                    i20 += (i24 + Test.lFld);
                    i20 = (int)Test.lFld;
                    fArr1[i24 - 1][i24] -= -214;
                    i += (i24 | i23);
                    Test.dFld += 14;
                    Test.iArrFld[i17 - 1] >>= i17;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
