package tests.javafuzzer117;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:42:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public volatile float fFld=-60.528F;
    public static int iFld=0;
    public static short sFld=1048;
    public static boolean bFld=false;
    public static byte byFld=48;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2697834793L);
        FuzzerUtils.init(Test.iArrFld, 46207);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static long lMeth() {

        int i=30, i1=-10, i2=-5;
        float f=1.316F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 55506L);

        for (i = 9; i < 214; i++) {
            for (f = 1; f < 8; ++f) {
                i1 -= -21738;
            }
            Test.instanceCount -= (lArr[i + 1][i - 1]--);
        }
        long meth_res = i + i1 + Float.floatToIntBits(f) + i2 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l, int i17) {

        int i18=-3, i19=10, i20=77;
        float f1=115.223F;
        short s1=29673;

        Test.lArrFld[(i17 >>> 1) % N] -= l;
        i18 = 1;
        while (++i18 < 182) {
            Test.lArrFld[i18] = i18;
            i17 = -76;
            i17 += (i18 + f1);
            i19 = 1;
            do {
                l = i18;
                i20 = 1;
                while (++i20 < 1) {
                    if (true) {
                        s1 >>= (short)l;
                        i17 += i18;
                        l = i17;
                        if (false) continue;
                    } else if (true) {
                        l = i17;
                        Test.lArrFld[i19 - 1] *= Test.iFld;
                    }
                }
            } while (++i19 < 9);
        }
        vMeth1_check_sum += l + i17 + i18 + Float.floatToIntBits(f1) + i19 + i20 + s1;
    }

    public static void vMeth(int i14, int i15) {

        int i16=-30053, i21=37142, i22=45867, i23=13, i24=3;
        byte by=-2;
        double d=90.70066;

        i16 = 1;
        while (++i16 < 225) {
            vMeth1(Test.instanceCount, Test.iFld);
            for (i21 = 1; i21 < 7; ++i21) {
                Test.instanceCount >>= i16;
                for (i23 = 2; i23 > 1; --i23) {
                    float f2=125.901F;
                    f2 *= Test.sFld;
                    by >>= (byte)Test.instanceCount;
                    Test.instanceCount += i23;
                    Test.bFld = Test.bFld;
                    Test.iArrFld[i23] = (int)4263806798L;
                    i14 += by;
                    if (Test.bFld) {
                        Test.iArrFld[i21] += (int)d;
                        i15 = 19812;
                    } else {
                        i24 >>= Test.iFld;
                    }
                }
            }
        }
        vMeth_check_sum += i14 + i15 + i16 + i21 + i22 + i23 + i24 + by + Double.doubleToLongBits(d);
    }

    public static int iMeth(int i6, int i7) {

        int i8=-51158, i9=-6, i10=-13, i11=12, i12=-30311, i13=35364, i25=20335, i26=-12, i27=-40086;
        float f3=-116.658F, fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -107.426F);
        FuzzerUtils.init(dArr, -7.108661);

        if (Test.bFld) {
            for (i8 = 18; i8 < 308; ++i8) {
                for (i10 = 1; i10 < 6; i10++) {
                    i6 -= i7;
                }
                for (i12 = 1; i12 < 6; i12++) {
                    vMeth(i13, i7);
                    f3 *= i7;
                }
                for (i25 = i8; i25 < 6; i25++) {
                    Test.sFld <<= Test.sFld;
                    i13 += (i25 * i25);
                    Test.iArrFld[i8] &= Test.iFld;
                    Test.iFld >>= (int)Test.instanceCount;
                    i27 = 1;
                    while (--i27 > 0) {
                        fArr[i8 - 1] *= i27;
                        dArr[i8] -= i7;
                    }
                }
            }
        } else if (Test.bFld) {
            Test.byFld += (byte)i9;
        } else {
            f3 = f3;
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f3) + i25 + i26 + i27 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=24363;
        int i3=11, i4=-12, i5=-12, i28=-58685, i29=-8, i30=-235;
        double d1=0.55741;

        s -= (short)lMeth();
        switch (((((int)(i3 % (Test.instanceCount | 1))) >>> 1) % 2) + 65) {
        case 65:
            for (i4 = 19; i4 < 325; i4++) {
                fFld += iMeth(i3, i5);
                i5 = (int)Test.instanceCount;
                for (i28 = 5; i28 < 82; i28++) {
                    Test.iArrFld[i4 + 1] += (int)fFld;
                    Test.instanceCount += (i28 ^ i29);
                    i30 = 1;
                    do {
                        Test.iFld += (i30 ^ Test.instanceCount);
                        Test.instanceCount *= -244;
                        Test.byFld += (byte)i30;
                        i5 = (int)Test.instanceCount;
                        Test.instanceCount *= 6227049165577519317L;
                        Test.instanceCount = 51999;
                        switch (((i4 % 1) * 5) + 59) {
                        case 60:
                            try {
                                Test.iFld = (i30 % -29088);
                                Test.iFld = (Test.iArrFld[i4 - 1] % i4);
                                Test.iFld = (40184 % Test.iArrFld[i4 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i3 += (((i30 * i5) + Test.instanceCount) - i4);
                            Test.iArrFld[i30 - 1] = i28;
                            i5 += 4957;
                            break;
                        }
                        Test.iArrFld[i28] = i5;
                    } while (++i30 < 2);
                    Test.instanceCount -= Test.iFld;
                    Test.iFld = i29;
                    Test.iArrFld[i28 - 1] += (int)fFld;
                    Test.iArrFld[i4 + 1] = i29;
                    Test.lArrFld[i28 - 1] = Test.byFld;
                }
                i29 += (i4 - i30);
                d1 *= Test.instanceCount;
            }
            break;
        case 66:
            Test.bArrFld[(i28 >>> 1) % N] = Test.bFld;
            Test.iFld <<= i3;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
