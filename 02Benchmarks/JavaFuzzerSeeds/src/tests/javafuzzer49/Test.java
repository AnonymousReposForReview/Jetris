package tests.javafuzzer49;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:37:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static boolean bFld=true;
    public static float fFld=1.581F;
    public static volatile double dFld=2.78494;
    public byte byFld=-83;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 26358);
        FuzzerUtils.init(Test.fArrFld, 98.194F);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3) {

        int i4=-56, i5=-64019, i6=13784, i7=8, i8=270, i9=2, i10=4, i11=62188, i12=10, i13=22412;
        double d=114.130195;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i4 = 11; i4 < 223; ++i4) {
            i2 += -10;
            i5 %= 104;
            i2 = i3;
            for (i6 = 1; i6 < 8; i6++) {
                i7 += i6;
                bArr[i6] = Test.bFld;
                for (i8 = 1; i8 < 2; i8++) {
                    i2 += (int)Test.fFld;
                    i3 += (i8 ^ Test.instanceCount);
                }
                i3 += (i6 * i6);
            }
            for (i10 = i4; i10 < 8; ++i10) {
                for (i12 = 1; i12 < 1; ++i12) {
                    i5 >>>= i5;
                }
                d = Test.instanceCount;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d)
            + FuzzerUtils.checkSum(bArr);
    }

    public static float fMeth(float f1) {

        int i1=1, i14=-8, i15=4, i16=4, i17=9, i18=8, i19=49656;
        long l=3115285447332317530L;
        byte by=-63;

        i1 = 1;
        do {
            Test.iArrFld[i1] = (Test.iArrFld[i1]--);
            vMeth1(i1, i1);
            i14 = (int)Test.fFld;
            l &= i14;
            for (i15 = 1; i15 < 11; i15++) {
                for (i17 = 1; 2 > i17; i17++) {
                    i18 += by;
                    if (true) {
                        try {
                            i14 = (357228955 % i18);
                            i16 = (i15 / i1);
                            i14 = (i19 % -81);
                        } catch (ArithmeticException a_e) {}
                    } else {
                        switch ((i15 % 1) + 85) {
                        case 85:
                            l ^= i15;
                            Test.instanceCount = by;
                            break;
                        default:
                            i14 -= i19;
                            Test.iArrFld[i15] /= (int)(Test.instanceCount | 1);
                        }
                    }
                }
            }
        } while (++i1 < 140);
        long meth_res = Float.floatToIntBits(f1) + i1 + i14 + l + i15 + i16 + i17 + i18 + by + i19;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(float f, int i) {

        int i20=23687, i21=25671, i22=-4530, i23=-1, i24=-217, i25=23, iArr[]=new int[N];
        double d1=-2.63767, d2=0.103390;

        FuzzerUtils.init(iArr, 7);

        i += (int)(iArr[(i >>> 1) % N] = (int)(fMeth(Test.fFld) + i));
        Test.fFld = i;
        for (i20 = 222; i20 > 4; i20 -= 3) {
            for (i22 = 21; i22 > 1; i22--) {
                Test.instanceCount = i22;
            }
            for (d1 = 1; 21 > d1; ++d1) {
                if (Test.bFld) break;
                for (d2 = 1; d2 < 2; ++d2) {
                    f -= i20;
                    i23 += i23;
                    i21 += i23;
                    Test.dFld *= f;
                }
                i23 += 8;
                i24 += (int)((long)d1 | Test.instanceCount);
            }
            i += -65274;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d1) + i24 +
            Double.doubleToLongBits(d2) + i25 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i26=-122, i28=53953, i29=1, i30=-171, i31=169, i32=-3, i33=-56709;
        short s=5868, s1=31850;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)91);
        FuzzerUtils.init(lArr, 154L);

        vMeth(Test.fFld, i26);
        Test.instanceCount -= Test.instanceCount;
        for (int i27 : Test.iArrFld) {
            for (i28 = 3; i28 < 63; i28++) {
                i27 -= (int)Test.instanceCount;
                s = (short)i28;
                for (i30 = 2; 1 < i30; --i30) {
                    i26 <<= i31;
                    byFld *= (byte)-70L;
                    Test.instanceCount >>= 620475436L;
                    i27 += (int)Test.fFld;
                    Test.iArrFld[i28] -= -123;
                    i31 /= (int)(s1 | 1);
                    Test.dFld -= Test.instanceCount;
                    i31 += (int)Test.fFld;
                }
                Test.instanceCount = i27;
            }
        }
        for (i32 = 372; i32 > 6; i32--) {
            i29 -= (int)-2.125382;
            if (Test.bFld) {
                Test.bFld = true;
                Test.instanceCount -= i26;
                switch (((i32 >>> 1) % 4) + 15) {
                case 15:
                    i29 &= (int)Test.instanceCount;
                    byArr[i32 - 1] = (byte)i26;
                case 16:
                    switch ((((i31 >>> 1) % 3) * 5) + 19) {
                    case 34:
                        Test.iArrFld[i32 - 1] = (int)Test.instanceCount;
                        i26 += i32;
                        Test.bFld = Test.bFld;
                        i26 = (int)Test.fFld;
                    case 29:
                        Test.fFld += Test.fFld;
                    case 27:
                        lArr[i32] <<= i28;
                        break;
                    default:
                        Test.fArrFld[i32 - 1] -= i31;
                    }
                    break;
                case 17:
                    i33 += -28374;
                    break;
                case 18:
                    lArr[(i30 >>> 1) % N] *= (long)2.206F;
                    break;
                default:
                    i26 += (i32 * i26);
                }
            } else if (Test.bFld) {
                Test.fFld -= i33;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
