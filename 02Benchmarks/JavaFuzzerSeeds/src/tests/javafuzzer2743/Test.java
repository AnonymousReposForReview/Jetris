package tests.javafuzzer2743;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:42:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static volatile int iFld=18;
    public static float fFld=-20.82F;
    public static volatile short sFld=-14079;
    public static int iFld1=97;
    public static int iFld2=77;
    public static byte byFld=24;
    public boolean bFld=true;
    public static volatile float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];
    public static float fArrFld1[][]=new float[N][N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -10.695F);
        FuzzerUtils.init(Test.sArrFld, (short)13165);
        FuzzerUtils.init(Test.fArrFld1, 1.52F);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5) {

        double d=44.58232;
        int i6=-2, i7=14, i8=-238, i9=20036, i10=9, iArr1[]=new int[N];
        byte by=-121;
        float f=-7.26F;
        long l1=4642697801150743432L;

        FuzzerUtils.init(iArr1, -2);

        d = i5;
        for (i6 = 253; 3 < i6; i6 -= 3) {
            Test.instanceCount += (i6 ^ Test.iFld);
            i5 += -57327;
            for (i8 = i6; i8 < 19; i8++) {
                by = (byte)Test.instanceCount;
                switch ((((26793 >>> 1) % 2) * 5) + 106) {
                case 113:
                    i9 >>= 51012;
                    iArr1[i8] -= (int)f;
                    for (l1 = 1; l1 < 1; ++l1) {
                        i5 = (int)Test.instanceCount;
                        i9 += Test.iFld;
                        if (Test.iFld != 0) {
                        }
                        Test.instanceCount = 12;
                        try {
                            i10 = (-1270976545 % i8);
                            i9 = (i6 / i6);
                            i5 = (i6 / i5);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 116:
                    i10 = (int)l1;
                    break;
                }
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + by + Float.floatToIntBits(f) + l1 + i10 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i1, int i2, int i3) {

        double d1=82.67353;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -1);

        for (int i4 : iArr) {
            if (true) {
                i3 &= (int)(Test.instanceCount++);
                i3 &= (i1 - (-iMeth1(i1)));
                iArr[(-64561 >>> 1) % N] >>= (int)Test.instanceCount;
            }
            i1 = (int)Test.fFld;
        }
        Test.iFld = i2;
        d1 = 1;
        while (++d1 < 301) {
            i1 = 119;
            iArr[(int)(d1 + 1)] += i2;
            i2 = (int)Test.instanceCount;
            Test.instanceCount += (-58L + (d1 * d1));
            i3 += (int)((long)d1 | Test.sFld);
            Test.iFld *= (int)198L;
        }
        iArr[(17538 >>> 1) % N] += i3;
        long meth_res = i1 + i2 + i3 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(long l) {

        int i11=-2, i12=-164, i13=-30, i14=42671, i15=-14, i16=-189, i17=1, i18=153, iArr2[][]=new int[N][N],
            iArr3[]=new int[N];
        double d2=98.9185;
        byte by1=24;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -91);
        FuzzerUtils.init(iArr3, 21034);
        FuzzerUtils.init(lArr, 1258447400L);

        l -= (((Test.instanceCount + l) + (l + Test.iFld)) - sMeth(Test.iFld, Test.iFld, Test.iFld));
        iArr2[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = Test.iFld;
        for (i11 = 2; i11 < 130; i11++) {
            for (i13 = 1; i13 < 12; i13++) {
                for (i15 = 1; i15 < 2; i15++) {
                    i12 -= (int)l;
                    Test.instanceCount %= ((long)(d2) | 1);
                    Test.iFld = (int)Test.instanceCount;
                    d2 += i14;
                    switch (i13 + 108) {
                    case 108:
                        iArr2[i11][i11] = i13;
                        break;
                    case 109:
                        Test.fFld += i15;
                        i16 >>= Test.sFld;
                        Test.sFld *= (short)i16;
                        Test.instanceCount = by1;
                        break;
                    case 110:
                        Test.fArrFld = Test.fArrFld;
                    case 111:
                        Test.iFld += (i15 - Test.instanceCount);
                    case 112:
                        i12 = (int)Test.instanceCount;
                        break;
                    case 113:
                        i12 += (i15 * i15);
                    case 114:
                        Test.iFld -= (int)l;
                        break;
                    case 115:
                        i12 &= i14;
                        break;
                    case 116:
                        i16 <<= i14;
                        break;
                    case 117:
                    case 118:
                    case 119:
                        i12 += i14;
                        break;
                    case 120:
                        try {
                            i16 = (iArr2[i15 + 1][i13] % iArr2[i13 - 1][i13]);
                            iArr2[i15 + 1][i11] = (0 % Test.iFld);
                            i12 = (i11 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 121:
                        iArr2[i15 + 1] = iArr2[i13];
                    case 122:
                        i14 += i15;
                    case 123:
                        iArr3[i15 + 1] -= (int)l;
                        break;
                    case 124:
                        i16 += (((i15 * i17) + i13) - i15);
                        break;
                    case 125:
                    case 126:
                        Test.fFld += (((i15 * i13) + i17) - Test.fFld);
                        break;
                    case 127:
                        Test.iFld += 53;
                        break;
                    case 128:
                        iArr3[i11] = (int)-65302L;
                    case 129:
                        i16 += (((i15 * i11) + i11) - i14);
                        break;
                    case 130:
                        i14 -= Test.iFld;
                        break;
                    case 131:
                        Test.fFld = i13;
                        break;
                    case 132:
                        i17 = 192;
                        break;
                    case 133:
                        i14 += (i15 - Test.fFld);
                        break;
                    case 134:
                        iArr2[i11 - 1][i11 + 1] -= (int)Test.fFld;
                        break;
                    case 135:
                        i16 = Test.sFld;
                        break;
                    case 136:
                        iArr3 = iArr3;
                        break;
                    case 137:
                        i14 *= i13;
                        break;
                    case 138:
                        i17 = i15;
                        break;
                    case 139:
                        i12 <<= (int)Test.instanceCount;
                    case 140:
                        l += (i15 * Test.instanceCount);
                    case 141:
                        Test.iFld += (i15 - i11);
                        break;
                    case 142:
                        if (i11 != 0) {
                        }
                        break;
                    case 143:
                        if (false) break;
                        break;
                    case 144:
                        Test.instanceCount *= i11;
                        break;
                    case 145:
                        Test.iFld += (int)Test.fFld;
                        break;
                    case 146:
                        b = b;
                        break;
                    case 147:
                        i12 = i17;
                    case 148:
                        i17 += (i15 + i17);
                        break;
                    case 149:
                        if (i15 != 0) {
                        }
                        break;
                    case 150:
                        if (b) break;
                    case 151:
                        i17 = Test.iFld1;
                        break;
                    case 152:
                        Test.iFld2 >>= (int)Test.instanceCount;
                        break;
                    case 153:
                        Test.instanceCount *= 76;
                        break;
                    case 154:
                        Test.instanceCount *= i13;
                        break;
                    case 155:
                        d2 *= i16;
                    case 156:
                        lArr[i15] *= 38;
                    case 157:
                    case 158:
                        Test.sFld >>= (short)i16;
                        break;
                    case 159:
                        Test.iFld2 = (int)l;
                        break;
                    case 160:
                        i14 = Test.iFld2;
                        break;
                    case 161:
                        by1 += (byte)(i15 * i15);
                    case 162:
                        l += i15;
                        break;
                    case 163:
                        Test.sArrFld[i11 + 1] += (short)i15;
                        break;
                    case 164:
                        Test.iFld1 = Test.iFld2;
                        break;
                    case 165:
                        Test.fArrFld1 = Test.fArrFld1;
                        break;
                    case 166:
                        iArr3[i13 - 1] *= by1;
                        break;
                    case 167:
                        Test.iFld1 <<= -185;
                        break;
                    case 168:
                        Test.iFld += (int)l;
                        break;
                    case 169:
                        i17 += (((i15 * Test.iFld2) + l) - Test.instanceCount);
                    case 170:
                        d2 -= -11530;
                        break;
                    case 171:
                        i14 <<= i18;
                        break;
                    case 172:
                        Test.fFld -= l;
                    case 173:
                        Test.fFld = i16;
                        break;
                    case 174:
                        iArr2[i11 + 1][i15] += i15;
                        break;
                    case 175:
                        i18 += (int)Test.instanceCount;
                    case 176:
                        Test.iFld1 -= i11;
                        break;
                    case 177:
                        Test.instanceCount = i11;
                        break;
                    }
                }
            }
        }
        long meth_res = l + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d2) + by1 + i17 + (b ? 1 : 0) +
            i18 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i19=-11, i20=-75, i21=-13, i22=2, i23=38222, i24=-63, i25=-16986, i26=13, i27=-36351;
        double d3=1.79686;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-41);

        i = (int)(iMeth(Test.instanceCount) + -1.53981);
        Test.fFld += (float)d3;
        Test.iFld >>>= Test.iFld;
        i19 = 126;
        do {
            Test.instanceCount += (i19 - i19);
            Test.iFld1 -= (int)Test.fFld;
            Test.iFld += i19;
        } while (--i19 > 0);
        for (i20 = 4; i20 < 252; ++i20) {
            for (i22 = 6; i22 < 101; i22++) {
                Test.iFld2 *= i20;
                Test.instanceCount += (-17082 + (i22 * i22));
                Test.iFld1 *= Test.iFld2;
                byArr[i20] <<= (byte)Test.iFld2;
                Test.iFld2 += (51820 + (i22 * i22));
                Test.iFld >>= Test.iFld2;
            }
            switch ((i20 % 2) + 104) {
            case 104:
                i21 = Test.byFld;
                Test.iFld += (248 + (i20 * i20));
                Test.iFld1 = i23;
                Test.instanceCount += (i20 * i20);
                break;
            case 105:
                for (i24 = 3; i24 < 101; i24++) {
                    iArrFld[i20 + 1][i20 + 1] = Test.iFld1;
                    Test.iFld += (((i24 * i20) + Test.fFld) - i25);
                }
                i26 = 1;
                while (++i26 < 101) {
                    Test.iFld1 -= (int)1.607F;
                    Test.iFld = i26;
                    Test.instanceCount += (long)(89.624F + (i26 * i26));
                    i23 -= (int)50.752F;
                    Test.fArrFld[(i >>> 1) % N] += i26;
                }
                if (bFld) continue;
                break;
            default:
                Test.instanceCount -= i27;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
