package tests.javafuzzer2707;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:51:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=45538L;
    public static int iFld=-20895;
    public static double dFld=-1.111276;
    public static short sFld=10400;
    public float fFld=0.142F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 55248);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static int iMeth(long l1, float f, int i5) {


        Test.iFld ^= (int)(l1 - 95L);
        long meth_res = l1 + Float.floatToIntBits(f) + i5;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i11, byte by1) {

        int i12=-41952, i13=130, i14=-238, i15=-4;
        long l2=-33660L;
        float f2=-2.649F;

        Test.iArrFld[(-14 >>> 1) % N] = (int)Test.instanceCount;
        Test.instanceCount *= Test.iFld;
        for (i12 = 6; i12 < 151; ++i12) {
            i11 -= i11;
            for (l2 = 1; l2 < 11; ++l2) {
                i14 = Test.iFld;
                try {
                    Test.iFld = (-107 / Test.iFld);
                    i11 = (-509954830 % i13);
                    i11 = (-197 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                for (f2 = 1; f2 < 2; ++f2) {
                    switch (((i11 >>> 1) % 4) + 29) {
                    case 29:
                        i11 += (0 + (f2 * f2));
                        i13 -= i12;
                        Test.instanceCount -= Test.sFld;
                        break;
                    case 30:
                        i11 = i12;
                        Test.sFld += (short)i12;
                        Test.instanceCount >>= by1;
                        break;
                    case 31:
                        Test.instanceCount = Test.iFld;
                    case 32:
                        Test.instanceCount >>>= 2554878478L;
                    default:
                        Test.instanceCount *= i11;
                    }
                }
            }
        }
        long meth_res = i11 + by1 + i12 + i13 + l2 + i14 + Float.floatToIntBits(f2) + i15;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i8, int i9, int i10) {

        int i16=56015, i17=-627;
        float f3=-2.542F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4476969842456803792L);

        Test.dFld += lArr[(Test.iFld >>> 1) % N];
        Test.sFld += (short)(--i8);
        lMeth(i9, (byte)(-11));
        i16 = 1;
        do {
            Test.instanceCount = i16;
            i8 += (i16 | Test.instanceCount);
        } while (++i16 < 332);
        f3 = Test.instanceCount;
        i17 = 1;
        do {
            switch ((i17 % 2) + 36) {
            case 36:
                i8 <<= (int)Test.instanceCount;
            case 37:
                f3 %= (Test.instanceCount | 1);
                Test.instanceCount -= -68L;
                i9 += (int)Test.instanceCount;
                break;
            }
            f3 *= f3;
        } while (++i17 < 135);
        Test.instanceCount += -27176;
        vMeth1_check_sum += i8 + i9 + i10 + i16 + Float.floatToIntBits(f3) + i17 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, long l) {

        int i1=94, i2=59, i3=-30355, i4=-3, i6=11, i7=-7;
        byte by=4;
        float f1=122.92F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -2320013026253399655L);

        for (i1 = 1; i1 < 193; i1++) {
            try {
                Test.iArrFld[i1 + 1] = (-46335 / i);
                i = (i1 % -50242);
                i = (Test.iArrFld[i1 - 1] % i2);
            } catch (ArithmeticException a_e) {}
            for (i3 = 1; 8 > i3; i3++) {
                Test.instanceCount += i3;
                i2 *= (int)(iMeth(i4 - Test.iFld, i2 / (l | 1), Integer.reverseBytes(i)) + ((-(l - -40669)) *
                    Test.iArrFld[i3 + 1]));
                by = (byte)((long)((Test.dFld * Test.iFld) + iMeth(-1109488738L, f1, Test.iFld)) ^ Test.iArrFld[i1 -
                    1]);
                i += (((i3 * Test.iFld) + f1) - f1);
                for (i6 = 1; i6 < 2; ++i6) {
                    f1 += ((long)i6 | (long)i7);
                    vMeth1(i, i3, Test.iFld);
                    lArr1[i6][i6 + 1] = 205;
                    Test.iArrFld = Test.iArrFld;
                    i2 = Test.iFld;
                    Test.iFld += i3;
                }
                f1 = 40356;
            }
        }
        vMeth_check_sum += i + l + i1 + i2 + i3 + i4 + by + Float.floatToIntBits(f1) + i6 + i7 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=-32523, i19=-20433, i20=38560, i21=128, i22=17591, i23=-6, i24=79, i25=10;
        float f4=53.561F;
        byte by2=-77;
        boolean b=false;

        vMeth(Test.iFld, Test.instanceCount);
        for (i18 = 5; i18 < 265; i18++) {
            for (i20 = 5; i20 < 97; ++i20) {
                try {
                    i21 = (Test.iArrFld[i20 - 1] / 864412171);
                    Test.iArrFld[i18 - 1] = (3884 % i19);
                    i21 = (Test.iArrFld[i20 + 1] % 8581);
                } catch (ArithmeticException a_e) {}
                i19 += (((i20 * f4) + Test.iFld) - Test.instanceCount);
            }
            switch ((((i18 >>> 1) % 10) * 5) + 91) {
            case 124:
                lArrFld[i18 + 1] = i18;
                Test.iArrFld[i18] = (int)fFld;
                break;
            case 103:
                Test.dFld %= (Test.instanceCount | 1);
            case 137:
                Test.iFld += (i18 * i18);
            case 118:
                for (i22 = 6; i22 < 97; ++i22) {
                    for (i24 = 1; i24 < 2; ++i24) {
                        Test.sFld <<= (short)i20;
                    }
                    i23 = (int)Test.instanceCount;
                    Test.instanceCount += i19;
                    switch ((i22 % 1) + 35) {
                    case 35:
                        i19 <<= Test.iFld;
                        fFld = i21;
                        break;
                    }
                }
                Test.instanceCount += -57856;
                Test.iArrFld[i18 + 1] = i21;
                break;
            case 127:
                if (b) {
                    switch ((i18 % 6) + 104) {
                    case 104:
                        i21 %= (int)1.126862;
                        if (b) {
                            i21 >>= -26782;
                        } else if (false) {
                            switch (((i18 % 3) * 5) + 74) {
                            case 81:
                                fFld += (float)Test.dFld;
                                break;
                            case 79:
                                fFld += f4;
                                by2 <<= (byte)i24;
                                break;
                            case 76:
                                by2 += (byte)(i18 - i21);
                                break;
                            }
                        }
                        break;
                    case 105:
                        Test.dFld *= Test.instanceCount;
                        break;
                    case 106:
                        f4 -= i21;
                        break;
                    case 107:
                        try {
                            i21 = (-1500575914 % i20);
                            i19 = (115 % Test.iArrFld[i18 - 1]);
                            i23 = (-23941 / Test.iArrFld[i18 - 1]);
                        } catch (ArithmeticException a_e) {}
                    case 108:
                        i21 <<= 5;
                    case 109:
                        Test.instanceCount = -36951;
                        break;
                    }
                } else if (b) {
                    Test.iFld *= i22;
                } else {
                    by2 += (byte)Test.iFld;
                }
                break;
            case 139:
                i21 = i23;
            case 119:
                Test.iArrFld[i18] *= i18;
                break;
            case 131:
                i21 += (((i18 * i23) + i23) - i19);
                break;
            case 135:
                i21 -= i18;
            case 113:
                Test.instanceCount += (((i18 * i18) + i18) - f4);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
