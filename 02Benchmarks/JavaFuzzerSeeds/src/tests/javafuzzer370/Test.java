package tests.javafuzzer370;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:55:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5612733651186495112L;
    public volatile int iFld=48452;
    public static boolean bFld=true;
    public static int iFld1=-25810;
    public static double dFld=-85.30594;
    public static short sFld=-22333;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public static byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13391);
        FuzzerUtils.init(Test.lArrFld, -138L);
        FuzzerUtils.init(Test.byArrFld, (byte)115);
        FuzzerUtils.init(Test.fArrFld, -41.244F);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1, int i4, int i5) {

        int i6=-3, i7=-14, i8=20696;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, 60627L);
        FuzzerUtils.init(dArr, 56.102974);

        Test.instanceCount -= Test.instanceCount;
        Test.iFld1 >>= i5;
        for (i6 = 3; i6 < 231; ++i6) {
            i8 = 1;
            while (++i8 < 7) {
                byte by=35;
                Test.bFld = true;
                Test.iArrFld[i8] -= 11;
                f1 = f1;
                Test.iFld1 += (((i8 * f1) + i4) - i5);
                lArr1 = FuzzerUtils.long1array(N, (long)41898L);
                Test.instanceCount += by;
                Test.iFld1 += (((i8 * f1) + i4) - Test.instanceCount);
                Test.iFld1 += i7;
                Test.instanceCount = (long)1.128833;
            }
            Test.instanceCount = i7;
            i4 += (int)Test.instanceCount;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i, int i1, long l) {

        double d=-1.27803;
        int i2=64366, i3=8, i9=9, i10=13, i11=-35058;
        float f=-3.716F;

        for (d = 3; 124 > d; ++d) {
            i3 -= (-i1);
            i3 = (int)(((i3 << i1) + (i + i3)) + (f - (i1 - Test.iFld1)));
            i += (int)(-81L + (d * d));
            vMeth(-2.470F, i3, 44932);
            for (i9 = (int)(d); i9 < 13; i9++) {
                i11 = 1;
                while (++i11 < 1) {
                    byte by1=-2;
                    i *= (int)l;
                    Test.lArrFld[i9 - 1][i11 - 1] *= (long)1.722F;
                    l += (((i11 * i3) + f) - Test.iFld1);
                    i <<= i;
                    Test.iArrFld[i9] &= (int)-10L;
                    Test.byArrFld[(int)(d)] = (byte)Test.iFld1;
                    Test.iArrFld[i11] = (int)Test.instanceCount;
                    by1 <<= (byte)i9;
                }
            }
        }
        long meth_res = i + i1 + l + Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f) + i9 + i10 + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public boolean bMeth() {

        int i12=-178, i13=249, i14=-1, i15=-135;
        long l2=-9136213491410763456L, lArr[]=new long[N];
        short s=-19921;

        FuzzerUtils.init(lArr, -2860827942L);

        lArr = (lArr = (lArr = (lArr = lArr)));
        Test.iArrFld[(iFld >>> 1) % N] = (int)(iFld += (int)(iMeth(Test.iFld1, iFld, Test.instanceCount) -
            Test.instanceCount));
        iFld += -12747;
        for (i12 = 3; 210 > i12; ++i12) {
            try {
                Test.iArrFld[i12 - 1] = (i13 / -38636);
                Test.iArrFld[i12 + 1] = (-1505053366 / Test.iFld1);
                Test.iFld1 = (i13 / -36668);
            } catch (ArithmeticException a_e) {}
            i13 += (i12 ^ iFld);
            Test.instanceCount += (i12 * i12);
            Test.instanceCount += Test.iFld1;
            lArr[i12 - 1] -= 117L;
        }
        Test.iArrFld[(i13 >>> 1) % N] |= i12;
        Test.fArrFld[(iFld >>> 1) % N] = i13;
        for (l2 = 8; l2 < 314; ++l2) {
            i15 = 1;
            while (++i15 < 5) {
                Test.iFld1 = i15;
                s >>>= (short)40L;
            }
        }
        long meth_res = i12 + i13 + l2 + i14 + i15 + s + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i16=-152, i17=232, i18=-243, i19=-198, i20=35654, i21=-220;
        byte by2=-29;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)26288);

        sArr[(iFld >>> 1) % N] *= (short)(-Test.iArrFld[(iFld >>> 1) % N]);
        Test.bFld = bMeth();
        for (i16 = 9; i16 < 154; ++i16) {
            if (Test.bFld) {
                Test.instanceCount += Test.instanceCount;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)37502);
                if (Test.bFld) break;
                for (i18 = 173; i18 > 9; --i18) {
                    Test.fArrFld[i18 + 1] += Test.instanceCount;
                    for (i20 = 1; i20 < 2; ++i20) {
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-208);
                        Test.instanceCount += i20;
                        i19 -= i17;
                        switch (((i20 % 5) * 5) + 86) {
                        case 90:
                            Test.dFld = Test.dFld;
                            Test.iArrFld[i16 + 1] = (int)Test.instanceCount;
                            i21 |= Test.sFld;
                            Test.iArrFld[i18] += Test.iFld1;
                            break;
                        case 99:
                            i21 = -175;
                            break;
                        case 91:
                            i17 -= iFld;
                            Test.dFld -= Test.instanceCount;
                            i19 += (int)Test.instanceCount;
                            Test.lArrFld[i16 - 1][i18] <<= i21;
                            break;
                        case 88:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 111:
                            if (Test.bFld) break;
                            break;
                        default:
                            Test.instanceCount += Test.iFld1;
                            Test.iArrFld = Test.iArrFld;
                            Test.byArrFld[i16] += (byte)-12;
                        }
                        i17 = i17;
                        iFld = by2;
                    }
                }
            } else if (Test.bFld) {
                Test.iFld1 *= (int)Test.instanceCount;
            } else {
                try {
                    i21 = (Test.iFld1 / i19);
                    Test.iFld1 = (Test.iFld1 % -16005);
                    Test.iArrFld[i16 + 1] = (Test.iFld1 / -50069);
                } catch (ArithmeticException a_e) {}
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
