package tests.javafuzzer2725;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:18:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=25181L;
    public static int iFld=-31094;
    public static double dFld=-56.99642;
    public static byte byFld=-4;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[][]=new double[N][N];
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -17943L);
        FuzzerUtils.init(Test.dArrFld, 0.18475);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d1, double d2) {

        double d3=-111.123840, dArr[]=new double[N];
        int i12=61011, i13=-158, i14=-55248, i15=0, i16=52849, i17=-5, i18=4, iArr[][]=new int[N][N];
        float f=-50.385F;
        byte by=-35;
        boolean b1=false;

        FuzzerUtils.init(iArr, -124);
        FuzzerUtils.init(dArr, 2.58780);

        for (d3 = 2; d3 < 215; ++d3) {
            for (i13 = 1; i13 < 8; ++i13) {
                f -= -4;
                iArr[(int)(d3)][i13] = Test.iFld;
                by += (byte)(i13 * i13);
                for (i15 = 1; i15 < 2; i15++) {
                    Test.iFld -= (int)Test.instanceCount;
                    i12 = i14;
                    dArr[(i15 >>> 1) % N] -= by;
                }
            }
            i16 >>>= i16;
            if (b1) continue;
            for (i17 = (int)(d3); i17 < 8; ++i17) {
                Test.instanceCount += (i17 * i14);
                i16 += i15;
                i16 <<= by;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) +
            i12 + i13 + i14 + Float.floatToIntBits(f) + by + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1(boolean b, int i8, int i9) {

        int i10=-114, i11=243, i19=-5, i20=5, i21=-38081, i22=-58922, i23=-6;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)4662);

        for (i10 = 9; i10 < 151; ++i10) {
            vMeth(Test.dFld, Test.dFld);
            Test.byFld *= (byte)i8;
        }
        for (i19 = 8; i19 < 227; ++i19) {
            sArr[i19 - 1][i19 + 1] <<= (short)Test.iFld;
            Test.instanceCount += (i19 + Test.instanceCount);
            Test.dFld *= 97.37;
        }
        i8 -= (int)Test.instanceCount;
        i11 += i19;
        for (i21 = 7; 338 > i21; ++i21) {
            i23 = 1;
            do {
                Test.lArrFld[i23] *= -24119L;
                Test.iFld <<= (int)Test.instanceCount;
                Test.byFld <<= (byte)205;
                Test.dArrFld = FuzzerUtils.double2array(N, (double)36.11451);
            } while (++i23 < 5);
        }
        long meth_res = (b ? 1 : 0) + i8 + i9 + i10 + i11 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i, int i1, int i2) {

        double d=0.93975;
        int i3=-47278, i4=17839, i5=-33926, i6=-59230, i7=-206, i24=206, iArr1[]=new int[N];
        short s=-3892;
        float f1=-72.806F;

        FuzzerUtils.init(iArr1, -51578);

        for (d = 5; d < 226; d++) {
            for (i4 = 1; i4 < 7; i4++) {
                switch ((i4 % 10) + 113) {
                case 113:
                    for (i6 = 2; 1 < i6; i6--) {
                        Test.lArrFld[(int)(d)] -= i3;
                        if (true) {
                            iMeth1(true, i4, i7);
                        }
                        i += (((i6 * Test.iFld) + i) - Test.instanceCount);
                        Test.iFld = i;
                        i += (int)d;
                        iArr1[(int)(d - 1)] = -245;
                        Test.instanceCount *= s;
                    }
                case 114:
                    iArr1[(int)(d - 1)] = i3;
                    i3 = 15086;
                    break;
                case 115:
                    iArr1[(int)(d)] = i6;
                    break;
                case 116:
                    Test.instanceCount = -2503;
                    break;
                case 117:
                    Test.dArrFld[(int)(d - 1)][i4] -= Test.instanceCount;
                    break;
                case 118:
                    if (i24 != 0) {
                    }
                case 119:
                    f1 -= f1;
                case 120:
                    Test.instanceCount >>>= Test.iFld;
                    break;
                case 121:
                    i1 = i;
                case 122:
                    i = (int)Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = i + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + s + i24 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-21.663F;
        int i25=103;

        Test.iFld <<= (int)((iMeth(Test.iFld, Test.iFld, Test.iFld) - Test.iFld) + Test.dFld);
        f2 = 361;
        while (--f2 > 0) {
            Test.iFld = (int)Test.instanceCount;
            i25 = 1;
            while (++i25 < 70) {
                Test.iFld += Test.byFld;
                Test.iFld = (int)f2;
                iArrFld[(int)(f2 + 1)] = Test.iFld;
                Test.dFld -= Test.byFld;
                Test.instanceCount -= i25;
            }
            fArrFld = fArrFld;
            Test.iFld += (int)(((f2 * Test.instanceCount) + Test.iFld) - Test.iFld);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
