package tests.javafuzzer1290;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:41:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public double dFld=-70.12974;
    public static volatile short sFld=11159;
    public float fFld=-1.98F;
    public static boolean bArrFld[]=new boolean[N];
    public volatile int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(double d1, int i6) {

        int i7=10, i8=-7, i9=8328, i10=-217, i11=19270, iArr[]=new int[N];
        float f1=88.889F;
        short s=-13552;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 556827537L);
        FuzzerUtils.init(iArr, -6);

        if (b1) {
            i7 -= (int)f1;
            i8 = 1;
            while (++i8 < 262) {
                i7 <<= s;
                i9 = 6;
                do {
                    switch ((i8 % 10) + 22) {
                    case 22:
                    case 23:
                        i6 = i9;
                        i6 = i7;
                        lArr[i8] *= i9;
                        for (i10 = 1; i10 < 3; ++i10) {
                            lArr[i9 + 1] = i11;
                            i6 += (i10 - i9);
                            Test.instanceCount += Test.instanceCount;
                            Test.instanceCount ^= 86;
                            iArr[i8 + 1] = i10;
                        }
                        break;
                    case 24:
                        i6 *= (int)f1;
                        break;
                    case 25:
                        iArr[i9] <<= i7;
                        break;
                    case 26:
                        if (b1) break;
                    case 27:
                        if (false) continue;
                        break;
                    case 28:
                        try {
                            i7 = (i9 / -39095);
                            iArr[i9 + 1] = (iArr[i9 + 1] % 231);
                            i11 = (i7 % iArr[i8]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 29:
                        Test.bArrFld[i9] = b1;
                        break;
                    case 30:
                        i11 -= 184;
                    case 31:
                        d1 = Test.instanceCount;
                        break;
                    }
                } while ((i9 -= 3) > 0);
            }
        } else {
            lArr[(i8 >>> 1) % N] ^= i8;
        }
        long meth_res = Double.doubleToLongBits(d1) + i6 + i7 + Float.floatToIntBits(f1) + i8 + s + i9 + i10 + i11 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l, long l1) {

        double d=-82.78681;
        int i12=11, i13=55513, i14=59294, i15=4, iArr1[]=new int[N];
        short s1=4315;
        float f2=0.360F;

        FuzzerUtils.init(iArr1, 30872);

        d *= Math.max(lMeth(d, i12), Test.instanceCount);
        l /= (i12 | 1);
        switch ((((i12 >>> 1) % 2) * 5) + 8) {
        case 18:
            d += i12;
            l1 >>= s1;
        case 13:
            f2 = i12;
            i13 = 1;
            do {
                i12 += i13;
                iArr1[i13] *= i12;
                i12 |= (int)l1;
                i12 = i13;
                for (i14 = 1; i14 < 12; i14++) {
                    f2 = 1.69F;
                    i12 += i14;
                }
                i12 += (((i13 * l) + i14) - i12);
            } while (++i13 < 136);
            break;
        default:
            f2 /= (l1 | 1);
        }
        vMeth1_check_sum += l + l1 + Double.doubleToLongBits(d) + i12 + s1 + Float.floatToIntBits(f2) + i13 + i14 + i15
            + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i, int i1) {

        int i2=-15926, i3=-8, i4=52619, i5=31365, i16=12, i17=2, iArr2[]=new int[N];
        float f=-50.547F;
        boolean b=true;
        byte by=105;

        FuzzerUtils.init(iArr2, 53480);

        for (i2 = 9; i2 < 165; i2++) {
            i1 += (i2 ^ (long)f);
            i3 += (int)(((++dFld) + (i3 / (Test.instanceCount | 1))) - i2);
            switch ((i2 % 6) + 84) {
            case 84:
                Test.bArrFld[i2] = b;
                for (i4 = i2; i4 < 10; ++i4) {
                    i += (++by);
                }
                break;
            case 85:
                vMeth1(Test.instanceCount, Test.instanceCount);
                i3 -= i2;
                break;
            case 86:
                Test.instanceCount += -1337L;
                break;
            case 87:
                for (i16 = 1; i16 < 10; i16++) {
                    Test.sFld = (short)i17;
                    i1 += (i16 ^ i2);
                    iArr2[i16] += i16;
                    f = f;
                }
                break;
            case 88:
                by ^= (byte)i17;
                break;
            case 89:
                i = i1;
                break;
            default:
                i ^= i;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f) + (b ? 1 : 0) + i4 + i5 + by + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i18=38, i19=23600, i20=16912, i21=-48677, i22=-1, i23=133;
        byte by1=-115;
        boolean b2=false;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 2252461489L);

        vMeth(i18, i18);
        i19 = 1;
        while (++i19 < 349) {
            Test.instanceCount = by1;
            iArrFld[i19 - 1][i19] -= (int)-2.46F;
            switch ((i19 % 2) + 30) {
            case 30:
                lArr1[i19][i19 - 1] -= i19;
                i18 = i19;
                fFld += Test.sFld;
                for (i20 = 4; i20 < 72; i20++) {
                    i21 += (int)Test.instanceCount;
                    for (i22 = 1; i22 < 2; ++i22) {
                        if (b2) {
                            Test.instanceCount = i23;
                            switch ((i22 % 8) + 125) {
                            case 125:
                                Test.instanceCount >>= i21;
                                fFld -= (float)dFld;
                                i21 += (int)fFld;
                            case 126:
                                iArrFld[i20 + 1][i22 - 1] = i22;
                                Test.instanceCount += (long)fFld;
                                i18 += -260;
                                break;
                            case 127:
                                i21 |= i19;
                                iArrFld[i22 - 1][i19 - 1] = i18;
                                by1 *= (byte)i18;
                                break;
                            case 128:
                                i23 += -9;
                                if (true) break;
                                fFld *= (float)dFld;
                                switch ((i22 % 6) + 72) {
                                case 72:
                                    iArrFld[i22][(i18 >>> 1) % N] <<= Test.sFld;
                                    fFld -= i22;
                                    Test.instanceCount = i22;
                                    break;
                                case 73:
                                    i23 = (int)dFld;
                                    break;
                                case 74:
                                    Test.instanceCount = i18;
                                case 75:
                                    fFld = i22;
                                case 76:
                                    i21 *= (int)Test.instanceCount;
                                    break;
                                case 77:
                                    Test.sFld >>= (short)Test.instanceCount;
                                    break;
                                }
                            case 129:
                                i23 -= i20;
                                break;
                            case 130:
                                i23 = (int)Test.instanceCount;
                                break;
                            case 131:
                                fFld -= i18;
                            case 132:
                                b2 = b2;
                                break;
                            }
                        } else if (true) {
                            fFld += fFld;
                        } else {
                            i18 = (int)fFld;
                        }
                    }
                }
                break;
            case 31:
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
