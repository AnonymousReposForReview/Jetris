package tests.javafuzzer1519;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:03:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4270L;
    public volatile int iFld=-20274;
    public float fFld=2.61F;
    public byte byFld=-23;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public void vMeth(byte by, int i, int i1) {

        double d=-89.9535;

        d = i1;
        Test.instanceCount -= i1;
        i = (i++);
        vMeth_check_sum += by + i + i1 + Double.doubleToLongBits(d);
    }

    public static float fMeth() {

        int i2=-17520, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -35);
        FuzzerUtils.init(lArr, -10L);

        i2 -= (int)(((i2 - i2) - i2) - -23L);
        i2 >>>= i2;
        i2 = (int)(((i2 - Test.instanceCount) % (Test.instanceCount | 1)) + (Test.instanceCount++));
        Test.instanceCount <<= ((--iArr[(i2 >>> 1) % N]) + ((++lArr[(i2 >>> 1) % N]) * iArr[(i2 >>> 1) % N]));
        long meth_res = i2 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i11, int i12) {

        int i13=215, i15=0, i16=137, i17=-4, i18=-238, i19=-172, i20=25, i21=6, iArr1[]=new int[N];
        float f=111.39F;
        long l1=1872500219L;
        boolean b=false;

        FuzzerUtils.init(iArr1, 21178);

        fMeth();
        i13 = 1;
        while (++i13 < 178) {
            Test.instanceCount = i13;
            f += i13;
            if (false) continue;
            l1 = -16709;
            i11 <<= (int)Test.instanceCount;
        }
        for (i15 = 1; 332 > i15; ++i15) {
            for (i17 = 1; i17 < 5; i17++) {
                if (b) break;
            }
            i19 = 1;
            do {
                i16 >>= (int)11L;
                for (i20 = 1; i20 < 1; i20++) {
                    i12 += i20;
                    l1 *= i20;
                }
            } while (++i19 < 5);
        }
        long meth_res = i11 + i12 + i13 + Float.floatToIntBits(f) + l1 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + i19 +
            i20 + i21 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(int i3, int i4, long l) {

        int i5=-190, i6=-103, i7=0, i8=1, i9=104, i10=109, i22=-4, i23=171;
        boolean b1=false;
        double d2=-2.61279;

        vMeth((byte)(-78), Integer.reverseBytes(i5--), -iFld);
        for (i6 = 12; i6 < 370; ++i6) {
            l = Test.instanceCount;
        }
        i4 *= (int)(Math.abs(-(i6 + -155)) - (++i3));
        for (i8 = 9; 319 > i8; ++i8) {
            if (i8 != 0) {
                vMeth1_check_sum += i3 + i4 + l + i5 + i6 + i7 + i8 + i9 + i10 + i22 + i23 + (b1 ? 1 : 0) +
                    Double.doubleToLongBits(d2);
                return;
            }
            i10 = (int)((iMeth(i5, i3) - fFld) - Test.instanceCount);
            i9 -= 141;
            i9 -= (int)Test.instanceCount;
            Test.instanceCount += i3;
            for (i22 = 1; i22 < 5; ++i22) {
                i10 = i9;
                if (b1) {
                    iArrFld[i22 + 1] = iFld;
                    i7 += i22;
                } else {
                    Test.instanceCount = (long)d2;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + l + i5 + i6 + i7 + i8 + i9 + i10 + i22 + i23 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        double d1=0.12231;
        short s=10021;
        int i24=2, i25=-1, i26=-63716, i27=-21531, i28=0, i29=-13;
        boolean b2=true, b3=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 3375657287L);

        vMeth((byte)(iFld + fMeth()), (int)(((iFld * iFld) - (iFld--)) - Test.instanceCount), (int)(iFld -= (int)d1));
        vMeth1(-235, iFld, Test.instanceCount);
        Test.instanceCount *= (long)d1;
        Test.instanceCount = iFld;
        s += (short)iFld;
        iFld = iFld;
        iArrFld[(iFld >>> 1) % N] = (int)Test.instanceCount;
        iArrFld[(iFld >>> 1) % N] = iFld;
        iFld = (int)Test.instanceCount;
        Test.instanceCount = iFld;
        if (b2) {
            Test.instanceCount = iFld;
            fArrFld[(iFld >>> 1) % N] = i24;
            i24 -= iFld;
        } else {
            i25 = 1;
            while (++i25 < 314) {
                for (i26 = 4; i26 < 80; ++i26) {
                    byFld += (byte)(((i26 * fFld) + i27) - iFld);
                    lArr1[i26 - 1] >>= i25;
                    Test.instanceCount -= -147;
                    i24 *= i27;
                    Test.instanceCount >>= -10;
                    for (i28 = 1; 2 > i28; i28 += 3) {
                        i24 = i29;
                        Test.instanceCount -= Test.instanceCount;
                        iArrFld[i28 - 1] = (int)Test.instanceCount;
                        iFld = (int)189L;
                        Test.instanceCount += (-158L + (i28 * i28));
                        b3 = false;
                    }
                    d1 = Test.instanceCount;
                }
                iArrFld[i25 + 1] = i25;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vMeth1
//DEBUG  fMeth ->  fMeth mainTest iMeth vMeth1
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
