package tests.javafuzzer3261;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:03:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=203L;
    public static float fFld=-98.784F;
    public int iFld=-61;
    public byte byFld=4;
    public volatile double dFld=-100.55044;

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-29318, i8=-9, i9=2, i10=227, i11=-9, i12=228, iArr[]=new int[N];
        short s=3417;
        float f1=-1.379F;
        double d=-1.59211, dArr[]=new double[N];

        FuzzerUtils.init(iArr, 56708);
        FuzzerUtils.init(dArr, -92.38670);

        for (i7 = 7; i7 < 156; i7++) {
            for (i9 = 1; i9 < 11; i9++) {
                iArr[i9] >>>= i9;
                i8 += s;
                f1 -= 125.249F;
                for (i11 = 1; i11 < 2; i11++) {
                    Test.instanceCount -= (long)Test.fFld;
                    i8 >>= i7;
                    i10 += (i11 ^ i10);
                    i10 += i11;
                    iArr[i11] <<= i7;
                    switch (((i9 % 2) * 5) + 124) {
                    case 127:
                        Test.instanceCount += (((i11 * i12) + f1) - Test.instanceCount);
                        if (i11 != 0) {
                            vMeth1_check_sum += i7 + i8 + i9 + i10 + s + Float.floatToIntBits(f1) + i11 + i12 +
                                Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                    case 125:
                        i10 = (int)d;
                    default:
                        dArr[i7] = -12;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + s + Float.floatToIntBits(f1) + i11 + i12 + Double.doubleToLongBits(d)
            + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static float fMeth(int i5, float f, int i6) {

        float f2=1.745F;
        int i13=5, i14=-220, i15=-34129, i16=14091, i17=9, i18=12, iArr1[]=new int[N];
        short s1=-24662;

        FuzzerUtils.init(iArr1, -10);

        vMeth1();
        for (f2 = 300; f2 > 14; f2 -= 3) {
            iArr1[(int)(f2)] += (int)Test.instanceCount;
            Test.instanceCount = i5;
            for (i14 = 16; i14 > 1; --i14) {
                s1 |= (short)i6;
                Test.instanceCount += i14;
                Test.instanceCount -= Test.instanceCount;
                Test.fFld += 93.0F;
                i16 = 1;
                while (++i16 < 2) {
                    i5 = i15;
                }
                for (i17 = 1; i17 < 2; i17++) {
                    iArr1[i17] -= -106;
                }
                Test.fFld += 24.977F;
            }
            i15 ^= i17;
        }
        long meth_res = i5 + Float.floatToIntBits(f) + i6 + Float.floatToIntBits(f2) + i13 + i14 + i15 + s1 + i16 + i17
            + i18 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i=95, i1=192, i2=2, i3=-45464, i4=8, i19=14, i20=-39124;
        short s2=-14679, sArr[]=new short[N];
        double d1=-1.78853;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)13208);
        FuzzerUtils.init(fArr, 1.449F);

        for (i = 16; i < 264; ++i) {
            Test.fFld -= (Test.instanceCount++);
            for (i2 = 1; i2 < 7; i2++) {
                sArr[i + 1] = (short)-76.367F;
                if (b) {
                    i4 = 1;
                    do {
                        Test.fFld += ((i1--) + i);
                    } while (++i4 < 2);
                    i3 += (int)fMeth(i3, Test.fFld, i);
                    if (b) {
                        s2 -= (short)i;
                    } else if (true) {
                        i1 -= (int)-12L;
                        i3 *= (int)Test.instanceCount;
                        for (i19 = 1; i19 < 2; ++i19) {
                            fArr[i] = 7;
                            if (false) break;
                        }
                    } else if (b) {
                        i3 *= (int)d1;
                        vMeth_check_sum += i + i1 + i2 + i3 + i4 + s2 + i19 + i20 + Double.doubleToLongBits(d1) + (b ?
                            1 : 0) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    } else {
                        i1 = i2;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + s2 + i19 + i20 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=252, i22=-28994, i23=-62472, i24=-3, i25=-123, iArr2[]=new int[N];
        short s3=-18116;
        float f3=-1.604F, fArr1[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, -6);
        FuzzerUtils.init(fArr1, -46.726F);

        vMeth();
        i21 = 1;
        do {
            Test.instanceCount += (((i21 * Test.fFld) + s3) - i21);
            f3 = 1;
            while (++f3 < 196) {
                iFld = i21;
                iFld = byFld;
                if (b1) break;
            }
            iArr2[i21] ^= iFld;
            switch ((i21 % 7) + 46) {
            case 46:
                Test.fFld = iFld;
                Test.fFld *= i21;
                break;
            case 47:
                try {
                    iFld = (-178 % iFld);
                    iFld = (i21 / iFld);
                    iFld = (iFld % -580400080);
                } catch (ArithmeticException a_e) {}
                for (i22 = 6; i22 < 196; ++i22) {
                    iFld += i22;
                    i23 *= i22;
                    iFld += i22;
                    Test.fFld = f3;
                    iFld <<= -8;
                }
                Test.instanceCount -= iFld;
                iArr2[i21] <<= (int)Test.instanceCount;
                break;
            case 48:
                Test.instanceCount = iFld;
                break;
            case 49:
                Test.instanceCount += i21;
                break;
            case 50:
            case 51:
                for (i24 = 4; i24 < 196; ++i24) {
                    i23 += (i24 | i24);
                    switch ((i24 % 5) + 23) {
                    case 23:
                        dFld += Test.fFld;
                        iFld += i24;
                        Test.instanceCount ^= i21;
                        Test.fFld += i24;
                        break;
                    case 24:
                    case 25:
                        Test.instanceCount += (((i24 * i22) + iFld) - i21);
                        break;
                    case 26:
                        Test.instanceCount = -7;
                    case 27:
                        fArr1 = fArr1;
                        break;
                    }
                }
                break;
            case 52:
                iFld *= (int)-99.91747;
                break;
            default:
                iFld += (((i21 * Test.instanceCount) + i25) - iFld);
            }
        } while (++i21 < 128);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
