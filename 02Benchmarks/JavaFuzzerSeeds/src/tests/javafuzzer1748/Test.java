package tests.javafuzzer1748;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:00:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static boolean bFld=true;
    public static short sFld=22249;
    public volatile float fFld=96.532F;
    public volatile double dFld=-72.72591;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-86);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i10=52, i11=13, i12=39491, i13=-7, i14=-44071, i15=-4, iArr1[]=new int[N];
        float f=-97.665F;
        double d=90.124806;
        byte by=-28;

        FuzzerUtils.init(iArr1, 193);

        try {
            iArr1 = iArr1;
            i10 = (int)f;
            i10 = i10;
            Test.bFld = Test.bFld;
            i10 >>>= i10;
        }
        catch (NullPointerException exc1) {
            iArr1[(i10 >>> 1) % N] = i10;
            i10 *= (int)d;
        }
        Test.instanceCount += Test.instanceCount;
        for (i11 = 197; i11 > 5; i11 -= 3) {
            if (Test.bFld) {
                for (i13 = 24; i13 > i11; i13 -= 2) {
                    i15 = 1;
                    do {
                        iArr1[i11] = i14;
                        by = by;
                    } while (++i15 < 1);
                }
            } else if (Test.bFld) {
                f = f;
            } else if (Test.bFld) {
                if (Test.bFld) continue;
            } else {
                i12 -= 115;
            }
        }
        vMeth_check_sum += i10 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 +
            by + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(boolean b, int i8, int i9) {

        float f1=0.136F, f2=0.96F;
        int i16=-11, i17=10, i18=42, iArr2[]=new int[N];
        byte by1=25;

        FuzzerUtils.init(iArr2, 18398);

        vMeth();
        f1 += i9;
        for (i16 = 12; 219 > i16; ++i16) {
            Test.sFld += (short)i16;
            i9 *= -9;
        }
        i8 ^= by1;
        f1 += i17;
        for (f2 = 2; f2 < 370; f2 += 2) {
            double d1=-60.87826;
            i9 += (int)((long)f2 ^ Test.instanceCount);
            switch (((i8 >>> 1) % 8) + 84) {
            case 84:
                i18 -= (int)Test.instanceCount;
                break;
            case 85:
                iArr2[(int)(f2 + 1)] = i17;
                i8 += (int)d1;
                Test.instanceCount = Test.instanceCount;
                iArr2 = iArr2;
            case 86:
                Test.instanceCount >>= 13L;
            case 87:
                i18 *= i16;
                break;
            case 88:
                Test.instanceCount += Test.instanceCount;
            case 89:
                i9 += (int)(f2 * f2);
                break;
            case 90:
                iArr2[(int)(f2 - 1)] = i9;
                break;
            case 91:
                Test.instanceCount += i8;
            }
        }
        long meth_res = (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f1) + i16 + i17 + by1 + Float.floatToIntBits(f2) +
            i18 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i4, short s) {

        int i5=-14, i6=43448, i7=13, iArr3[]=new int[N];
        double d2=-2.7445;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5581849791840608205L);
        FuzzerUtils.init(iArr3, -150);

        i5 = 125;
        do {
            i6 = 1;
            do {
                i7 = 1;
                do {
                    float f3=98.47F;
                    switch (((i5 % 1) * 5) + 27) {
                    case 28:
                        lMeth(Test.bFld, i5, i6);
                        Test.instanceCount = i6;
                        break;
                    default:
                        if (false) break;
                        f3 += (30717 + (i7 * i7));
                    }
                    f3 = i6;
                    i4 = -193;
                    lArr[i5 - 1] += i7;
                    if (Test.bFld) continue;
                } while (++i7 < 1);
                Test.byArrFld[i5 - 1] /= (byte)-105;
                i4 -= (int)d2;
                iArr3[i5 - 1] <<= (int)Test.instanceCount;
            } while (++i6 < 13);
        } while (--i5 > 0);
        long meth_res = i4 + s + i5 + i6 + i7 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=47, i2=14, i3=111, i19=-225, i20=-34, i21=-122, i22=-130, i23=5273, iArr[]=new int[N];
        long l=-6504179506383314143L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 33400);
        FuzzerUtils.init(fArr, 125.606F);

        i = 1;
        while (++i < 342) {
            iArr[i] >>= i;
            for (i1 = 3; i1 < 74; i1++) {
                i2 %= (int)(i | 1);
                i2 += i1;
                i2 = i;
                i3 = 2;
                while (--i3 > 0) {
                    Test.instanceCount >>= (i2++);
                    i2 >>= (i2--);
                    iArr[i] |= iArr[i1];
                    Test.instanceCount += (-iMeth(i3, Test.sFld));
                    i2 += (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    fArr[i1] -= i;
                    fFld = i2;
                    i2 += (((i3 * Test.instanceCount) + i3) - Test.instanceCount);
                    i2 = i;
                }
            }
            for (i19 = i; i19 < 74; i19++) {
                i20 >>>= (int)Test.instanceCount;
                for (i21 = 1; i21 < 1; i21++) {
                    i20 = i3;
                    i22 *= i2;
                    i2 -= i3;
                }
                dFld = fFld;
                i22 ^= Test.sFld;
                for (l = 1; l < 1; ++l) {
                    i22 = i3;
                    i22 ^= i21;
                    Test.instanceCount = -26915;
                    i20 = (int)1.104268;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
