package tests.javafuzzer158;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:11:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public double dFld=1.75775;
    public static int iFld=-128;
    public static volatile float fFld=-20.6F;
    public static byte byFld=38;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        double d=117.9472;
        int i5=-75, i6=0, i7=116, i8=-42, i9=-1, i10=-8, i11=-58561, i12=245, iArr[]=new int[N];
        float f1=-62.524F;
        byte by=83;

        FuzzerUtils.init(iArr, 1);

        Test.iFld += (int)d;
        iArr[(Test.iFld >>> 1) % N] = Test.iFld;
        iArr[(12 >>> 1) % N] *= (int)Test.instanceCount;
        Test.iFld += i5;
        for (i6 = 12; i6 < 241; ++i6) {
            for (f1 = i6; f1 < 7; ++f1) {
                for (i9 = 1; i9 > 1; i9--) {
                    i10 += i6;
                    by /= (byte)(Test.instanceCount | 1);
                }
                for (i11 = 1; i11 < 1; ++i11) {
                    Test.fFld += Test.instanceCount;
                    i12 = i5;
                    iArr[i11] = 17927;
                    iArr[i6 + 1] = i6;
                    Test.instanceCount = Test.iFld;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + by + i11
            + i12 + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i13=190, i14=24301, iArr1[]=new int[N];
        float f2=0.259F;
        byte by1=-22;

        FuzzerUtils.init(iArr1, -33374);

        Test.iFld = (int)(++Test.fFld);
        Test.fFld = (Test.iFld = (Test.iFld--));
        dMeth();
        for (i13 = 16; i13 < 354; i13 += 2) {
            boolean b=true;
            if (b) {
                Test.instanceCount += (i13 - i13);
                f2 = 1;
                while (++f2 < 9) {
                    i14 += (int)f2;
                    Test.iFld += (int)(((f2 * f2) + Test.instanceCount) - i13);
                    Test.iFld += (int)Test.instanceCount;
                    switch ((int)((f2 % 3) + 91)) {
                    case 91:
                    case 92:
                        i14 += (int)(((f2 * i13) + i13) - i13);
                        iArr1[i13 - 1] = (int)Test.instanceCount;
                        Test.iFld -= i13;
                    case 93:
                        iArr1[(int)(f2 - 1)] = Test.iFld;
                        break;
                    default:
                        Test.iFld += (int)(f2 * by1);
                    }
                }
            } else if (b) {
                i14 = i13;
            }
        }
        vMeth_check_sum += i13 + i14 + Float.floatToIntBits(f2) + by1 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i1=4, i2=233, i3=11, i4=-60785, i15=4316, i16=-41724;
        short s=27428, s1=9340;
        byte by2=98;
        long l=1937283280L;
        boolean b1=false;

        for (i1 = 5; i1 < 121; ++i1) {
            switch ((i1 % 2) + 119) {
            case 119:
                for (i3 = 1; i3 < 13; i3++) {
                    vMeth();
                    Test.iFld += i3;
                    for (i15 = 1; i15 < 2; ++i15) {
                        Test.instanceCount += (i15 * i15);
                        s = by2;
                        Test.iFld *= i16;
                        i16 = 22;
                        Test.fFld = Test.instanceCount;
                        s1 = (short)l;
                        b1 = b1;
                        i4 >>= i16;
                        i2 <<= (int)l;
                    }
                }
                break;
            case 120:
                if (b1) continue;
            default:
                Test.iFld += (int)(-5356630353420287190L + (i1 * i1));
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i15 + i16 + s + by2 + s1 + l + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.651F;
        int i=1, i17=55021, i18=126, i19=-243, i20=-25383, i21=4875, i22=-176, i23=-18100, i24=-8, iArr2[]=new int[N];
        short s2=-14662;
        boolean b2=true;
        double d1=-15.39427, dArr[]=new double[N];
        long l1=4288338670831226891L;

        FuzzerUtils.init(dArr, 2.6419);
        FuzzerUtils.init(iArr2, 21181);

        Test.instanceCount += (long)(((Test.instanceCount--) - (f--)) + ((dFld + i) - iMeth()));
        for (i17 = 2; i17 < 159; ++i17) {
            if (b2) {
                i19 = 1;
                do {
                    dFld = s2;
                    for (i20 = 1; i20 > 1; --i20) {
                        i18 -= (int)Test.instanceCount;
                        if (b2) continue;
                        dArr[i17 + 1] = dFld;
                        i18 = i21;
                    }
                    Test.fFld += i18;
                    Test.iFld *= i20;
                    b2 = false;
                } while (++i19 < 160);
                i22 = 1;
                while (++i22 < 160) {
                    i18 -= i19;
                    Test.instanceCount += i22;
                    i18 += i22;
                    i <<= (int)Test.instanceCount;
                    i18 = (int)40318L;
                    iArr2[i22 - 1] *= Test.iFld;
                }
                i = (int)Test.instanceCount;
            } else {
                Test.byFld -= (byte)8391296291821176914L;
                for (d1 = 160; d1 > 2; --d1) {
                    i23 += i22;
                    i21 += i23;
                    i18 += i20;
                    b2 = true;
                    for (l1 = 1; l1 < 2; l1++) {
                        Test.instanceCount += (((l1 * s2) + l1) - Test.iFld);
                    }
                    iArr2[(int)(d1)] = (int)f;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
