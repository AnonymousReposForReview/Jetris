package tests.javafuzzer1184;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:10:42 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4190896403L;
    public static double dFld=-2.104093;
    public static int iFld=-25398;
    public static volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -244);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        byte by1=-64;

        i8 += by1;
        Test.instanceCount = i8;
        vMeth1_check_sum += i8 + by1;
    }

    public static void vMeth(long l, int i7, float f1) {

        int i9=-25964, i10=-205, i11=-8, i12=220, i13=-52065, iArr1[]=new int[N];
        boolean b=true;
        short s=22190;

        FuzzerUtils.init(iArr1, 37677);

        vMeth1(i7);
        for (i9 = 12; i9 < 369; ++i9) {
            i11 = 1;
            while ((i11 += 2) < 5) {
                if (b) continue;
                for (i12 = 3; i12 > 1; --i12) {
                    i7 |= s;
                    i13 += (i12 * i12);
                    f1 = s;
                    i13 += -47145;
                    f1 += i9;
                    i10 += (int)(4199243322L + (i12 * i12));
                    s -= (short)i10;
                    f1 -= 3;
                    iArr1[i12 + 1] += i12;
                    i7 += i10;
                }
            }
        }
        vMeth_check_sum += l + i7 + Float.floatToIntBits(f1) + i9 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + s +
            FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(int i6) {

        float f=-26.528F, fArr[]=new float[N];
        long l1=14L;
        int i14=-35521, i15=225, i16=27693, i17=169, i18=23569;

        FuzzerUtils.init(fArr, 44.232F);

        fArr[(i6 >>> 1) % N] += (f--);
        vMeth(2259437716L, Test.iFld, f);
        Test.iFld = -4;
        f += Test.instanceCount;
        for (l1 = 1; l1 < 330; ++l1) {
            Test.iArrFld[(int)(l1)] = (int)l1;
            for (i15 = 1; i15 < 5; i15++) {
                for (i17 = 1; i17 < 2; i17++) {
                    i16 = 10;
                    if (false) continue;
                    i18 -= i14;
                    Test.iFld += i14;
                    Test.instanceCount = Test.instanceCount;
                }
                Test.dFld -= Test.iFld;
            }
            f = i18;
        }
        long meth_res = i6 + Float.floatToIntBits(f) + l1 + i14 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=89, byArr[][]=new byte[N][N];
        int i=13, i1=0, i2=9, i3=-48, i4=36, i5=-54027, i19=27314, i20=0, i21=-248, i22=212, iArr[]=new int[N];
        float f2=0.829F;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(byArr, (byte)-51);
        FuzzerUtils.init(lArr, 1954L);
        FuzzerUtils.init(sArr, (short)-24224);

        by -= (byte)(iArr[(i >>> 1) % N] + (i -= (int)(Test.instanceCount * i)));
        i = (int)(((++i) & (long)(-Test.dFld)) + (byArr[(i >>> 1) % N][(i >>> 1) % N] + (-(i - i))));
        i /= (int)(Test.instanceCount | 1);
        i = 20488;
        lArr[(i >>> 1) % N] -= i;
        for (i1 = 276; i1 > 11; i1 -= 3) {
            for (i3 = 285; i3 > i1; i3--) {
                i5 = 1;
                while (--i5 > 0) {
                    i2 = ((-iMeth(i2)) * -1950);
                    i4 += (int)f2;
                    Test.iArrFld[i5 - 1] -= -56898;
                    i4 *= i;
                }
                if (Test.bFld) {
                    sArr[i3 + 1] = (short)i4;
                    i4 += (int)Test.instanceCount;
                    lArr[i3 + 1] += i1;
                    for (i19 = 1; i19 < 1; i19 += 3) {
                        i2 += (i19 - i2);
                        Test.iArrFld[(i20 >>> 1) % N] = -56812;
                    }
                }
                i20 -= (int)f2;
                lArr[i1] >>>= i4;
                by += (byte)(i3 | (long)f2);
                for (i21 = i1; 1 > i21; ++i21) {
                    i += (i21 + Test.instanceCount);
                    i4 += (i21 + i22);
                    i2 += (((i21 * Test.instanceCount) + f2) - i4);
                }
                i4 >>= i2;
            }
            i4 = 11;
            byArr[i1][i1] = (byte)-4262304459479376814L;
            iArr[i1 + 1] = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
