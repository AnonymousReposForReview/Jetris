package tests.javafuzzer2084;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:46:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57L;
    public static boolean bFld=true;
    public static short sFld=28166;
    public double dFld=-1.129671;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -26216);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, boolean b, byte by) {

        int i6=25100, i7=98, i8=-78, i9=-14, i10=-44962;
        double d1=1.101999;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 0.325F);

        for (i6 = 3; i6 < 124; ++i6) {
            i5 = (int)Test.instanceCount;
            i7 += (i6 * i6);
            i7 += (i6 * i6);
            i5 = (int)Test.instanceCount;
            for (i8 = 13; i8 > 1; i8 -= 2) {
                i10 = 1;
                do {
                    double d=0.52311;
                    Test.iArrFld[i10 + 1] -= 48815;
                    i9 |= 108;
                    i5 %= (int)(Test.instanceCount | 1);
                    d -= i5;
                    i7 = i10;
                    d = 37;
                    fArr[i8 - 1][i10] = -10;
                } while (++i10 < 3);
                d1 -= i5;
            }
        }
        vMeth1_check_sum += i5 + (b ? 1 : 0) + by + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i2, int i3, int i4) {

        byte by1=59;
        int i11=-194, i12=6, i13=7877, i14=-10985, i15=-25603, i16=171;

        vMeth1(i4, false, by1);
        i3 += i2;
        for (i11 = 5; 213 > i11; i11++) {
            Test.iArrFld[i11] >>= i12;
            by1 >>>= (byte)Test.instanceCount;
            for (i13 = 8; i13 > 1; i13 -= 3) {
                i12 >>>= -1;
                for (i15 = i13; i15 < 4; i15++) {
                    Test.instanceCount += (i15 ^ Test.instanceCount);
                    Test.instanceCount += (((i15 * i14) + i11) - i2);
                    i16 += (i15 | Test.instanceCount);
                    Test.instanceCount += (i15 * Test.instanceCount);
                    Test.instanceCount *= i3;
                    by1 -= (byte)i2;
                    Test.instanceCount *= (long)-1.76977;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + by1 + i11 + i12 + i13 + i14 + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i=-237, i1=-2, i17=13, i18=145, i19=-9;
        boolean b1=false;
        long l=-8056754186057691470L;
        short s=-19944;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -45.126692);

        for (i = 14; i < 310; i++) {
            i1 = (int)(iMeth(i, i, i1) - -307396200L);
            switch ((i % 6) + 8) {
            case 8:
                i1 = i;
                Test.instanceCount *= i;
                i1 *= (int)-2.373F;
                Test.iArrFld[i - 1] = (int)-3695581263L;
            case 9:
                i17 = 6;
                while ((i17 -= 3) > 0) {
                    i1 >>= i17;
                    i1 = i;
                    i1 = i;
                    b1 = true;
                    for (l = i17; 3 > l; l++) {
                        i1 >>= i18;
                        i1 += (int)(l + Test.instanceCount);
                    }
                }
            case 10:
            case 11:
                i18 += (((i * i19) + l) - s);
            case 12:
                dArr[i - 1] -= i1;
            case 13:
                i19 += i;
                break;
            }
        }
        vMeth_check_sum += i + i1 + i17 + (b1 ? 1 : 0) + l + i18 + i19 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i20=176, i21=135, i22=792, i23=-69, i24=-59031, i25=29682;
        float f=101.466F;
        long lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -37L);
        FuzzerUtils.init(dArr1, 2.68043);

        Test.iArrFld = FuzzerUtils.int1array(N, (int)-10);
        vMeth();
        for (i20 = 3; i20 < 168; ++i20) {
            Test.iArrFld[i20] = i21;
            for (i22 = i20; 152 > i22; i22++) {
                lArr = lArr;
                for (i24 = 1; i24 < 1; ++i24) {
                    byte by2=-69;
                    switch ((((i25 >>> 1) % 9) * 5) + 29) {
                    case 71:
                        i21 += i23;
                        Test.instanceCount <<= i24;
                        break;
                    case 67:
                        i21 <<= by2;
                        by2 -= (byte)i20;
                        Test.iArrFld[(i21 >>> 1) % N] *= i22;
                        break;
                    case 57:
                        if (Test.bFld) continue;
                        dArr1[i24] = Test.instanceCount;
                        Test.instanceCount += 9;
                        break;
                    case 55:
                        Test.bFld = Test.bFld;
                        Test.instanceCount >>= i21;
                    case 58:
                        i23 = Test.sFld;
                        break;
                    case 45:
                        i23 %= (int)(Test.instanceCount | 1);
                        i21 += i24;
                        Test.iArrFld[i22 - 1] *= i22;
                        break;
                    case 50:
                        Test.instanceCount *= 9124318370127325274L;
                        f += Test.instanceCount;
                        dFld -= i25;
                        break;
                    case 53:
                        i25 += i24;
                        i23 %= (int)((long)(f) | 1);
                        break;
                    case 48:
                        lArr[i20 - 1] = (long)f;
                        break;
                    default:
                        Test.sFld ^= (short)i20;
                        dFld -= dFld;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
