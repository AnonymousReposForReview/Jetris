package tests.javafuzzer1051;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:32:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public boolean bFld=false;
    public static volatile short sFld=-11013;
    public static float fFld=15.148F;
    public static volatile long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7009792121364244027L);
        FuzzerUtils.init(Test.fArrFld, 0.480F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4) {

        float f=1.383F;
        short s=1920;

        i3 = (int)Test.instanceCount;
        f += s;
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f) + s;
    }

    public static int iMeth1(boolean b, double d) {

        int i5=24;
        float f1=-2.966F;
        short s1=28428;

        vMeth(i5, -13);
        f1 -= Test.instanceCount;
        Test.lArrFld[(i5 >>> 1) % N] = -32261;
        i5 += s1;
        Test.instanceCount -= Test.instanceCount;
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) + s1;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        boolean b1=false;
        int i6=-6, i7=44892, i8=139, i9=-14278, i10=-62029, iArr[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -5666);
        FuzzerUtils.init(sArr, (short)-13857);

        iMeth1(b1, 93.75597);
        try {
            Test.sFld *= (short)Test.instanceCount;
            for (i6 = 11; i6 < (183 + 400); ++i6) {
                i7 = (int)Test.fFld;
                i8 = 1;
                do {
                    iArr = iArr;
                    i7 = i6;
                    for (i9 = 1; i9 > 1; i9--) {
                        i2 /= (int)(i7 | 1);
                        sArr[i6 - 1] <<= (short)-159;
                        if (b1) {
                            i2 = -215;
                            iArr[i9] >>>= 35372;
                            Test.fArrFld = Test.fArrFld;
                        } else {
                            i2 += (i9 * i9);
                        }
                    }
                } while (++i8 < 4);
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.lArrFld[(i8 >>> 1) % N] <<= i2;
        }
        finally {
            i7 += (int)Test.instanceCount;
        }
        long meth_res = i2 + (b1 ? 1 : 0) + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=7, i1=-7, i11=-73, i12=-14, i13=-1, i14=-10821, i15=2, i16=-55041;
        double d1=2.17077;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        for (i = 10; i < 201; i += 2) {
            bFld = (bArr[i][i - 1] = bFld);
            Test.instanceCount += (i * i);
            iMeth(i1);
            i1 -= i;
        }
        i11 = 1;
        while (++i11 < 317) {
            d1 = d1;
            Test.fFld += (i11 + Test.instanceCount);
            iArrFld[i11 - 1] <<= (int)-2056855842L;
            i1 = (int)Test.fFld;
            if (bFld) continue;
        }
        i12 = 1;
        while (++i12 < 272) {
            i1 = (int)Test.fFld;
            for (i13 = 4; 92 > i13; i13++) {
                double d2=0.59845;
                bFld = bFld;
                Test.instanceCount += Test.sFld;
                i14 = (int)Test.instanceCount;
                Test.fArrFld[i12 + 1] -= i;
                i1 = (int)Test.instanceCount;
                i14 += (i13 * i13);
                switch ((i12 % 2) + 79) {
                case 79:
                    if (bFld) continue;
                    Test.instanceCount += i1;
                    break;
                case 80:
                    d2 = Test.instanceCount;
                    i14 *= i1;
                    for (i15 = 1; i15 < 2; i15++) {
                        Test.instanceCount %= (i11 | 1);
                    }
                    break;
                }
                Test.instanceCount -= 114L;
                Test.sFld += (short)9;
            }
            Test.fArrFld[i12 - 1] *= i13;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
