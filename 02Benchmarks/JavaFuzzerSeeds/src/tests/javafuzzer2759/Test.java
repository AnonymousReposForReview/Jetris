package tests.javafuzzer2759;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:45 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=162L;
    public int iFld=-5;
    public static int iFld1=-53152;
    public static float fFld=-1.768F;
    public static byte byFld=-95;
    public int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.13674);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, long l) {

        double d1=-98.31181;
        long l1=2705393461L;
        float f=70.311F;
        int i7=16424, i8=-174, iArr[]=new int[N];
        short s=-23257;

        FuzzerUtils.init(iArr, -2);

        d1 += Test.instanceCount;
        l1 = 1;
        do {
            i6 *= (int)f;
            i6 *= -1;
            i6 -= i6;
            l = -2;
            i6 = i6;
            for (i7 = 1; i7 < 6; i7++) {
                i6 &= 12504;
                Test.instanceCount += i6;
                Test.iFld1 *= (int)d1;
            }
            f = f;
            iArr[(int)(l1 - 1)] += i8;
            iArr[(int)(l1)] -= i6;
        } while (++l1 < 282);
        d1 -= s;
        vMeth1_check_sum += i6 + l + Double.doubleToLongBits(d1) + l1 + Float.floatToIntBits(f) + i7 + i8 + s +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i2=5, i3=-94, i4=6566, i5=30109;
        byte by1=-36;
        float f1=-2.701F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i2 = 7; i2 < 218; ++i2) {
            i4 = 1;
            do {
                Test.instanceCount = (iFld--);
                i5 = 1;
                while ((i5 -= 2) > 0) {
                    short s1=-31478;
                    boolean b=true;
                    if (i4 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Float.floatToIntBits(f1) +
                            FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    Test.instanceCount = (--by1);
                    vMeth1(i3, Test.instanceCount);
                    iArrFld[i4 + 1] = i3;
                    s1 += (short)f1;
                    Test.instanceCount += (i5 + i2);
                    iArrFld[i5 - 1] <<= Test.iFld1;
                    bArr[i5] = b;
                    i3 = (int)Test.instanceCount;
                    i3 = i5;
                }
                Test.dArrFld[i4] = Test.instanceCount;
            } while (++i4 < 8);
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(bArr);
    }

    public long lMeth(int i, double d, byte by) {

        int i1=-35982, i9=1829, i10=-48409, i11=175, i12=0, iArr1[][]=new int[N][N];
        short s2=-3680;

        FuzzerUtils.init(iArr1, 9279);

        i1 = 1;
        while ((i1 += 3) < 367) {
            i = i;
            vMeth();
            Test.iFld1 <<= -12;
            i9 = 1;
            do {
                int i13=6;
                for (i10 = 1; i10 < 1; ++i10) {
                    Test.instanceCount += 103;
                }
                iFld *= -2;
                Test.iFld1 *= i11;
                by += (byte)(i9 * i9);
                switch ((i9 % 6) + 29) {
                case 29:
                    Test.instanceCount += -203L;
                    i12 = 1;
                    do {
                        i = i9;
                        s2 >>= (short)i11;
                    } while (++i12 < 1);
                    break;
                case 30:
                    Test.iFld1 += i10;
                case 31:
                    Test.instanceCount += (((i9 * Test.instanceCount) + i10) - i13);
                    break;
                case 32:
                    iFld *= -80;
                    break;
                case 33:
                case 34:
                    iArr1 = iArr1;
                    break;
                default:
                    s2 -= (short)Test.fFld;
                }
            } while (++i9 < 13);
        }
        long meth_res = i + Double.doubleToLongBits(d) + by + i1 + i9 + i10 + i11 + i12 + s2 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=-32.85249;
        boolean b1=true;
        int i14=-64989, i15=6, i16=-54297, i17=-111, i18=3, i19=-10, i20=164, i21=-49, i22=11, i23=-64372, i24=-95;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.897F);

        Test.instanceCount += (Test.instanceCount - ((--Test.instanceCount) * (iFld % (Test.instanceCount | 1))));
        iArrFld[(iFld >>> 1) % N] -= (int)lMeth(Test.iFld1, d2, Test.byFld);
        if (b1) {
            fArr[(-99 >>> 1) % N] = Test.iFld1;
            Test.iFld1 -= (int)d2;
        } else if (b1) {
            Test.iFld1 += (int)Test.instanceCount;
            iFld = 16397;
        } else {
            for (i14 = 3; i14 < 132; ++i14) {
                if (b1) break;
            }
            for (i16 = 6; i16 < 177; ++i16) {
                Test.instanceCount |= i16;
            }
            Test.byFld = (byte)Test.instanceCount;
            for (i18 = 291; i18 > 12; i18--) {
                i20 = 1;
                while (++i20 < 90) {
                    i15 *= i19;
                    lArrFld[i18 - 1] = 11;
                    i19 = (int)Test.fFld;
                }
                for (i21 = 1; i21 < 90; ++i21) {
                    iFld += i16;
                    for (i23 = i18; 2 > i23; ++i23) {
                        iArrFld[i18 + 1] %= (int)-13L;
                        switch (((i23 % 6) * 5) + 58) {
                        case 59:
                            Test.instanceCount = i24;
                            Test.byFld >>= (byte)iFld;
                            iArrFld[i23 - 1] = i23;
                            break;
                        case 73:
                        case 60:
                            i24 += (i23 + Test.instanceCount);
                            i17 = i23;
                            Test.instanceCount += (((i23 * Test.instanceCount) + Test.fFld) - i16);
                            Test.instanceCount = i14;
                        case 61:
                            if (b1) break;
                            break;
                        case 63:
                            Test.instanceCount <<= i19;
                            break;
                        case 66:
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
