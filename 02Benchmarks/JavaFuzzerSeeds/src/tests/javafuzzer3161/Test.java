package tests.javafuzzer3161;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:06:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57023L;
    public static int iFld=-12;
    public static long lFld=-20763L;
    public volatile boolean bFld=true;
    public static volatile short sFld=5551;
    public static float fFld=0.175F;
    public static long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 8422882631944983735L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public void vMeth(int i2) {


        Test.iFld -= byArrFld[(i2 >>> 1) % N];
        vMeth_check_sum += i2;
    }

    public static int iMeth(float f) {

        int i14=14, i15=-11, i16=16788, i17=-14, i18=60590, i19=-34882, iArr1[]=new int[N];
        double d=-103.69184, d1=-18.128396;

        FuzzerUtils.init(iArr1, -10);

        Test.iFld <<= Test.iFld;
        Test.iFld = (int)Test.instanceCount;
        for (i14 = 6; i14 < 291; ++i14) {
            i16 = 1;
            while (++i16 < 6) {
                for (d = i14; d < 1; d += 2) {
                    Test.iFld = Test.sFld;
                    Test.lFld += Test.iFld;
                    iArr1[(int)(d)] = Test.iFld;
                    Test.lFld >>= Test.lFld;
                    i17 /= (int)(i14 | 1);
                    f *= -10;
                    i15 = (int)Test.instanceCount;
                }
                for (i18 = i16; i18 < 1; i18++) {
                    i17 ^= i14;
                    d1 -= Test.instanceCount;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 + i18 + i19 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        float f1=-9.709F, fArr1[]=new float[N];
        double d2=0.101104;
        int i20=3, iArr2[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(fArr1, -1.183F);
        FuzzerUtils.init(iArr2, -36);

        Test.instanceCount = (long)(((Test.instanceCount + Test.lFld) + fArr1[(Test.iFld >>> 1) % N]) + iMeth(f1));
        fArr1[(-19990 >>> 1) % N] += Test.iFld;
        Test.iFld = 8;
        Test.iFld -= 121;
        for (d2 = 9; 240 > d2; ++d2) {
            i20 += (int)(((d2 * Test.iFld) + i20) - Test.iFld);
            b = b;
            Test.lFld += (long)(((d2 * Test.instanceCount) + i20) - i20);
            if (i20 != 0) {
                vMeth2_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i20 + (b ? 1 : 0) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
                return;
            }
            Test.iFld = Test.iFld;
            i20 = (int)Test.instanceCount;
            Test.lFld *= i20;
            iArr2[(int)(d2 + 1)] <<= i20;
            i20 += (int)(((d2 * Test.instanceCount) + Test.iFld) - Test.iFld);
            i20 += Test.iFld;
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i20 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(int i7, int i8, int i9) {

        int i10=85, i11=2012, i12=-3, i13=133, i21=-11, i22=25, i23=5, i24=-241, iArr3[]=new int[N];
        double d3=-6.18139;
        long l=5248999110282910598L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.671F);
        FuzzerUtils.init(iArr3, 104);

        for (i10 = 4; i10 < 202; i10++) {
            fArr[i10] = (--Test.iFld);
            for (i12 = 8; i12 > 1; --i12) {
                vMeth2();
            }
            for (i21 = i10; i21 < 8; i21++) {
                i9 *= i22;
                i23 = 1;
                while (--i23 > 0) {
                    Test.lFld = (long)d3;
                    iArr3 = iArr3;
                    Test.sFld += (short)Test.fFld;
                    i8 = i21;
                    d3 = d3;
                }
            }
            i24 = 1;
            do {
                Test.lFld += (i24 * i24);
                Test.sFld -= (short)l;
            } while (++i24 < 8);
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + i21 + i22 + i23 + Double.doubleToLongBits(d3) + i24
            + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=149, i1=-41010, i3=7, i4=-51158, i5=-11, i6=-10, i25=-11, i26=-6, i27=5, i28=-200, iArr[]=new int[N];
        short s=11974;
        byte by=101;
        long l1=904803995155125887L, l2=3997631841L;
        double d4=0.58903, dArr[]=new double[N];

        FuzzerUtils.init(iArr, 175);
        FuzzerUtils.init(dArr, 0.23241);

        Test.lArrFld[(-10 >>> 1) % N] *= (((-(++Test.iFld)) + (Test.iFld - Test.iFld)) + Test.iFld);
        for (i = 23; i < 378; ++i) {
            vMeth(iArr[i]--);
            s >>= (short)Math.min((int)((iArr[i + 1] += i1) - Long.reverseBytes(Test.instanceCount)), (int)((s +
                Test.iFld) * (Test.lFld + i1)));
        }
        for (i3 = 12; 217 > i3; ++i3) {
            for (i5 = i3; i5 < 122; i5 += 3) {
                i4 -= i6;
                i6 += (i5 * i5);
                bFld = bFld;
                vMeth1(8043, i4, i1);
                Test.lFld = i;
                Test.fFld *= i;
                i4 -= by;
                if (bFld) break;
                for (i25 = 1; i25 < 1; ++i25) {
                    Test.lArrFld = Test.lArrFld;
                    i6 += (i25 - l1);
                    i6 += (int)-464830785L;
                    dArr = FuzzerUtils.double1array(N, (double)-111.64760);
                    i4 = (int)Test.instanceCount;
                    if (bFld) break;
                    i1 -= (int)d4;
                }
                Test.iFld = i25;
            }
            i1 -= -71;
            try {
                i4 = (i % 61305);
                i26 = (38 % i5);
                i26 = (64 / i26);
            } catch (ArithmeticException a_e) {}
            d4 -= 16236L;
            i27 = 1;
            do {
                for (l2 = 1; l2 < 1; ++l2) {
                    iArr[i3] = i27;
                    i26 += (-88 + (l2 * l2));
                }
            } while (++i27 < 122);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth2 vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
