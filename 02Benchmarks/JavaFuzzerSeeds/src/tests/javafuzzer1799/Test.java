package tests.javafuzzer1799;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:24:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-104L;
    public static int iFld=-36970;
    public volatile int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=45239, i4=-50449, i5=13, iArr[]=new int[N];
        short s=-7069;
        boolean b=false;
        float f2=0.637F;
        double d3=-34.13152;

        FuzzerUtils.init(iArr, 5);

        i3 = 1;
        do {
            Test.iFld += s;
            switch ((i3 % 6) + 47) {
            case 47:
                if (b) continue;
                break;
            case 48:
                i2 = 37651;
                i2 *= Test.iFld;
                switch (((i3 % 1) * 5) + 6) {
                case 9:
                    for (i4 = 15; i3 < i4; i4 -= 3) {
                        if (i5 != 0) {
                            vMeth1_check_sum += i2 + i3 + s + (b ? 1 : 0) + i4 + i5 + Float.floatToIntBits(f2) +
                                Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        iArr[i4 - 1] = i4;
                    }
                    i5 -= (int)f2;
                    break;
                default:
                    d3 -= i3;
                }
                iArr[i3 - 1] -= (int)Test.instanceCount;
                break;
            case 49:
                Test.iFld += i3;
                i2 >>>= s;
                break;
            case 50:
                b = b;
                break;
            case 51:
                Test.instanceCount += (i3 * Test.instanceCount);
            case 52:
                Test.iFld += (i3 * s);
            }
        } while ((i3 += 2) < 211);
        vMeth1_check_sum += i2 + i3 + s + (b ? 1 : 0) + i4 + i5 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, double d2) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -196785946L);

        vMeth1(28193);
        lArr[(-119 >>> 1) % N] += Test.iFld;
        lArr = lArr;
        vMeth_check_sum += l + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(double d1) {

        float f1=112.985F;
        int i6=-6, i7=14, i8=2, i9=-10, i10=-2, i11=-7;
        byte by=121;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.91796);

        Test.iFld = -43810;
        Test.iFld = -64468;
        Test.iFld = (int)((Test.iFld - (f1 - 391443194L)) - (-1703784263L + Math.min(Test.iFld, Test.iFld)));
        dArr[(58 >>> 1) % N] = Test.instanceCount;
        vMeth(Test.instanceCount, d1);
        Test.iFld /= (int)63L;
        for (i6 = 17; 348 > i6; ++i6) {
            by -= (byte)i7;
            for (i8 = 1; i8 < 5; ++i8) {
                switch (((i7 >>> 1) % 1) + 88) {
                case 88:
                    i7 = i8;
                    for (i10 = i8; i10 < 2; i10++) {
                        i7 -= (int)-53319L;
                        by += (byte)i10;
                        i9 = Test.iFld;
                    }
                    break;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i6 + i7 + by + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=18896, i12=58818, i13=61628, i14=-11, i15=-2, i16=-6, i17=0, i18=74;
        double d=117.27212;
        short s1=-32757;
        float f3=-119.179F;
        byte by1=-85, byArr[]=new byte[N];
        boolean b1=false;

        FuzzerUtils.init(byArr, (byte)8);

        i = (int)((-(i * Test.instanceCount)) + Integer.reverseBytes((int)(i * d)));
        i = (byArr[(i >>> 1) % N] = (byte)iArrFld[(i >>> 1) % N]);
        i1 = 1;
        while (++i1 < 124) {
            float f=-14.360F;
            Test.instanceCount = (long)(((Test.instanceCount + f) - (f + d)) + (--i));
            if ((~(Math.abs(-7) + (--i))) <= i1) continue;
            Test.instanceCount = iMeth(d);
            Test.iFld += (((i1 * Test.instanceCount) + Test.instanceCount) - s1);
        }
        i -= (int)95.402F;
        for (i12 = 12; i12 < 320; ++i12) {
            for (i14 = 1; 82 > i14; ++i14) {
                f3 += (i14 * i14);
                Test.iFld <<= (int)Test.instanceCount;
                i15 = Test.iFld;
            }
            i16 = 1;
            do {
                for (i17 = 1; i17 < 1; i17++) {
                    by1 += (byte)(10 + (i17 * i17));
                    i = -85;
                    if (b1) break;
                    if (true) continue;
                    i13 += i17;
                    if (b1) break;
                    switch ((i16 % 4) + 10) {
                    case 10:
                        iArrFld = iArrFld;
                    case 11:
                    case 12:
                        Test.iFld = i;
                        sArrFld[i17 - 1] -= (short)i14;
                        iArrFld[i17 + 1] += (int)Test.instanceCount;
                        Test.instanceCount |= -5;
                        break;
                    case 13:
                        i13 <<= (int)Test.instanceCount;
                        Test.iFld *= (int)-5L;
                    default:
                        Test.instanceCount >>= 44;
                    }
                }
            } while (++i16 < 82);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
