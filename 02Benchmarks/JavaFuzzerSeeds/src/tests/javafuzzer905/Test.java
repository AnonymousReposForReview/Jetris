package tests.javafuzzer905;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:25:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-239781371L;
    public static int iFld=1;
    public static byte byFld=-58;
    public static short sFld=8222;
    public static volatile boolean bFld=false;
    public float fFld=-2.433F;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 118.11806);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i7=-3, i8=-3, i9=-21494, i10=3, i11=71;
        float f1=120.298F;
        double d2=2.30365;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 203L);

        lArr[(Test.iFld >>> 1) % N] += 9;
        i7 = 1;
        do {
            for (i8 = 1; i8 < 7; ++i8) {
                for (i10 = i8; 2 > i10; ++i10) {
                    f1 += Test.byFld;
                    i9 += 2;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount -= i11;
                    Test.sFld += (short)i10;
                    i11 += (((i10 * i9) + i11) - i7);
                    i9 += Test.iFld;
                    d2 += i9;
                    f1 += i10;
                }
                Test.instanceCount -= 21133;
                i11 = (int)Test.instanceCount;
            }
        } while (++i7 < 223);
        vMeth2_check_sum += i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l1, int i6) {

        int i12=-62, i13=154, i14=11, i15=182, iArr[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.44076);
        FuzzerUtils.init(iArr, -4);

        vMeth2();
        Test.instanceCount = Test.sFld;
        Test.instanceCount = Test.byFld;
        for (i12 = 3; i12 < 201; i12++) {
            i14 = 1;
            while (++i14 < 8) {
                float f2=-116.383F;
                dArr = dArr;
                iArr[i12] = 199;
                i6 *= i13;
                if (i12 != 0) {
                    vMeth1_check_sum += l1 + i6 + i12 + i13 + i14 + i15 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
                    return;
                }
                switch ((i14 % 5) + 29) {
                case 29:
                    i13 = -28596;
                    f2 *= 1.425F;
                    Test.instanceCount += (-13 + (i14 * i14));
                    break;
                case 30:
                    Test.iFld = (int)-63.404F;
                    break;
                case 31:
                    i6 = i14;
                    break;
                case 32:
                    l1 = i15;
                    break;
                case 33:
                    i6 += (i14 * i12);
                    break;
                default:
                    Test.bFld = Test.bFld;
                }
            }
        }
        vMeth1_check_sum += l1 + i6 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, long l, int i) {

        int i1=-4159, i2=13, i3=-53, i4=-3071, i5=-224, iArr1[]=new int[N];
        double d1=2.129017;
        float f=29.501F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 2);
        FuzzerUtils.init(lArr1, 3556713322453511728L);

        for (i1 = 15; i1 < 247; ++i1) {
            for (i3 = 1; 7 > i3; i3++) {
                i4 += i3;
                for (d1 = 1; d1 < 2; ++d1) {
                    i2 += (int)((long)((i3 - -52382) - f) << (long)(-(d1 - i4)));
                    vMeth1(1529305988346696711L, i1);
                    Test.bFld = Test.bFld;
                    Test.bFld = Test.bFld;
                    Test.instanceCount += (long)(d1 * d1);
                    iArr1[i1 + 1] >>>= i3;
                    i *= -12;
                }
            }
            Test.iFld -= i5;
        }
        f = i1;
        lArr1[(Test.iFld >>> 1) % N][(i5 >>> 1) % N] <<= i1;
        lArr1[(i4 >>> 1) % N][(i3 >>> 1) % N] += 46983;
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d1) + i5 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i16=1, i17=0, i18=-1, i19=-136, i20=16194, i21=-49790, i22=67;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, 39926L);

        vMeth(-1.35754, Test.instanceCount, Test.iFld);
        for (i16 = 7; i16 < 353; ++i16) {
            i17 ^= 21;
            i18 = 1;
            do {
                try {
                    iArrFld[i18] = (1464750330 / i17);
                    Test.iFld = (iArrFld[i18] % -2061734188);
                    i17 = (Test.iFld / -15830);
                } catch (ArithmeticException a_e) {}
                switch ((i16 % 2) + 47) {
                case 47:
                    if (Test.bFld) continue;
                    break;
                case 48:
                    Test.dArrFld[i18 - 1] -= 98.40632;
                    iArrFld[i16 - 1] = Test.iFld;
                    fFld -= Test.instanceCount;
                    break;
                }
                for (i19 = 1; i19 > 1; i19--) {
                    Test.iFld += (((i19 * i20) + i17) - Test.iFld);
                    Test.sFld = (short)i20;
                    i20 ^= i19;
                    i20 -= -131;
                    lArr2[i16][i19] = -3;
                }
                i17 = i19;
                Test.sFld = (short)-15.561F;
                for (i21 = 1; i21 < 1; i21++) {
                    if (Test.bFld) {
                        fFld *= i18;
                        iArrFld = iArrFld;
                    } else {
                        i22 = i16;
                    }
                    i20 += i20;
                    if (Test.bFld) {
                        Test.instanceCount |= Test.sFld;
                        Test.bFld = Test.bFld;
                    }
                    Test.iFld = i17;
                }
                i20 += i17;
            } while (++i18 < 73);
            i22 = -57229;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
