package tests.javafuzzer2444;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:39:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static double dFld=-48.34829;
    public static boolean bFld=true;
    public static int iFld=52426;
    public static float fFld=-2.859F;
    public static int iFld1=-83;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 7198345246495303069L);
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-115, i3=-28160, i5=113, i6=0, i7=14;
        long l=-2301996597906506310L;
        float f=78.128F;
        short s=4735;

        for (i2 = 21; i2 < 349; i2++) {
            boolean b1=true;
            Test.lArrFld[i2] *= i2;
            if (b1) {
                i5 = 1;
                do {
                    for (i6 = 1; i6 < 1; ++i6) {
                        i7 += i5;
                        Test.instanceCount = -14;
                        i3 >>>= (int)Test.instanceCount;
                        Test.instanceCount -= (long)81.203F;
                        Test.iArrFld[i5 + 1] *= i2;
                        i7 -= i2;
                        l >>= i7;
                        f += (((i6 * s) + f) - f);
                    }
                    i7 -= i3;
                    s = (short)-251;
                } while (++i5 < 5);
            } else {
                i3 = i7;
            }
        }
        vMeth1_check_sum += i2 + i3 + i5 + i6 + i7 + l + Float.floatToIntBits(f) + s;
    }

    public static long lMeth(int i1) {

        int i8=-159, i9=249, i10=16869, iArr1[]=new int[N];
        float f2=-2.705F, fArr[]=new float[N];
        short s1=25411;
        byte by=-57;

        FuzzerUtils.init(fArr, -102.1017F);
        FuzzerUtils.init(iArr1, 4511);

        vMeth1();
        for (float f1 : fArr) {
            for (i8 = 1; i8 < 4; i8++) {
                for (f2 = 1; f2 < 2; ++f2) {
                    s1 = (short)i1;
                    try {
                        Test.iArrFld[i8 + 1] = (i1 % -29653);
                        i10 = (132 / i1);
                        i1 = (i1 / iArr1[(int)(f2 + 1)]);
                    } catch (ArithmeticException a_e) {}
                    switch (((i1 >>> 1) % 2) + 27) {
                    case 27:
                        i1 *= i1;
                        break;
                    case 28:
                    }
                    Test.dFld -= i8;
                    Test.iArrFld[i8 - 1] *= (int)Test.instanceCount;
                }
                i9 = i9;
                switch (((i8 % 10) * 5) + 107) {
                case 141:
                    iArr1[i8 + 1] += i9;
                    i1 -= i9;
                    Test.instanceCount = -91;
                case 118:
                    i1 = (int)Test.instanceCount;
                    break;
                case 157:
                    iArr1[i8 + 1] -= -7;
                    break;
                case 131:
                    Test.instanceCount += 16;
                    break;
                case 109:
                    iArr1[i8] -= (int)Test.instanceCount;
                    break;
                case 112:
                    i10 += (6 + (i8 * i8));
                    break;
                case 126:
                    if (Test.bFld) break;
                case 128:
                    iArr1[i8 + 1] -= by;
                case 132:
                    i9 -= Test.iFld;
                case 114:
                    Test.instanceCount = Test.iFld;
                    break;
                default:
                    Test.iFld = i10;
                }
            }
        }
        long meth_res = i1 + i8 + i9 + Float.floatToIntBits(f2) + i10 + s1 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(boolean b, int i) {

        double d=-69.102935;
        int i11=-10, i12=-18469, i13=-21, i14=-26, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -182);

        iArr[(i >>> 1) % N] = (int)lMeth(i);
        d = 1;
        do {
            if (i != 0) {
                vMeth_check_sum += (b ? 1 : 0) + i + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
            i *= -10;
            for (i11 = 1; i11 < 5; ++i11) {
                if (i11 != 0) {
                    vMeth_check_sum += (b ? 1 : 0) + i + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (i13 = (int)(d); i13 < 2; i13++) {
                    i14 = (int)Test.fFld;
                    Test.iFld += (-45 + (i13 * i13));
                    Test.iFld = i;
                    Test.fFld -= (float)Test.dFld;
                    Test.fFld = Test.instanceCount;
                    if (i11 != 0) {
                        vMeth_check_sum += (b ? 1 : 0) + i + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
            }
            Test.fFld = i13;
            Test.instanceCount = Test.iFld;
        } while (++d < 313);
        vMeth_check_sum += (b ? 1 : 0) + i + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d1=1.40088;
        int i16=1, i17=-5, i18=0, i19=251, i20=2, i21=13, i22=5;
        short s2=12319;
        byte by1=-63;

        vMeth(Test.bFld, Test.iFld);
        Test.iFld -= -24768;
        for (int i15 : Test.iArrFld) {
            for (d1 = 1; d1 < 63; ++d1) {
                s2 >>= (short)Test.instanceCount;
                for (i17 = 1; i17 < 2; i17 += 2) {
                    Test.iArrFld[(int)(d1 - 1)] = i17;
                    Test.fFld += (-10 + (i17 * i17));
                    Test.iFld += 95;
                    Test.iArrFld[(int)(d1 - 1)] -= Test.iFld;
                    Test.lArrFld[(int)(d1)] = Test.iFld;
                    Test.iFld ^= i17;
                    switch ((i17 % 1) + 33) {
                    case 33:
                        Test.instanceCount += s2;
                        break;
                    }
                    i18 += (i17 * i17);
                    Test.instanceCount += i15;
                    if (Test.bFld) continue;
                }
                Test.fFld += i17;
            }
            i18 = i16;
            for (i19 = 63; i19 > 2; --i19) {
                i15 -= (int)Test.fFld;
                Test.iFld1 += (i19 * i19);
                i16 = Test.iFld;
                for (i21 = 1; i21 < 2; ++i21) {
                    Test.fFld = Test.iFld1;
                    i20 += (i21 - Test.iFld);
                    i18 = i15;
                    by1 >>= (byte)s2;
                }
                Test.iFld1 = (int)d1;
                dArrFld[i19 + 1] = -6909353862370187668L;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
