package tests.javafuzzer1578;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:13:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9139263363558340277L;
    public static short sFld=-23782;
    public static int iFld=-6;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 127);
        FuzzerUtils.init(Test.fArrFld, -2.932F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i6=3, i7=8, i8=-1;
        boolean b=true;
        double d1=68.83252, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.52141);

        for (int i5 : Test.iArrFld) {
            float f=-90.290F;
            i5 = (int)Test.instanceCount;
            f = i5;
            for (i6 = 1; 4 > i6; ++i6) {
                i5 += (i6 - i7);
                f = i6;
            }
            i7 &= 1152;
            i5 -= i7;
            i5 |= i5;
            Test.instanceCount = i7;
            b = b;
            Test.instanceCount *= i5;
            for (d1 = 1; d1 < 4; ++d1) {
                b = b;
                i5 = (int)d1;
            }
        }
        long meth_res = i6 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, long l, long l1) {

        int i9=-230, i10=-12, i11=125, i12=227, i13=-61394;
        double d2=71.125064;
        short s=22007;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5903863557115653738L);

        Test.instanceCount >>= iMeth();
        for (i9 = 2; i9 < 340; ++i9) {
            for (i11 = 1; i11 < 5; ++i11) {
                float f1=-26.593F;
                f1 += (-1023123859L + (i11 * i11));
                switch ((i11 % 8) + 97) {
                case 97:
                    i13 = 1;
                    while ((i13 += 3) < 2) {
                        l += -25763L;
                        Test.fArrFld = Test.fArrFld;
                        i10 = (int)f1;
                        i12 -= (int)d2;
                        lArr[i9 + 1] -= s;
                        switch (i11 % 3) {
                        case 0:
                            i10 += (((i13 * l) + f1) - i10);
                            i10 += (i13 - i13);
                            Test.instanceCount += (i13 + i9);
                        case 1:
                            f1 = i12;
                            break;
                        case 2:
                            i4 += i13;
                            break;
                        }
                    }
                case 98:
                case 99:
                    Test.iArrFld[i11] -= i10;
                    break;
                case 100:
                    l1 = i10;
                    break;
                case 101:
                    lArr[i9 + 1] >>>= i4;
                case 102:
                    Test.instanceCount -= 95;
                    break;
                case 103:
                    try {
                        Test.iArrFld[i11 - 1] = (i9 / i4);
                        i10 = (i13 % i12);
                        i4 = (i11 / i4);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 104:
                    i12 += (i11 * i11);
                    break;
                }
            }
        }
        vMeth_check_sum += i4 + l + l1 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d2) + s +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth() {

        int i2=5, i3=5;

        i2 += (i3 + i3);
        vMeth(i2, Test.instanceCount, -3888955049L);
        vSmallMeth_check_sum += i2 + i3;
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i1=234, i14=-11, i15=-55370, i16=-12, i17=8, i18=-19401, i19=-8;
        byte by=114;
        boolean b1=true;
        float f2=25.359F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -8091626163640262871L);

        for (i = 20; i < 321; ++i) {
            by >>= (byte)(i1--);
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
            i1 = by;
            for (i14 = 5; 84 > i14; ++i14) {
                lArrFld[i14 + 1] |= Test.sFld;
                i1 += (int)-2603926472186744624L;
                i15 = (int)Test.instanceCount;
                switch (((i % 9) * 5) + 7) {
                case 29:
                    lArr1[i14] |= i1;
                    i1 = i1;
                    switch ((i14 % 7) + 5) {
                    case 5:
                        i1 -= (int)Test.instanceCount;
                        break;
                    case 6:
                        i1 += i14;
                        for (i16 = 1; i16 < 2; i16++) {
                            Test.instanceCount *= i17;
                            switch ((((i17 >>> 1) % 2) * 5) + 6) {
                            case 13:
                                i17 = (int)Test.instanceCount;
                                Test.instanceCount += (((i16 * Test.instanceCount) + i17) - i1);
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 7:
                                Test.instanceCount *= Test.instanceCount;
                                Test.instanceCount += Test.instanceCount;
                            default:
                                Test.iArrFld[i16 - 1] = (int)Test.instanceCount;
                                i17 >>= by;
                                Test.sFld += (short)(i16 * i16);
                                Test.instanceCount <<= Test.instanceCount;
                            }
                        }
                        break;
                    case 7:
                        i15 -= (int)1.81914;
                        for (i18 = 2; i18 > 1; --i18) {
                            i19 += Test.sFld;
                        }
                        i1 = i18;
                    case 8:
                        if (b1) continue;
                        break;
                    case 9:
                        by %= (byte)(i | 1);
                        break;
                    case 10:
                        lArr1[i] += Test.instanceCount;
                    case 11:
                        Test.sFld = (short)i16;
                        break;
                    default:
                        Test.instanceCount |= 65430L;
                    }
                    break;
                case 30:
                    f2 -= Test.sFld;
                case 9:
                    Test.iFld += -3;
                case 39:
                    i17 += (((i14 * Test.instanceCount) + Test.instanceCount) - i18);
                    break;
                case 10:
                    Test.instanceCount <<= Test.instanceCount;
                case 31:
                    Test.sFld += (short)i;
                    break;
                case 36:
                    i1 += (i14 * i14);
                    break;
                case 40:
                    if (b1) continue;
                    break;
                case 27:
                    i19 += -8;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
