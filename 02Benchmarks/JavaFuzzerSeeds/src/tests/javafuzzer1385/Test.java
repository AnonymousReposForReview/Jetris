package tests.javafuzzer1385;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:29:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30542L;
    public int iFld=55994;
    public static int iFld1=-47740;
    public static int iFld2=-22431;
    public static float fFld=-58.845F;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(short s) {

        int i4=-46, i5=7, i6=-44867, i7=7, i8=4, iArr1[]=new int[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.659F);
        FuzzerUtils.init(iArr1, 15);

        Test.iFld1 += (int)-99.480F;
        for (i4 = 2; i4 < 267; ++i4) {
            fArr[i4] += Test.instanceCount;
            i6 = 1;
            do {
                Test.iFld1 += i6;
                Test.iFld2 -= 141;
                for (i7 = 1; 1 > i7; i7++) {
                    b = b;
                    i8 = s;
                    Test.instanceCount += i7;
                    switch ((i4 % 7) + 59) {
                    case 59:
                        s = (short)i5;
                        iArr1[i7] = i8;
                        b = b;
                        Test.iFld2 >>>= i4;
                        break;
                    case 60:
                        iArr1[i4] *= (int)Test.fFld;
                    case 61:
                        Test.instanceCount *= i8;
                        break;
                    case 62:
                        Test.iFld2 ^= (int)2537053839708159918L;
                        break;
                    case 63:
                        Test.instanceCount += (i7 * i7);
                    case 64:
                        Test.iFld2 += i6;
                        break;
                    case 65:
                        Test.instanceCount += (((i7 * i5) + i7) - i4);
                        break;
                    }
                }
            } while (++i6 < 6);
        }
        long meth_res = s + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))
            + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i1, byte by) {

        int i2=16766, i3=2482, i9=48776, i10=4, i11=34997, i12=22, i13=165, iArr2[][]=new int[N][N];
        float f=0.120F;
        short s1=-10390;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)69);
        FuzzerUtils.init(iArr2, 151);

        for (i2 = 6; i2 < 337; i2 += 3) {
            i1 *= (int)(((Test.instanceCount - Test.instanceCount) - Integer.reverseBytes(i2)) + (--i3));
            i1 += (i2 * f);
            i3 = (int)(((f = i3) * lMeth(s1)) * Test.iFld1);
            Test.iFld2 -= (int)Test.fFld;
        }
        i9 = 1;
        do {
            Test.iFld2 = (int)Test.instanceCount;
            for (i10 = 1; 11 > i10; i10++) {
                for (i12 = 2; i12 > 1; --i12) {
                    i13 = Test.iFld2;
                    byArr[i10] = (byte)64867;
                    i13 = (int)-36L;
                }
                iArr2[i9 + 1] = iArr2[i9 + 1];
                i3 += (int)(4115291816L + (i10 * i10));
            }
            iArr2[i9 - 1][i9 + 1] *= i11;
        } while (++i9 < 143);
        long meth_res = i1 + by + i2 + i3 + Float.floatToIntBits(f) + s1 + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        byte by1=26;

        i *= (int)((++Test.instanceCount) * iMeth1(9, by1));
        long meth_res = i + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=7, i15=11, i16=-7, i17=46552, i18=35600, i19=102, i20=-5, i21=7, i22=-10, i23=-5, i24=-40643,
            iArr[]=new int[N];
        double d=-62.116535;
        boolean b1=true;
        byte by2=56;
        short s2=-9635;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr, -8L);

        iArr[(iFld >>> 1) % N] -= (int)((iFld = (int)(++Test.instanceCount)) - iMeth(-14));
        Test.iFld2 += Test.iFld1;
        for (i14 = 12; i14 < 382; i14++) {
            for (i16 = 1; i16 < 68; ++i16) {
                i17 += (i16 * i16);
            }
            Test.fFld -= Test.fFld;
            Test.fFld += (i14 * i14);
            Test.iFld2 += Test.iFld2;
            iFld += (i14 * i17);
            d += 23;
            Test.fFld = Test.instanceCount;
        }
        Test.iFld2 = Test.iFld2;
        for (i18 = 12; i18 < 230; ++i18) {
            for (i20 = 6; i20 < 115; ++i20) {
                i21 -= (int)Test.instanceCount;
                Test.fFld -= (float)d;
                Test.iFld1 >>= i18;
                Test.instanceCount = -10156;
                d -= i22;
                d += Test.instanceCount;
                iArr[i18] *= (int)Test.instanceCount;
            }
            switch (((i18 % 3) * 5) + 65) {
            case 73:
                if (b1) {
                    i19 *= (int)Test.fFld;
                    i15 -= (int)Test.fFld;
                } else if (b1) {
                    for (i23 = 115; 7 < i23; i23 -= 2) {
                        Test.fFld -= i14;
                    }
                } else if (b1) {
                    i15 -= i19;
                    Test.instanceCount += i18;
                } else {
                    i22 += Test.iFld2;
                }
                break;
            case 66:
                i15 += by2;
                break;
            case 71:
                lArr = lArr;
                break;
            default:
                s2 += (short)i18;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
