package tests.javafuzzer3210;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:56:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6634277429424512811L;
    public static short sFld=-2064;
    public static boolean bFld=false;
    public static volatile double dFld=-22.38968;
    public int iFld=20341;
    public static byte byFld=14;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2875524193L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(double d1) {

        int i7=-91, i8=5, i9=-61671, iArr1[]=new int[N];
        double d2=0.92807, dArr[]=new double[N];
        float f2=-127.535F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 117.17816);
        FuzzerUtils.init(lArr1, -108L);
        FuzzerUtils.init(iArr1, 18);

        for (i7 = 18; i7 < 391; i7++) {
            d2 = 1;
            do {
                i8 += i7;
                d1 = i8;
                i8 = (int)Test.instanceCount;
                dArr[(int)(d2 - 1)] -= i7;
            } while (++d2 < 5);
            i8 = i8;
            switch (((i7 % 5) * 5) + 38) {
            case 62:
                i9 = 1;
                do {
                    f2 = i8;
                    i8 += Test.sFld;
                    i8 += (i9 * i9);
                    Test.instanceCount = Test.instanceCount;
                    lArr1[i7] = i9;
                    i8 -= 0;
                } while (++i9 < 5);
                break;
            case 59:
                try {
                    i8 = (i7 % i7);
                    iArr1[i7] = (i8 % -20);
                    i8 = (i8 % 15556);
                } catch (ArithmeticException a_e) {}
            case 39:
                i8 <<= i7;
            case 43:
                i8 += i9;
                break;
            case 63:
                i8 *= i7;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i7 + i8 + Double.doubleToLongBits(d2) + i9 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i2, double d) {

        int i3=218, i4=13267, i5=4, i6=-47789;
        float f1=124.770F;
        byte by=15;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 1153L);

        for (i3 = 3; 370 > i3; i3++) {
            i2 *= (int)(((882649983L * (f1 - i3)) + (60L - Test.instanceCount)) * ((++i4) + (i4 - i4)));
            for (i5 = 1; i5 < 5; ++i5) {
                Test.instanceCount >>>= lMeth(d);
                Test.instanceCount += i5;
                i2 <<= i3;
                by = (byte)i4;
                switch ((i3 % 6) + 80) {
                case 80:
                    i2 = i3;
                    if (i6 != 0) {
                        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f1) + i5 +
                            i6 + by + FuzzerUtils.checkSum(lArr2);
                        return;
                    }
                    i2 <<= i6;
                    break;
                case 81:
                    if (Test.bFld) {
                        lArr2 = FuzzerUtils.long1array(N, (long)-27533L);
                        Test.instanceCount -= i6;
                        i4 += i5;
                    } else {
                        Test.instanceCount >>= Test.instanceCount;
                    }
                    break;
                case 82:
                    i6 = i2;
                    break;
                case 83:
                    i2 = i2;
                    break;
                case 84:
                case 85:
                    f1 += i4;
                    break;
                }
            }
        }
        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + by +
            FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth() {

        int i=-98, i1=-61536, i10=-33, i11=-13, i12=-68, i13=-48, iArr[]=new int[N];
        float f3=83.208F;
        byte by1=90;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, 5L);

        for (i = 161; 10 < i; --i) {
            float f=35.431F;
            iArr[i] -= (int)(--Test.instanceCount);
            Test.instanceCount ^= (long)((++lArr[i - 1]) - (-(-1.647F * Test.instanceCount)));
            Test.instanceCount = (long)(Test.instanceCount + f);
            vMeth1(i, Test.dFld);
        }
        for (i10 = 10; i10 < 320; ++i10) {
            i1 += (-180 + (i10 * i10));
            switch (((i10 % 5) * 5) + 36) {
            case 40:
                i1 -= i1;
                Test.instanceCount *= i1;
            case 47:
                i11 += i10;
                i11 *= (int)Test.instanceCount;
                break;
            case 61:
                for (i12 = 1; i12 < 5; i12++) {
                    i11 |= i13;
                    if (i11 != 0) {
                        vMeth_check_sum += i + i1 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f3) + by1 +
                            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                }
                break;
            case 57:
                f3 += Test.instanceCount;
                break;
            case 50:
                i13 += i13;
                break;
            default:
                by1 += (byte)i12;
            }
        }
        vMeth_check_sum += i + i1 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f3) + by1 + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=-49, i15=13, i16=77, i17=0, i18=52828, i19=-13256, iArr2[]=new int[N];
        float f4=-117.21F;

        FuzzerUtils.init(iArr2, 11);

        vMeth();
        iFld *= (int)-8L;
        iFld |= i14;
        iFld += i14;
        Test.instanceCount &= i14;
        i14 <<= iFld;
        for (i15 = 11; i15 < 201; i15++) {
            iArr2[i15 - 1] *= 16114;
            i14 += (i15 * i15);
            Test.instanceCount += -128;
            Test.instanceCount >>= Test.instanceCount;
            i17 = 1;
            while (++i17 < 132) {
                iFld *= -12;
                i18 = 1;
                do {
                    iFld >>= (int)Test.instanceCount;
                    Test.instanceCount -= (long)Test.dFld;
                    if (Test.bFld) continue;
                    iFld += 171;
                    iArr2[(i15 >>> 1) % N] ^= i16;
                    iArr2[i17] = 119;
                    Test.lArrFld[i15 + 1] = Test.instanceCount;
                    Test.dFld -= Test.instanceCount;
                    f4 += 10;
                    try {
                        i14 = (i17 / i16);
                        i14 = (i18 / 4789);
                        iArr2[i15 + 1] = (40 / iFld);
                    } catch (ArithmeticException a_e) {}
                } while (++i18 < 1);
                i19 = 1;
                while (--i19 > 0) {
                    Test.dFld = Test.instanceCount;
                }
                f4 = Test.byFld;
                iFld *= i19;
                Test.dFld -= i14;
            }
            i16 = (int)Test.instanceCount;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
