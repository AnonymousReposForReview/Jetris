package tests.javafuzzer1477;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:16:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63145L;
    public static float fFld=0.161F;
    public static volatile short sFld=5535;
    public static byte byFld=56;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -11763L);
        FuzzerUtils.init(Test.iArrFld, -18737);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        int i9=74, i10=57931, i11=186, i12=-53577, i13=-53487, i14=-47322, iArr1[]=new int[N];
        boolean b=false;
        double d1=-95.86510;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 126.270F);
        FuzzerUtils.init(iArr1, -43895);

        for (i9 = 3; i9 < 124; ++i9) {
            Test.fFld += Test.instanceCount;
            for (i11 = 1; i11 < 13; i11++) {
                fArr[(i11 >>> 1) % N] = i11;
                for (i13 = 1; i13 < 2; i13++) {
                    iArr1[i9] += i8;
                    iArr1[i13] = i8;
                    i14 = i12;
                    iArr1[i9] += 11198;
                }
                fArr[(-42040 >>> 1) % N] *= 158L;
            }
            b = b;
            i10 += (((i9 * i12) + i9) - i8);
            if (b) {
                Test.lArrFld[i9] = 34855;
            } else {
                d1 = Test.fFld;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l) {

        int i3=-54806, i4=4957, i5=5, i6=-11, i7=24202, i15=2, i16=10, iArr2[][]=new int[N][N];
        float f1=27.823F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, 19342);
        FuzzerUtils.init(fArr1, -90.895F);

        for (i3 = 225; i3 > 8; --i3) {
            for (i5 = 1; i5 < 7; i5++) {
                for (f1 = i5; f1 < 2; f1++) {
                    vMeth1(i3);
                    Test.instanceCount = i6;
                    i7 *= (int)l;
                }
            }
            i6 += (i3 * i3);
            switch (((i7 >>> 1) % 3) + 51) {
            case 51:
                for (i15 = 7; 1 < i15; i15--) {
                    i6 *= i15;
                    switch ((i3 % 9) + 93) {
                    case 93:
                        iArr2[i15] = FuzzerUtils.int1array(N, (int)-58410);
                        i16 += i15;
                        Test.fFld -= i4;
                        iArr2[(i15 >>> 1) % N][i3 - 1] += (int)Test.fFld;
                        break;
                    case 94:
                        fArr1[i3 + 1] = l;
                        break;
                    case 95:
                        iArr2[i3][i3 + 1] = i5;
                        break;
                    case 96:
                        fArr1[i3 + 1] *= l;
                        break;
                    case 97:
                        i7 *= i5;
                        break;
                    case 98:
                        i6 = (int)-7356981314953414366L;
                        break;
                    case 99:
                        i4 += i15;
                        break;
                    case 100:
                        i6 >>>= Test.sFld;
                    case 101:
                        l = i5;
                        break;
                    }
                }
            case 52:
                i7 = i6;
            case 53:
                Test.fFld = i5;
            }
        }
        long meth_res = l + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i15 + i16 + FuzzerUtils.checkSum(iArr2)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, int i2) {

        int i17=-9273, i18=4765, i19=141;
        float f2=11.842F;

        d -= (-iMeth(2803705699333966894L));
        i2 = (int)-14L;
        Test.iArrFld[(i2 >>> 1) % N] = (int)Test.instanceCount;
        i17 = 1;
        while (++i17 < 299) {
            switch ((i17 % 2) + 58) {
            case 58:
            case 59:
                i2 += Test.byFld;
                Test.instanceCount = i17;
                break;
            }
            Test.instanceCount *= (long)f2;
            i2 = 10;
            i2 >>= (int)Test.instanceCount;
            for (i18 = 1; i18 < 6; ++i18) {
                switch (((i17 >>> 1) % 1) + 60) {
                case 60:
                    Test.instanceCount += (((i18 * Test.instanceCount) + i17) - i19);
                    i19 <<= i19;
                    Test.instanceCount += -11;
                    break;
                default:
                    i2 <<= i17;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i17 + Float.floatToIntBits(f2) + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-191, i20=-12892, i21=-9, i22=-47, i23=-27, i24=18, iArr[]=new int[N];
        float f=-114.804F;
        double d2=125.43923;

        FuzzerUtils.init(iArr, 64373);

        iArr = (iArr = (iArr = (iArr = iArr)));
        if (Test.bFld) {
            for (i = 10; i < 169; i++) {
                i1 = (int)(f + (Math.min(Test.instanceCount, Test.instanceCount) - (++i1)));
                vMeth(d2, i);
                switch (((i >>> 1) % 2) + 70) {
                case 70:
                    Test.sFld |= (short)Test.instanceCount;
                    break;
                case 71:
                    i1 <<= -3;
                    Test.instanceCount = i1;
                    if (Test.bFld) {
                        for (i20 = 158; i20 > 2; --i20) {
                            i1 %= (int)(i1 | 1);
                            i22 = 1;
                            while (++i22 < 2) {
                                i21 += (i22 ^ Test.instanceCount);
                                Test.iArrFld[i20 + 1] += i;
                            }
                            for (i23 = 2; i23 > 1; --i23) {
                                if (Test.bFld) continue;
                                if (true) {
                                    Test.instanceCount += (i23 | i21);
                                    i21 += i1;
                                }
                                i21 += (i23 + i1);
                                d2 -= i;
                                Test.instanceCount += i23;
                                switch (((i23 % 6) * 5) + 122) {
                                case 151:
                                    f -= Test.byFld;
                                case 146:
                                    Test.sFld -= (short)i1;
                                    i24 = i23;
                                    Test.iArrFld[i20 + 1] = (int)Test.instanceCount;
                                    d2 -= Test.fFld;
                                case 131:
                                    i1 -= i24;
                                    break;
                                case 145:
                                    Test.bFld = Test.bFld;
                                    break;
                                case 133:
                                    Test.iArrFld[(i22 >>> 1) % N] = i24;
                                    break;
                                case 128:
                                    Test.iArrFld[i20 - 1] += i20;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            Test.lArrFld[(i20 >>> 1) % N] -= Test.instanceCount;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
