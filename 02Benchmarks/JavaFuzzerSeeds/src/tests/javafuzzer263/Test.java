package tests.javafuzzer263;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:06:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=274721498096182495L;
    public static int iFld=14;
    public static float fFld=-1.106F;
    public long lFld=-1940139615L;
    public boolean bFld=false;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, int i3, int i4) {

        double d2=-1.29945;
        int i5=12, i6=-35929, i7=4, i8=42889, i9=-2, iArr[]=new int[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(fArr, 0.811F);

        for (d2 = 288; d2 > 2; d2 -= 3) {
            i4 %= (int)(Test.instanceCount | 1);
            for (i6 = 16; i6 > 1; i6--) {
                i8 = 2;
                while ((i8 -= 3) > 0) {
                    i3 = (int)Test.instanceCount;
                    i5 >>= i3;
                    switch ((((-59804 >>> 1) % 8) * 5) + 109) {
                    case 120:
                        b = false;
                        Test.instanceCount = (long)-104.761F;
                        i3 = (int)Test.instanceCount;
                        break;
                    case 112:
                        Test.instanceCount *= i6;
                        break;
                    case 119:
                        Test.iFld = -135;
                        i3 += (((i8 * i5) + Test.instanceCount) - Test.instanceCount);
                        i4 -= Test.iFld;
                        i7 = i9;
                    case 144:
                        iArr[(int)(d2)] = i5;
                        break;
                    case 140:
                        Test.fFld += i6;
                        break;
                    case 125:
                        Test.iFld >>= (int)Test.instanceCount;
                        break;
                    case 114:
                        i7 = i3;
                    case 123:
                        fArr[i6 + 1] *= 16604;
                        break;
                    default:
                        fArr = fArr;
                    }
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i3 + i4 + Double.doubleToLongBits(d2) + i5 + i6 + i7 + i8 +
            (b ? 1 : 0) + i9 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, int i2, long l1) {

        double d3=97.92080;
        int i10=-2, i11=217, i12=-16, i13=-12, i14=222, iArr1[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, -18056);

        vMeth1(d3, -18411, Test.iFld);
        i2 += Test.iFld;
        for (i10 = 9; i10 < 240; ++i10) {
            if (b1) break;
            i2 += (int)Test.instanceCount;
            for (i12 = i10; i12 < 7; i12++) {
                i1 <<= 27571;
                try {
                    iArr1[i12 + 1] = (35460 / i10);
                    iArr1[i10] = (i11 % i12);
                    i1 = (-1162387341 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                i2 += i2;
                i14 = 1;
                while (++i14 < 1) {
                    i13 += (((i14 * Test.iFld) + i13) - Test.fFld);
                    l1 = i10;
                    i2 >>= i13;
                    Test.instanceCount *= Test.instanceCount;
                    i13 = -65259;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + l1 + Double.doubleToLongBits(d3) + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l) {

        double d4=1.46462, d5=-42.9677;
        int i15=43109, i16=13, i17=21427, iArr2[]=new int[N];
        long l2=-13L;

        FuzzerUtils.init(iArr2, 40702);

        vMeth(Test.iFld, -9, 10L);
        d4 = 1;
        do {
            for (i15 = 1; i15 < 9; i15++) {
                Test.iFld -= i16;
                Test.instanceCount = Test.iFld;
                Test.iFld = Test.iFld;
                i16 *= (int)Test.instanceCount;
                i17 = 1;
                while (++i17 < 2) {
                    i16 = -25088;
                    Test.iFld += i16;
                    switch ((((i15 >>> 1) % 6) * 5) + 63) {
                    case 93:
                        i16 >>>= 1;
                        iArr2[(int)(d4 - 1)] = Test.iFld;
                        Test.iFld <<= Test.iFld;
                        break;
                    case 92:
                        l2 += i17;
                        break;
                    case 82:
                        d5 += i15;
                        break;
                    case 67:
                        Test.iFld *= 9;
                        break;
                    case 90:
                        iArr2[i15 - 1] = 234;
                        break;
                    case 86:
                        d5 = i17;
                    default:
                        Test.iFld = i15;
                    }
                }
            }
        } while (++d4 < 181);
        long meth_res = l + Double.doubleToLongBits(d4) + i15 + i16 + i17 + l2 + Double.doubleToLongBits(d5) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=45965, i18=-1585, i19=-228, i20=-45252, i21=13389, i22=172;
        long l3=6281642099935281970L;
        byte by=-62;
        short s=-14668;
        double dArr[]=new double[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, -45.94555);
        FuzzerUtils.init(fArr1, 1.344F);

        i = 1;
        do {
            double d=1.25496;
            dArr[i - 1] = (Math.abs(i) - (d++));
            Test.iFld -= (int)(Math.abs(Test.instanceCount++) - (iMeth(Test.instanceCount) + -27.24780));
            Test.iFld <<= Test.iFld;
            Test.instanceCount -= (long)Test.fFld;
            Test.iFld += i;
            i18 = 1;
            do {
                Test.fFld += i18;
                Test.iFld += (int)Test.fFld;
                for (l3 = 1; 1 > l3; ++l3) {
                    i19 >>= by;
                    i19 -= (int)l3;
                    Test.iFld >>>= 51463;
                    Test.iFld = i19;
                }
                i20 = 1;
                while (++i20 < 1) {
                    Test.iFld += i20;
                    Test.iFld *= i19;
                    Test.instanceCount = i18;
                    s += (short)(i20 * i20);
                    Test.instanceCount += (i20 + s);
                    lFld >>>= i19;
                }
                Test.fFld -= (float)d;
                i19 += Test.iFld;
            } while (++i18 < 67);
            lFld += i;
            i19 = i19;
            fArr1[i - 1] = (float)d;
            if (bFld) {
                for (i21 = 4; i21 < 67; ++i21) {
                    i22 = (int)lFld;
                    if (bFld) break;
                }
            } else {
                lFld += (long)Test.fFld;
            }
        } while (++i < 378);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
