package tests.javafuzzer3376;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:52:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=585032506L;
    public static short sFld=9171;
    public static int iFld=-222;
    public static float fFld=-56.580F;
    public static volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3L);
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.dArrFld, 0.101108);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {


        Test.iFld = (int)Test.fFld;
        vMeth1_check_sum += 0;
    }

    public double dMeth(int i, int i1) {

        int i3=2;
        float f=82.832F;

        vMeth1();
        i = (int)1.288F;
        i = (int)Test.instanceCount;
        Test.instanceCount <<= i;
        Test.iArrFld = Test.iArrFld;
        Test.instanceCount = 14;
        for (int i2 : Test.iArrFld) {
            Test.bFld = Test.bFld;
            i3 = 1;
            while (++i3 < 4) {
                if (Test.bFld) break;
                Test.iArrFld = Test.iArrFld;
                i2 = i2;
                f = 1;
                while ((f -= 3) > 0) {
                    Test.instanceCount += (long)(f + i);
                    i2 = Test.sFld;
                }
            }
        }
        long meth_res = i + i1 + i3 + Float.floatToIntBits(f);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth() {

        int i4=-14, i5=10, i6=-197, i7=-121, i8=-3, i9=-42, i10=-64507;
        double d=1.55617;

        Test.sFld -= (short)((-(Test.lArrFld[(Test.iFld >>> 1) % N]--)) + dMeth(Test.iFld, Test.iFld));
        Test.instanceCount -= Test.instanceCount;
        for (i4 = 3; i4 < 159; ++i4) {
            for (i6 = 1; i6 < 10; ++i6) {
                Test.fFld += (i6 - i5);
                i5 = (int)Test.fFld;
                if (Test.bFld) break;
                for (i8 = i6; i8 < 2; ++i8) {
                    i5 -= 4697;
                }
                d -= Test.fFld;
            }
            Test.instanceCount <<= i6;
            i5 *= (int)-1.84847;
            i10 = 1;
            while (++i10 < 10) {
                i9 = (int)Test.fFld;
                Test.lArrFld[i4] = i9;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i10;
    }

    public void mainTest(String[] strArr1) {

        int i11=36209, i12=-29116, i13=-23, i14=17, i15=-54843, i16=59, i17=-14, i18=42007;
        double d1=87.32383;
        byte by=-96;

        vMeth();
        Test.instanceCount += Test.iFld;
        for (i11 = 7; i11 < 282; i11++) {
            i13 = 1;
            do {
                Test.iFld = Test.iFld;
                Test.fFld += (((i13 * i12) + i11) - i11);
                Test.fFld += i13;
                i12 += (((i13 * i12) + i11) - Test.iFld);
                Test.iFld = (int)Test.instanceCount;
                Test.iFld += i12;
            } while (++i13 < 91);
            Test.instanceCount = Test.instanceCount;
            Test.iFld *= Test.sFld;
            if (Test.bFld) {
                Test.iArrFld[i11 + 1] = (int)Test.fFld;
                Test.iArrFld[i11] += i13;
            } else {
                for (i14 = 3; i14 < 91; i14++) {
                    for (i16 = i14; i16 < 2; i16 += 2) {
                        i12 ^= (int)Test.instanceCount;
                        d1 += i17;
                        if (false) break;
                        i18 = i14;
                        i17 += i15;
                        switch ((i16 % 8) + 116) {
                        case 116:
                            Test.instanceCount += i16;
                            if (Test.bFld) continue;
                            Test.lArrFld = Test.lArrFld;
                            break;
                        case 117:
                            Test.sFld = (short)Test.fFld;
                            Test.bFld = true;
                            Test.dArrFld[i16] = -208;
                        case 118:
                            i17 += (i16 ^ i18);
                            break;
                        case 119:
                            i12 += i12;
                            break;
                        case 120:
                            i17 -= (int)Test.instanceCount;
                            break;
                        case 121:
                            Test.instanceCount >>>= i12;
                        case 122:
                            Test.fFld += by;
                            break;
                        case 123:
                            Test.instanceCount *= Test.iFld;
                            break;
                        default:
                            Test.iArrFld[(-16831 >>> 1) % N] = Test.iFld;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
