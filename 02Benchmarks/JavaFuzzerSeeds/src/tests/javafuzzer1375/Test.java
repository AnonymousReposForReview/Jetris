package tests.javafuzzer1375;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:09:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-51120L;
    public static byte byFld=21;
    public static boolean bFld=false;
    public static float fFld=-119.612F;
    public int iFld=-12767;
    public static double dFld=1.120768;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth2(int i8, boolean b1, int i9) {

        float f1=110.746F;
        int i10=-6;

        i9 -= i9;
        for (f1 = 2; f1 < 237; ++f1) {
            i8 -= -63099;
            Test.instanceCount = i8;
            i8 = i10;
            Test.byFld += (byte)(f1 - i8);
        }
        vMeth2_check_sum += i8 + (b1 ? 1 : 0) + i9 + Float.floatToIntBits(f1) + i10;
    }

    public void vMeth1(int i3, int i4, long l) {

        int i5=4, i6=-206, i7=51207, i11=10, i12=14650, iArr[]=new int[N];
        long l1=82L;

        FuzzerUtils.init(iArr, 5);

        i5 = 1;
        do {
            for (i6 = 1; i6 < 10; ++i6) {
                vMeth2(i7, Test.bFld, -16278);
                i3 += (i6 * i6);
                if (Test.bFld) {
                    for (l1 = 1; l1 < 2; ++l1) {
                        switch ((i6 % 3) + 78) {
                        case 78:
                            l ^= 12;
                            Test.fFld += (l1 - i6);
                            Test.bFld = false;
                            break;
                        case 79:
                            i3 += (int)(l1 - i11);
                            iArr[i5] = i12;
                            i12 >>>= (int)l1;
                            i12 += (int)(l1 + i4);
                        case 80:
                            iArr[(int)(l1)] <<= 5532;
                            break;
                        default:
                            Test.instanceCount += (l1 * l1);
                        }
                    }
                } else {
                    i3 += (((i6 * i7) + l) - Test.instanceCount);
                }
            }
        } while (++i5 < 156);
        vMeth1_check_sum += i3 + i4 + l + i5 + i6 + i7 + l1 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i, boolean b) {

        int i1=-8, i2=-205, i13=19759, iArr1[]=new int[N];
        float f=-1.811F;
        double d=-2.81900;
        long l2=-55996L;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 4238);
        FuzzerUtils.init(sArr, (short)-19079);

        for (i1 = 8; i1 < 248; i1++) {
            i += (int)(((35251 - (f - f)) - 7) * (--i));
            vMeth1(i1, i2, Test.instanceCount);
            d += Test.instanceCount;
            Test.byFld -= Test.byFld;
            i += (int)Test.instanceCount;
            i13 = 7;
            while ((i13 -= 3) > 0) {
                i2 *= (int)l2;
                try {
                    i2 = (-15201 / i2);
                    i = (-1613275565 % i2);
                    i2 = (iArr1[i13 - 1] / iArr1[i1]);
                } catch (ArithmeticException a_e) {}
                iArr1[i1 - 1] <<= i1;
                iArr1[i1] /= (int)(l2 | 1);
                if (b) {
                    Test.bFld = Test.bFld;
                } else if (b) {
                    iArr1 = iArr1;
                    sArr[i13 - 1] |= (short)i;
                }
            }
        }
        vMeth_check_sum += i + (b ? 1 : 0) + i1 + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i13 + l2
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=-64469, i15=37, i16=14, i17=14, i18=-6158, i19=10837, i20=-122, i21=10076, i22=155;
        long l3=1495372891L, lArr[]=new long[N];
        short s=21254;
        float f2=0.931F;

        FuzzerUtils.init(lArr, -1525742048L);

        vMeth(iFld, Test.bFld);
        for (i14 = 11; i14 < 200; i14++) {
            Test.instanceCount <<= 217;
        }
        iFld -= (int)Test.instanceCount;
        Test.fFld -= (float)Test.dFld;
        i15 = (int)Test.fFld;
        for (l3 = 4; l3 < 130; l3++) {
            Test.dFld += i14;
            if (Test.bFld) break;
            for (i17 = 12; i17 < 199; i17++) {
                i16 += (i17 - i18);
                Test.fFld -= iFld;
                if (Test.bFld) continue;
                if (Test.bFld) break;
                for (i19 = 1; i19 < 2; ++i19) {
                    i20 = s;
                }
                iFld = (int)Test.instanceCount;
            }
            iFld = i16;
            i20 >>>= i14;
            i20 -= i15;
            Test.instanceCount -= i15;
            for (i21 = 199; i21 > 10; i21 -= 2) {
                switch (((i17 >>> 1) % 2) + 16) {
                case 16:
                    Test.instanceCount -= i15;
                    i22 = (int)Test.dFld;
                    lArr[(int)(l3)] >>= i14;
                    switch (((iFld >>> 1) % 2) + 69) {
                    case 69:
                        Test.instanceCount -= l3;
                        Test.instanceCount += i21;
                        f2 *= (float)Test.dFld;
                        break;
                    case 70:
                        lArr[i21 - 1] = i15;
                        break;
                    default:
                        if (Test.bFld) continue;
                    }
                case 17:
                    Test.bFld = Test.bFld;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
