package tests.javafuzzer2783;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:03:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7183807066233620482L;
    public short sFld=-11370;
    public int iFld=-12;
    public static byte byFld=88;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i11, float f2) {

        int i12=-2, i13=-232, i14=-13, i15=54639, iArr1[]=new int[N];
        boolean b=true;
        long l1=6L, lArr3[]=new long[N];
        double d1=-1.11170;

        FuzzerUtils.init(lArr3, -114L);
        FuzzerUtils.init(iArr1, 54320);

        i11 = i11;
        for (i12 = 14; 254 > i12; ++i12) {
            i13 -= i13;
            i11 += i11;
            Test.instanceCount -= i12;
            lArr3[i12 + 1] >>= 11;
            if (b) break;
            for (l1 = 7; l1 > 1; l1--) {
                int i16=-3489;
                iArr1[(int)(l1 + 1)] = i11;
                i15 = 1;
                while (++i15 < 2) {
                    Test.instanceCount += (i15 * i15);
                }
                i14 += (39126 + (l1 * l1));
                i16 = 123;
                i13 += (int)l1;
                i16 = (int)d1;
            }
        }
        vMeth2_check_sum += i11 + Float.floatToIntBits(f2) + i12 + i13 + (b ? 1 : 0) + l1 + i14 + i15 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr3) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i8, int i9, byte by) {

        float f1=-49.507F;
        long l=50914L, lArr2[]=new long[N];
        int i10=12, i17=-88, i18=-6, i19=-7, iArr[]=new int[N];
        short s1=1856;
        double d2=-2.75087;

        FuzzerUtils.init(lArr2, -12L);
        FuzzerUtils.init(iArr, -183);

        f1 += Test.instanceCount;
        lArr2[(-12 >>> 1) % N] *= (iArr[(167 >>> 1) % N] *= (int)Math.min(Test.instanceCount, (long)(i8 - f1)));
        for (l = 4; l < 380; ++l) {
            vMeth2(-50368, f1);
            iArr[(int)(l)] >>= -21;
            i9 += (int)(l * l);
            i9 = i10;
            iArr[(int)(l + 1)] -= s1;
            Test.instanceCount += (((l * i9) + Test.instanceCount) - f1);
        }
        for (i17 = 8; 138 > i17; i17 += 2) {
            i19 = 1;
            do {
                s1 &= (short)i10;
                d2 = i18;
                d2 = i10;
                i10 -= (int)Test.instanceCount;
            } while (++i19 < 24);
        }
        vMeth1_check_sum += i8 + i9 + by + Float.floatToIntBits(f1) + l + i10 + s1 + i17 + i18 + i19 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i1=3, i2=0, i3=-196, i4=-73, i5=16003, i6=-214, i7=14;
        float f=-2.275F;
        double d=0.82336;
        byte by1=-66;
        long lArr[]=new long[N], lArr1[]=new long[N];

        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(lArr1, 45568L);

        i1 *= (int)Test.instanceCount;
        for (i2 = 1; i2 < 244; i2++) {
            f += (((i2 * Test.instanceCount) + Test.instanceCount) - i1);
            for (i4 = 1; 7 > i4; i4++) {
                f += ((long)i4 | (long)i4);
                for (i6 = 1; 2 > i6; ++i6) {
                    iArrFld[i6] += (-(++sFld));
                    i5 += (i6 - Test.instanceCount);
                    i3 = (int)(i3 = (int)((d - f) * (iArrFld[i2 + 1]++)));
                }
            }
            i5 += (i2 | Test.instanceCount);
            lArr = (lArr = (lArr = (lArr1 = lArr1)));
            vMeth1(i6, i3, by1);
            iArrFld[i2 + 1] |= i4;
            i3 = i1;
            d = Test.instanceCount;
        }
        vMeth_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) +
            by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr3) {

        int i20=14, i21=-10, i22=-216, i23=15531, i24=3, i25=-10;
        float f3=127.404F, f4=-39.581F;
        double d3=-112.88845;

        vMeth();
        iArrFld[(iFld >>> 1) % N] <<= 9;
        for (i20 = 276; i20 > 4; --i20) {
            for (i22 = 2; i22 < 92; i22++) {
                sFld = (short)i23;
                for (f3 = 1; f3 < 2; ++f3) {
                    lArrFld[i22] += i21;
                    switch ((int)((f3 % 2) + 18)) {
                    case 18:
                        iFld &= i24;
                        Test.instanceCount = i25;
                        Test.instanceCount += (long)(((f3 * Test.instanceCount) + i24) - i21);
                        break;
                    case 19:
                        iFld += (int)(((f3 * i21) + i21) - i23);
                        d3 += Test.instanceCount;
                        byArrFld[(iFld >>> 1) % N] = (byte)Test.instanceCount;
                        break;
                    default:
                        i23 *= (int)d3;
                    }
                    switch ((int)(((f3 % 2) * 5) + 67)) {
                    case 72:
                        Test.instanceCount -= i21;
                        i25 = sFld;
                        i25 += (int)(f3 * Test.byFld);
                        break;
                    case 75:
                        iFld = i22;
                        break;
                    }
                    iFld <<= (int)Test.instanceCount;
                    sFld += (short)i25;
                    Test.instanceCount = Test.instanceCount;
                }
                i21 = (int)-834147731L;
            }
            f4 -= -162L;
            i24 = -35929;
            i23 ^= i23;
            i25 += (int)(1286480507667829920L + (i20 * i20));
            i24 += (i20 * i20);
            i21 = 12;
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
