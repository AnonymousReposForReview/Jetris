package tests.javafuzzer692;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:03:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3111506208969685225L;
    public static boolean bFld=true;
    public float fFld=-24.227F;
    public long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];
    public volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(boolean b, long l1) {

        int i8=172, i9=-134, i10=138, i11=-45614, i12=21545, i13=23469, i14=8268, i15=-134, i16=55882;
        short s1=-15249;

        b = false;
        if (b) {
            i8 *= (int)l1;
            i8 *= s1;
            i8 -= i8;
            for (i9 = 7; i9 < 170; i9++) {
                byte by1=-86;
                by1 = (byte)Test.instanceCount;
                switch ((i9 % 1) + 74) {
                case 74:
                    Test.instanceCount += 154;
                    Test.instanceCount *= i11;
                    break;
                default:
                    s1 ^= (short)-16342;
                    for (i12 = 1; i12 < 10; ++i12) {
                        for (i14 = i9; i14 < 2; i14++) {
                            try {
                                i10 = (i12 % i9);
                                i15 = (i11 % i13);
                                i16 = (Test.iArrFld[i14 - 1] / -13104);
                            } catch (ArithmeticException a_e) {}
                            i10 -= i9;
                        }
                    }
                }
            }
        }
        long meth_res = (b ? 1 : 0) + l1 + i8 + s1 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i6, double d1, float f) {

        int i7=-253, i17=-38640, i18=-1, i19=126;
        float f1=0.242F;
        short s2=-32306;
        long l2=25049L, l3=-12L;

        i7 = 1;
        while (++i7 < 303) {
            fMeth(Test.bFld, Test.instanceCount);
            i6 -= i6;
            f1 = i6;
            i17 = 1;
            do {
                i6 += -3;
                s2 = (short)i6;
                f1 = i6;
                i6 += (int)Test.instanceCount;
                i18 = 1;
                while (--i18 > 0) {
                    l2 += l2;
                    try {
                        Test.iArrFld[i17 + 1] = (i6 % 15083);
                        i6 = (-24 / i18);
                        i6 = (251115196 / i6);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount -= 6;
                    l3 += (long)f;
                }
            } while (++i17 < 5);
            i19 += (((i7 * l2) + l3) - l2);
        }
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i7 + Float.floatToIntBits(f1)
            + i17 + s2 + i18 + l2 + l3 + i19;
    }

    public void vMeth(int i, int i1, long l) {

        int i2=-10, i3=137, i4=115, i5=-235, i20=176, i21=3021, i22=-236, i23=-11, iArr[][]=new int[N][N];
        double d=-1.102376;
        byte by=16;
        short s=9594;
        float f2=44.538F;

        FuzzerUtils.init(iArr, 12);

        for (i2 = 3; i2 < 342; ++i2) {
            for (i4 = i2; i4 < 5; i4++) {
                try {
                    i3 = (iArr[i2 + 1][i4] / i2);
                    i5 = (41 % i1);
                    i5 = (iArr[i2][i4] % i2);
                } catch (ArithmeticException a_e) {}
                i1 += (i4 + i5);
                d = by;
                i += (int)(Test.instanceCount >>>= Test.instanceCount);
                lArrFld[i2 - 1] = (s++);
                vMeth1(i1, d, f2);
                lArrFld[i2 + 1] = i2;
                i1 = s;
            }
            i20 = 1;
            do {
                i21 = (int)Test.instanceCount;
            } while (++i20 < 5);
            for (i22 = 1; i22 < 5; i22++) {
                i3 *= (int)l;
            }
            l = (long)f2;
        }
        vMeth_check_sum += i + i1 + l + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + by + s +
            Float.floatToIntBits(f2) + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i24=121, i25=5471, i26=-223, i27=-7190, i28=-13, i29=-38094, i30=-10, i31=-64351, i32=55124, i33=-26700;
        byte by2=125;
        double d2=125.26309;
        short s3=24573;

        Test.instanceCount = Long.reverseBytes(Test.instanceCount);
        vMeth(i24, i24, Test.instanceCount);
        Test.iArrFld[(156 >>> 1) % N] |= by2;
        for (i25 = 10; i25 < 346; i25++) {
            fFld = i25;
            for (i27 = 4; i27 < 75; ++i27) {
                Test.instanceCount = -14L;
                d2 += i26;
                i24 = (int)Test.instanceCount;
            }
            by2 += (byte)i25;
            fFld *= Test.instanceCount;
            i28 -= s3;
            Test.bFld = Test.bFld;
            i29 = 1;
            while (++i29 < 75) {
                i26 += (i29 - i27);
                for (i30 = 1; i30 < 1; ++i30) {
                    fFld += i30;
                    Test.iArrFld[i29 - 1] *= i25;
                    Test.iArrFld[i29] = -11;
                    i31 -= (int)Test.instanceCount;
                }
                i28 += (((i29 * i24) + Test.instanceCount) - by2);
                for (i32 = 1; i32 < 1; ++i32) {
                    i26 >>= i26;
                    i28 += (i32 | (long)fFld);
                    if (Test.bFld) {
                        fFld *= 1;
                        i26 += (i32 + i25);
                        if (false) break;
                        byArrFld[i25 - 1] = (byte)i33;
                    } else if (Test.bFld) {
                        i31 += i32;
                    } else if (Test.bFld) {
                        i24 += (((i32 * fFld) + i24) - fFld);
                    } else {
                        Test.instanceCount -= i29;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
