package tests.javafuzzer3021;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:46:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-211L;
    public short sFld=-1116;
    public long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -87.63655);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i8, int i9, float f2) {

        int i10=-8, i11=-5, i12=65, i13=62623, i14=8, i15=3, i16=36178, iArr1[]=new int[N];
        double d1=0.126098;
        boolean b=false;
        byte by2=-81;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(fArr, 0.1016F);

        for (i10 = 1; 182 > i10; i10 += 2) {
            i11 += (-43 + (i10 * i10));
            Test.dArrFld = Test.dArrFld;
            for (i12 = i10; i12 < 17; i12++) {
                switch (((i10 % 7) * 5) + 121) {
                case 125:
                    iArr1 = iArr1;
                    Test.instanceCount += (((i12 * Test.instanceCount) + i13) - Test.instanceCount);
                case 142:
                    i9 = (int)Test.instanceCount;
                    i8 = -55083;
                    break;
                case 127:
                    for (i14 = 1; 1 > i14; ++i14) {
                        iArr1[i10] = i14;
                        switch (((i8 >>> 1) % 7) + 55) {
                        case 55:
                            i9 += -14;
                        case 56:
                            f2 = (float)d1;
                            if (b) continue;
                            break;
                        case 57:
                            i11 += (((i14 * by2) + Test.instanceCount) - i10);
                        case 58:
                            i15 = (int)Test.instanceCount;
                            break;
                        case 59:
                            Test.instanceCount >>= i12;
                            break;
                        case 60:
                            i15 += i14;
                            break;
                        case 61:
                            i8 = 12;
                            break;
                        default:
                            try {
                                iArr1[i14] = (29020 % i11);
                                iArr1[i14] = (i13 / -2104886473);
                                i8 = (-1456848165 % i13);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                    break;
                case 138:
                    Test.instanceCount &= i11;
                case 152:
                    fArr[i10 + 1] += -191;
                case 144:
                    i15 += (i12 * i12);
                    break;
                case 123:
                    i11 = i16;
                    break;
                default:
                    i16 = i10;
                }
            }
        }
        long meth_res = i8 + i9 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(d1) + (b ? 1 : 0) + by2 + i16 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i3=4, i4=82, i5=34617, i6=7937, i7=-11395, iArr[][]=new int[N][N];
        float f1=77.144F;
        double d=0.68840;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3434204464663979508L);
        FuzzerUtils.init(iArr, 187);

        for (i3 = 4; i3 < 162; i3++) {
            lArr = FuzzerUtils.long1array(N, (long)-3L);
            switch (((i3 % 5) * 5) + 44) {
            case 52:
                Test.instanceCount += i3;
                break;
            case 63:
                Test.instanceCount = Math.max(Test.instanceCount, Test.instanceCount);
                f1 += -54;
                f1 += i3;
                break;
            case 49:
                i4 += (i3 * f1);
                i4 -= (i4 + (--i4));
                break;
            case 59:
                for (d = 10; i3 < d; --d) {
                    iArr[(int)(d)] = (iArr[(int)(d - 1)] = (iArr[i3 + 1] = iArr[(int)(d - 1)]));
                    Test.instanceCount = (long)(((48813L * (i5 = (int)Test.instanceCount)) - i5) - ((-39881 + (i3 *
                        i3)) + (i3 * d)));
                    for (i6 = 1; i6 > 1; i6 -= 3) {
                        i5 += (i6 * i5);
                        Test.instanceCount >>= ((--lArr[(int)(d)]) - i6);
                    }
                }
                break;
            case 54:
                i5 = i3;
                break;
            default:
                iMeth1(i3, i5, f1);
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i5 + i6 + i7 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(byte by1) {

        int i17=-13, i18=120, i19=-4, i20=12, i21=-2, i22=10, iArr2[]=new int[N];
        long l=7723579828749062441L;
        float f3=-46.328F;

        FuzzerUtils.init(iArr2, 69);

        vMeth();
        i17 = by1;
        for (i18 = 10; i18 < 240; ++i18) {
            boolean b1=true;
            iArr2[i18] = i19;
            Test.instanceCount = i17;
            i17 += i18;
            i17 = i17;
            if (b1) continue;
            i19 = (int)42416L;
            for (l = 1; l < 7; l++) {
                if (b1) {
                    Test.instanceCount = l;
                    for (i21 = 1; i21 < 2; i21++) {
                        i17 = i19;
                        f3 %= (i18 | 1);
                    }
                } else if (b1) {
                    i19 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = by1 + i17 + i18 + i19 + l + i20 + i21 + i22 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-9282, i1=192, i2=-17895, i23=75;
        byte by=-38;
        float f=17.138F, f4=31.922F;
        boolean b2=false;

        lArrFld[(i >>> 1) % N] = i;
        for (i1 = 3; i1 < 127; ++i1) {
            sFld = (short)(((i++) * (i2 / (sFld | 1))) + (sFld--));
            lArrFld[i1 - 1] = Math.abs(i);
            by = (byte)3;
            if (b2) {
                i *= (int)(((i - Test.instanceCount) - (f++)) * iMeth((byte)(118)));
            } else if (true) {
            }
            f += i1;
        }
        for (f4 = 388; f4 > 13; --f4) {
            i2 = (int)-8.998F;
            i23 += i1;
        }
        i2 -= i23;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
