package tests.javafuzzer499;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:41:41 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-300498359386093565L;
    public static short sFld=19681;
    public static double dFld=97.63512;
    public static float fFld=4.923F;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-49);
        FuzzerUtils.init(Test.iArrFld, -11);
        FuzzerUtils.init(Test.lArrFld, -174L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {

        int i4=-2, i5=10, i6=14, i7=0, i8=-6, i9=-3451, i10=11, i11=-119;
        long l=-961974222L, lArr[]=new long[N];
        double dArr[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, -2.63311);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -7739541184479957726L);

        dArr[(i3 >>> 1) % N] = i4;
        for (i5 = 24; i5 < 393; ++i5) {
            float f1=0.51F;
            for (i7 = 1; i7 < 5; i7++) {
                i6 >>>= i8;
                for (l = 1; l < 2; l++) {
                    bArr[i5] = false;
                    i3 = i9;
                }
                i10 = 1;
                do {
                    i3 = i7;
                } while (++i10 < 2);
            }
            f1 -= i9;
            lArr[i5 - 1] += i9;
            Test.iArrFld[i5 - 1] = i4;
            i11 = 5;
            do {
                Test.iArrFld[i5 + 1] >>= i6;
                Test.iArrFld[i11 + 1] = i3;
            } while (--i11 > 0);
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + l + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(short s, int i2) {

        byte by=-88;
        int i12=156, i13=-201, i14=194, i15=-7;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.209F);

        Test.iArrFld[(i2 >>> 1) % N] = (((-iMeth(i2)) * by) >> i2);
        fArr[(i2 >>> 1) % N] = 10L;
        i2 = i2;
        Test.iArrFld[(i2 >>> 1) % N] = 200;
        i2 *= i2;
        i2 -= i2;
        for (i12 = 10; i12 < 237; ++i12) {
            i13 = 0;
            switch ((((i13 >>> 1) % 1) * 5) + 89) {
            case 93:
                Test.instanceCount *= i2;
                i13 = (int)Test.instanceCount;
                i2 += (int)Test.instanceCount;
                for (i14 = i12; i14 < 7; ++i14) {
                    Test.instanceCount *= i15;
                    Test.instanceCount = 27;
                }
                break;
            }
        }
        vMeth1_check_sum += s + i2 + by + i12 + i13 + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, int i1) {

        float f=-1.513F;
        byte by1=-55;
        int i16=-9889, i17=4, i18=0, i19=0, i20=9, i21=2;
        boolean b=true;
        double d=-1.108477;

        i *= (int)(i1 = (int)(Test.instanceCount - (i * i1)));
        Test.instanceCount = (long)(((Test.instanceCount + i1) + (Test.instanceCount - -2457720065097037799L)) - (f++));
        Test.byArrFld = (Test.byArrFld = (Test.byArrFld = (Test.byArrFld = FuzzerUtils.byte1array(N, (byte)-38))));
        i -= (int)(i1 <<= (int)((i1 ^= (int)Test.instanceCount) / (Test.iArrFld[(i1 >>> 1) % N] | 1)));
        vMeth1(Test.sFld, i1);
        i1 = by1;
        for (i16 = 8; i16 < 168; ++i16) {
            for (i18 = 1; i18 < 10; i18++) {
                i = -234;
                if (b) continue;
                Test.instanceCount = i16;
                if (true) continue;
                for (i20 = 1; i20 < 2; i20++) {
                    long l1=41497L;
                    l1 <<= 6;
                    d -= i20;
                }
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + by1 + i16 + i17 + i18 + i19 + (b ? 1 : 0) + i20 + i21 +
            Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i22=-60699, i23=-34, i24=-15, i25=42542, i26=-3, i27=0, i28=-10, i29=60795, i30=6, i31=6;
        boolean b1=true;
        short sArr[]=new short[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(sArr, (short)8259);
        FuzzerUtils.init(dArr1, -57.119874);

        vMeth(-109, -4);
        Test.instanceCount >>= Test.instanceCount;
        for (i22 = 353; i22 > 8; i22 -= 2) {
            for (i24 = 6; i24 < 146; i24++) {
                i26 = 1;
                do {
                    Test.instanceCount *= (long)Test.dFld;
                    i23 += i26;
                } while (++i26 < 2);
                Test.lArrFld[i24] = (long)Test.dFld;
                try {
                    i23 = (114 % i25);
                    i23 = (i26 % -58893);
                    i23 = (i23 % i22);
                } catch (ArithmeticException a_e) {}
                for (i27 = 1; i27 < 2; ++i27) {
                    i23 *= i23;
                }
                Test.dFld -= i22;
                if (b1) break;
                sArr[i22 + 1] = (short)i24;
                Test.instanceCount |= i25;
                dArr1[i22 - 1] *= Test.fFld;
            }
            i29 = 1;
            while (++i29 < 146) {
                Test.fFld = i29;
                i23 += i29;
                for (i30 = 1; i30 < 1; ++i30) {
                    i25 += i30;
                    i28 += (i30 - Test.fFld);
                    if (b1) break;
                    i25 += (int)Test.fFld;
                    i31 += Test.sFld;
                    Test.dFld -= i25;
                    Test.instanceCount += (((i30 * i31) + i28) - i30);
                    i25 += i30;
                    i23 += (i30 - i27);
                    Test.dFld += i24;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
