package tests.javafuzzer1172;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:56:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-577319142L;
    public static byte byFld=40;
    public static double dFld=2.119136;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, int i7, int i8) {

        int i9=-142, i10=-3, i11=138, i12=4, i13=-39802, i14=-6, iArr1[]=new int[N];
        float f1=0.606F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -200);
        FuzzerUtils.init(lArr1, -14L);

        try {
            i9 = 1;
            do {
                switch (((i9 % 6) * 5) + 43) {
                case 47:
                    for (i10 = 1; i10 < 11; ++i10) {
                        f1 = i8;
                        i8 >>>= Test.byFld;
                        i8 = -14987;
                        for (i12 = 1; i12 < 2; i12++) {
                            try {
                                i6 = (-144 % i11);
                                iArr1[i12 - 1] = (i10 / iArr1[i10]);
                                iArr1[i12 + 1] = (i9 / -252);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = i10;
                            i6 -= (int)f1;
                            iArr1[i9] *= i12;
                        }
                        i7 -= (int)f1;
                        lArr1[i10][i9 + 1] = i10;
                        i8 *= i6;
                    }
                    break;
                case 50:
                    Test.byFld = (byte)i7;
                    break;
                case 49:
                    if (i8 != 0) {
                    }
                    break;
                case 63:
                    iArr1[i9] = i9;
                    break;
                case 61:
                    i13 += (i9 + i14);
                    break;
                case 68:
                    Test.instanceCount += (-20759 + (i9 * i9));
                    break;
                default:
                    lArr1[i9][i9] -= i7;
                }
            } while (++i9 < 147);
        }
        catch (NegativeArraySizeException exc1) {
            lArr1[(i14 >>> 1) % N][(i12 >>> 1) % N] = Test.instanceCount;
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d, int i5, long l) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        lArr[(i5 >>> 1) % N] -= ((iMeth(i5, i5, i5) - i5) + -100);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i5 + l + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, float f, int i1) {

        int i2=10, i3=92, i4=-7, i15=-65139, i16=-12, i17=-8, i18=-246, i19=-241, i20=235, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 10);

        i2 = 1;
        while (++i2 < 299) {
            f -= (-14 | (~(--iArr[i2])));
            for (i3 = 6; i3 > 1; i3 -= 2) {
                vMeth1(Test.dFld, i, -3279389438857509048L);
            }
        }
        Test.instanceCount *= Test.instanceCount;
        for (i15 = 5; i15 < 262; ++i15) {
            i1 -= (int)24L;
            if (i != 0) {
                vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i15 + i16 + i17 + i18 + i19 + i20
                    + FuzzerUtils.checkSum(iArr);
                return;
            }
            for (i17 = 1; i17 < 6; ++i17) {
                for (i19 = 1; i19 < 2; i19 += 3) {
                    iArr[i19 - 1] = (int)Test.instanceCount;
                    f += (i19 + i16);
                    Test.instanceCount = i3;
                    iArr[i19 + 1] = (int)f;
                    i4 *= i4;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i15 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=161, i22=-32010, i23=5, i24=53, i25=79, i26=1157, i27=7, i28=-54300, i29=-2, i30=14444, i31=2043,
            i32=50743, i33=1;
        float f2=0.687F, f3=-60.782F;
        boolean b=false;

        vMeth(i21, -1.613F, -64964);
        i21 <<= i21;
        for (i22 = 376; i22 > 12; --i22) {
            iArrFld = iArrFld;
            f2 += i22;
            Test.byFld = (byte)-2103295446L;
            i21 ^= i23;
        }
        i21 = (int)-2.112371;
        for (f3 = 6; f3 < 274; f3++) {
            iArrFld[(int)(f3 + 1)] = (int)Test.instanceCount;
            i25 = 1;
            while (++i25 < 94) {
                i21 -= i25;
                iArrFld[(int)(f3)] = i24;
                iArrFld = iArrFld;
            }
            Test.byFld = (byte)i23;
            for (i26 = 4; i26 < 94; i26++) {
                b = b;
                for (i28 = 2; i28 > i26; i28--) {
                    iArrFld[i26 + 1] = i29;
                }
                switch ((int)(((f3 % 1) * 5) + 34)) {
                case 36:
                    for (i30 = 1; i30 < 2; i30++) {
                        Test.instanceCount = i21;
                        i21 += (((i30 * i31) + i31) - i28);
                        Test.dFld -= 6;
                        f2 *= -3436;
                        i24 = 48;
                        i24 += (i30 * i30);
                    }
                    break;
                }
                for (i32 = i26; i32 < 2; i32++) {
                    i33 *= i32;
                    Test.instanceCount = -2866;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
