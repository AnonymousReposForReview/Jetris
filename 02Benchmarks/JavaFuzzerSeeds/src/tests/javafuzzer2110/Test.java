package tests.javafuzzer2110;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:09:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static double dFld=0.8537;
    public static int iFld=15317;
    public byte byFld=4;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(double d1, int i6) {


        i6 = i6;
        long meth_res = Double.doubleToLongBits(d1) + i6;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i3, int i4, long l2) {

        double d=114.19670, d2=2.79798;
        int i5=5, i7=3, i8=-3, i9=-127, iArr1[]=new int[N];
        long l3=5L;
        byte by=110, byArr[]=new byte[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, -176);
        FuzzerUtils.init(byArr, (byte)-54);

        iArr1[(i3 >>> 1) % N] -= (int)(~(-(i4 + Test.instanceCount)));
        for (d = 7; d < 216; d += 2) {
            byMeth(d, i3);
            for (l3 = (long)(d); 15 > l3; l3++) {
                l2 += i3;
            }
            l2 -= i5;
            iArr1[(int)(d)] = i5;
            if (b1) {
                if (i4 != 0) {
                    vMeth1_check_sum += i3 + i4 + l2 + Double.doubleToLongBits(d) + i5 + l3 + i7 + i8 + by +
                        Double.doubleToLongBits(d2) + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                        FuzzerUtils.checkSum(byArr);
                    return;
                }
                l2 *= 2438082237218743837L;
                i8 = 1;
                while (++i8 < 15) {
                    byArr[(int)(d - 1)] >>= by;
                    for (d2 = 1; d2 < 1; ++d2) {
                        i3 = (int)l3;
                        i4 = -75;
                    }
                }
            } else {
                l2 -= i7;
            }
        }
        vMeth1_check_sum += i3 + i4 + l2 + Double.doubleToLongBits(d) + i5 + l3 + i7 + i8 + by +
            Double.doubleToLongBits(d2) + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(long l, float f, long l1) {

        boolean b=false;
        int i2=-19, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 1631);

        b = (i2 >= i2);
        Test.dFld += (iArr[(i2 >>> 1) % N]++);
        vMeth1(Test.iFld, Test.iFld, l1);
        i2 -= (int)-230L;
        vMeth_check_sum += l + Float.floatToIntBits(f) + l1 + (b ? 1 : 0) + i2 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-48501, i1=-80, i10=54362, i11=17648, i12=9, iArr2[]=new int[N];
        float f1=-69.647F, fArr[]=new float[N];
        boolean b2=true;
        long l4=7200887903746597369L;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, -128);
        FuzzerUtils.init(dArr, 27.72130);
        FuzzerUtils.init(fArr, 21.525F);

        for (i = 6; i < 313; i++) {
            vMeth(Test.instanceCount, -19.21F, Test.instanceCount);
            Test.iFld += (((i * Test.instanceCount) + i) - Test.iFld);
            i10 = 1;
            while ((i10 += 2) < 82) {
                f1 -= -22473;
                Test.instanceCount |= i10;
                iArr2 = iArr2;
                Test.iFld = Test.iFld;
                i11 = 1;
                do {
                    Test.instanceCount *= byFld;
                    i1 += (196 + (i11 * i11));
                    i1 >>= i;
                    Test.instanceCount -= Test.iFld;
                    Test.iFld += (((i11 * byFld) + i11) - i10);
                    Test.iFld -= 34406;
                    i1 = i1;
                    i1 += (int)Test.dFld;
                    if (b2) continue;
                } while (++i11 < 2);
                i1 -= i10;
                Test.dFld -= f1;
                for (l4 = 1; l4 < 2; l4 += 3) {
                    dArr[i + 1] -= i10;
                    i12 = i10;
                    Test.iFld = -11;
                    fArr[i10] *= 44;
                    Test.iFld += i12;
                    switch (((i10 % 2) * 5) + 33) {
                    case 35:
                        i12 += (int)l4;
                        b2 = false;
                    case 39:
                        i1 = 4;
                        break;
                    default:
                        f1 += f1;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
