package tests.javafuzzer3462;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:43:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=37L;
    public static volatile int iFld=38572;
    public static byte byFld=103;
    public static short sFld=-17967;
    public static boolean bFld=false;
    public static double dFld=-2.14998;
    public static float fFld=33.226F;
    public static float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 3.802F);
        FuzzerUtils.init(Test.sArrFld, (short)-21470);
        FuzzerUtils.init(Test.lArrFld, -167L);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f1=-1.165F, f2=-110.693F;
        double d1=-2.70284;
        int i8=176, i9=30435, i10=12, i11=0, i12=-6, iArr1[]=new int[N];
        boolean b1=true;
        short s=-6072;
        long l1=-22724827138415025L, lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(lArr, -5104L);

        f1 %= ((long)(d1) | 1);
        for (f2 = 17; f2 < 396; f2++) {
            b1 = b1;
            iArr1[(int)(f2)] = Test.iFld;
            i8 >>= Test.byFld;
            iArr1[(int)(f2 + 1)] = s;
            Test.fArrFld[(int)(f2 - 1)] *= s;
            for (l1 = (long)(f2); l1 < 4; ++l1) {
                iArr1[(int)(f2 - 1)] = (int)l1;
                for (i10 = 1; 1 > i10; i10++) {
                    Test.sArrFld[(int)(f2)] *= (short)i10;
                    i8 = (int)l1;
                }
                f1 += f1;
                lArr[(int)(f2)] *= i8;
                i11 = i12;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i8 + (b1
            ? 1 : 0) + s + l1 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(long l, boolean b, int i5) {

        int i6=-89, i7=-6, i13=-19451, i14=-98, i15=0, i16=-7, i17=-32054, i18=-6;
        float f3=74.919F;

        Test.iFld -= (int)Float.intBitsToFloat(i5);
        for (i6 = 4; i6 < 205; ++i6) {
            vMeth();
        }
        i13 = 1;
        do {
            Test.iFld += (i13 * Test.instanceCount);
        } while (++i13 < 316);
        i14 = 1;
        do {
            double d2=69.81882;
            switch ((i14 % 2) + 90) {
            case 90:
                if (b) continue;
                for (i15 = 7; 1 < i15; i15--) {
                    Test.instanceCount += i14;
                    for (i17 = 1; 2 > i17; ++i17) {
                        if (b) break;
                        i7 ^= i7;
                        Test.sFld += (short)f3;
                        i7 *= Test.iFld;
                    }
                }
                break;
            case 91:
                Test.iFld = Test.iFld;
                break;
            default:
                d2 = 14;
            }
        } while (++i14 < 227);
        long meth_res = l + (b ? 1 : 0) + i5 + i6 + i7 + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(double d, int i, float f) {

        int i1=5, i2=-9449, i3=24390, i4=-25, i19=-83, i21=-2, i22=52400, iArr[][]=new int[N][N], iArr2[]=new int[N];

        FuzzerUtils.init(iArr, 60402);
        FuzzerUtils.init(iArr2, 17689);

        for (i1 = 4; i1 < 186; ++i1) {
            for (i3 = 1; i3 < 9; i3 += 2) {
                i4 *= (int)23.958F;
                iArr[i1] = (iArr[i3 + 1] = (iArr[i1] = (iArr[i1 + 1] = iArr[i1 + 1])));
                Test.instanceCount += (((i3 * i4) + Test.instanceCount) - i3);
                Test.iFld = (int)(Test.byFld * fMeth(-10L, Test.bFld, Test.iFld));
                iArr[i3][i3 - 1] += 5;
            }
            i4 = i19;
            if (Test.bFld) {
                i2 = i19;
            } else {
                Test.byFld <<= (byte)2564468998L;
                Test.instanceCount -= (long)f;
                for (i21 = 1; 9 > i21; i21++) {
                    Test.instanceCount *= Test.iFld;
                }
                Test.iFld *= (int)d;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i19 + i21 + i22
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i23=11, i24=39, i25=-14, i26=-12041, i27=-1831, i28=-9973, i29=-14, i30=45288, iArr3[]=new int[N];
        long l2=-34152L, l3=3367357147L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.402F);
        FuzzerUtils.init(iArr3, 43500);

        fArr[(Test.iFld >>> 1) % N] += lMeth(Test.dFld, Test.iFld, Test.fFld);
        for (i23 = 6; 189 > i23; ++i23) {
            Test.iFld += (((i23 * i24) + Test.instanceCount) - i23);
        }
        l2 = 1;
        do {
            Test.fFld = Test.iFld;
            iArr3[(int)(l2)] *= i23;
            Test.byFld += (byte)(((l2 * l2) + Test.instanceCount) - i23);
            i24 += (-12 + (l2 * l2));
            i24 = (int)9L;
            Test.fArrFld[(int)(l2 - 1)] *= i24;
        } while (++l2 < 334);
        i24 = Test.iFld;
        i25 = 1;
        do {
            try {
                iArr3[i25 + 1] = (i25 / -44694);
                Test.iFld = (153 / i23);
                iArr3[i25 + 1] = (i24 / 9139);
            } catch (ArithmeticException a_e) {}
            for (i26 = 4; 90 > i26; i26++) {
                i27 = -76;
                Test.byFld = (byte)i27;
                i27 += -210;
                Test.instanceCount ^= Test.iFld;
            }
            i24 += (i25 * i26);
        } while (++i25 < 278);
        for (i28 = 6; 252 > i28; ++i28) {
            i24 = i24;
            l3 = 1;
            while (++l3 < 102) {
                Test.instanceCount = l2;
                Test.lArrFld[(int)(l3)] <<= -55642;
                i30 = 1;
                while (++i30 < 1) {
                    int i31=25637;
                    Test.iFld >>>= (int)63086L;
                    Test.instanceCount = i23;
                    i31 -= i24;
                    i29 += i30;
                    Test.fFld -= Test.fFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
