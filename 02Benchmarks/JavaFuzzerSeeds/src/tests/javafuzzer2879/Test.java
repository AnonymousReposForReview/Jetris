package tests.javafuzzer2879;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:06:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static volatile float fFld=72.132F;
    public static volatile int iFld=-38551;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6, long l) {

        int i7=-32118, i8=-46559, i9=3, i10=-14834, i11=-140, i12=-13;
        short s=-125, sArr[]=new short[N];
        double d=-27.120923;
        boolean b=true;

        FuzzerUtils.init(sArr, (short)23219);

        for (i7 = 7; 150 > i7; i7++) {
            for (i9 = 1; i9 < 11; ++i9) {
                i10 -= i10;
                i8 += i10;
                for (i11 = 1; i11 < 2; ++i11) {
                    switch (((i6 >>> 1) % 9) + 9) {
                    case 9:
                        i6 += i11;
                    case 10:
                        Test.iArrFld[i11 + 1] <<= i7;
                        Test.iArrFld[i11] = i9;
                        i8 = (int)l;
                        i12 -= i11;
                    case 11:
                        Test.instanceCount += (i11 * Test.fFld);
                        s += (short)(-9 + (i11 * i11));
                        l <<= 4152818121L;
                        if (false) continue;
                        break;
                    case 12:
                        d += Test.iFld;
                        break;
                    case 13:
                        Test.iArrFld[i7] += (int)Test.instanceCount;
                    case 14:
                        sArr = sArr;
                        break;
                    case 15:
                        b = b;
                        break;
                    case 16:
                        Test.iFld = i12;
                        break;
                    case 17:
                        i8 *= Test.iFld;
                        break;
                    default:
                        i12 <<= i6;
                    }
                }
            }
        }
        long meth_res = i6 + l + i7 + i8 + i9 + i10 + i11 + i12 + s + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i3, int i4) {

        int i13=3, i14=-23262, i15=165, iArr1[]=new int[N];
        float f1=48.409F;
        byte by=53;
        short sArr1[]=new short[N];

        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(sArr1, (short)9771);

        for (int i5 : iArr1) {
            i5 <<= (--i3);
            Test.instanceCount >>= 10;
            Test.fFld += ((iMeth1(i3, Test.instanceCount) + 53) + Test.iFld);
        }
        sArr1[(i4 >>> 1) % N] += (short)Test.instanceCount;
        Test.instanceCount -= i3;
        Test.instanceCount = Test.instanceCount;
        i3 = 4;
        i13 = 1;
        while (++i13 < 153) {
            iArr1[i13 - 1] = i4;
            i3 += Test.iFld;
            i14 = 1;
            while (++i14 < 10) {
                for (f1 = 1; f1 < 1; f1++) {
                    by = (byte)Test.iFld;
                }
                Test.instanceCount += i14;
            }
        }
        long meth_res = i3 + i4 + i13 + i14 + Float.floatToIntBits(f1) + i15 + by + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i2, float f) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 139);

        iArr[(-14 >>> 1) % N] -= iMeth(7, i2);
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-192, i1=0, i16=14, i17=-136, i18=2557, i19=33816, i20=0;
        boolean b1=false;
        short s1=18978;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -682787353L);

        i = 1;
        while ((i += 2) < 330) {
            i1 += (i * Test.instanceCount);
            vMeth(i1, Test.fFld);
            for (i16 = 1; 152 > i16; ++i16) {
                Test.iFld += i16;
                for (i18 = 1; 2 > i18; ++i18) {
                    if (b1) continue;
                    i1 >>= s1;
                    lArr[i16 - 1] *= -58;
                    i1 += i18;
                    b1 = b1;
                    i19 = i19;
                    i1 >>= (int)Test.instanceCount;
                    b1 = b1;
                    i17 <<= 83;
                    i1 -= i19;
                }
                Test.iFld -= i1;
                Test.iFld >>>= i18;
                if (b1) break;
                i19 += (-180 + (i16 * i16));
                if (b1) {
                    i20 = 1;
                    do {
                        Test.iFld >>>= i1;
                        Test.instanceCount += i20;
                        Test.instanceCount = Test.iFld;
                        Test.fFld += (i20 + i20);
                        Test.fFld -= i19;
                        if (b1) break;
                    } while (++i20 < 2);
                    Test.iArrFld[i16] = (int)Test.fFld;
                    i1 = i19;
                } else if (b1) {
                    Test.instanceCount = -224;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
