package tests.javafuzzer3314;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:47:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2082489912L;
    public static volatile byte byFld=38;
    public static float fFld=0.509F;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.7878);
        FuzzerUtils.init(Test.iArrFld, -3);
        FuzzerUtils.init(Test.lArrFld, -4602L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static long lMeth(float f1, int i6, byte by) {


        i6 >>= i6;
        i6 >>= (int)(Test.instanceCount--);
        long meth_res = Float.floatToIntBits(f1) + i6 + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth2(long l1) {

        short s1=-13212;
        int i11=33, i12=18, i13=191, i14=-24798, i15=44254, i16=-149, iArr[]=new int[N];
        double d1=-1.74771;
        float f2=-6.352F;

        FuzzerUtils.init(iArr, 10);

        Test.byFld %= (byte)(s1 | 1);
        i11 = 1;
        while (++i11 < 328) {
            iArr[i11] = s1;
            for (i12 = 1; i12 < 5; ++i12) {
                i13 += (int)d1;
                s1 += (short)(i12 ^ i13);
            }
            for (i14 = 1; i14 < 5; ++i14) {
                Test.dArrFld[i14] -= f2;
                i16 = 1;
                while (++i16 < 2) {
                    i15 += (int)-5L;
                    Test.instanceCount <<= i14;
                    iArr[i11] += (int)d1;
                    i15 += (i16 * i16);
                    i13 += i11;
                }
                l1 >>>= i13;
            }
        }
        vMeth2_check_sum += l1 + s1 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 +
            Float.floatToIntBits(f2) + i16 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i7, long l, int i8) {

        int i9=-10, i10=-166, i17=149, i18=-7, i19=1, iArr1[]=new int[N];
        float f3=74.93F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3235515238L);
        FuzzerUtils.init(iArr1, 12);

        for (i9 = 12; i9 < 256; i9++) {
            l += (2192998701L + (i9 * i9));
            if (false) {
                vMeth2(98L);
                i17 = 1;
                do {
                    for (i18 = 1; i18 < 1; i18++) {
                        lArr[i9 + 1] /= (i9 | 1);
                        i10 %= -5;
                        i7 = i7;
                        i10 += (int)1.90F;
                        i7 *= (int)f3;
                        lArr[i18] = i18;
                        f3 = l;
                        iArr1[i9] += (int)-246L;
                        f3 = l;
                    }
                } while (++i17 < 7);
            } else {
                i8 += i9;
            }
        }
        vMeth1_check_sum += i7 + l + i8 + i9 + i10 + i17 + i18 + i19 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i) {

        int i1=-4, i2=-5, i3=48816, i4=209, i5=92, i20=-62, iArr2[]=new int[N];
        double d=92.124743;
        short s=-9308;
        float f=1.889F;
        byte by1=59, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-6);
        FuzzerUtils.init(iArr2, 200);

        switch (((i >>> 1) % 4) + 13) {
        case 13:
            for (i1 = 6; i1 < 191; ++i1) {
                i3 = 1;
                while (++i3 < 9) {
                    byArr[(i3 >>> 1) % N] |= (byte)Integer.reverseBytes(Integer.reverseBytes(-10 + (i2 + i2)));
                }
                i2 -= (int)(((long)(i2 * d) ^ (-(i = i))) * (Test.instanceCount--));
                for (i4 = i1; i4 < 9; ++i4) {
                    Test.instanceCount += i4;
                    i += (i4 * Test.instanceCount);
                    i = (++s);
                    i2 = (int)((i++) * ((f * Test.instanceCount) - (38810 * lMeth(f, 101, by1))));
                    i5 = Integer.reverseBytes((int)((Test.instanceCount + i) + (i3 * 84)));
                    by1 += (byte)(Test.dArrFld[i1 - 1]++);
                    vMeth1(i3, Test.instanceCount, -44489);
                    Test.iArrFld[i4 + 1][i4 - 1] -= i1;
                }
                try {
                    i2 = (-62 % i4);
                    i2 = (i20 / 6546);
                    Test.iArrFld[i1 + 1][i1] = (i2 / i);
                } catch (ArithmeticException a_e) {}
            }
        case 14:
            i2 *= i1;
        case 15:
            Test.dArrFld[(i20 >>> 1) % N] *= Test.instanceCount;
            break;
        case 16:
            f -= f;
            break;
        default:
            i5 = i5;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + s + Float.floatToIntBits(f) + by1
            + i20 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i22=34192, i23=18390, i24=-135, i25=-6, i26=30430, i27=-8364, i28=252, i29=-9, i30=4;
        float f4=-2.739F, f5=-1.806F;
        long l3=39782L;
        double d2=0.24450;

        vMeth(i22);
        i22 = (int)Test.instanceCount;
        for (i23 = 8; i23 < 284; i23 += 3) {
            i24 += (((i23 * i24) + i22) - i23);
            try {
                i24 = (-116975499 % i23);
                i22 = (i24 % i24);
                i22 = (-12969 % i23);
            } catch (ArithmeticException a_e) {}
            i24 &= 14;
        }
        f4 = 164;
        do {
            i22 += (int)(f4 - i22);
        } while ((f4 -= 3) > 0);
        i24 &= i24;
        try {
            Test.instanceCount *= i22;
        }
        catch (UserDefinedExceptionTest exc1) {
            for (l3 = 309; l3 > 2; l3--) {
                i22 = i24;
                for (i26 = 82; i26 > l3; i26--) {
                    i22 = 42507;
                    i22 = i27;
                    Test.fFld += ((long)i26 | (long)i27);
                    Test.instanceCount <<= i25;
                }
                Test.lArrFld[(int)(l3 - 1)] = i25;
                i27 += (int)l3;
                Test.lArrFld[(int)(l3)] -= 5L;
                Test.instanceCount *= i23;
                d2 -= f4;
                Test.fFld = Test.instanceCount;
            }
        }
        for (f5 = 13; 267 > f5; ++f5) {
            Test.fFld += (f5 * Test.instanceCount);
            Test.byFld = (byte)-9;
            for (i29 = 5; i29 < 99; ++i29) {
                short s2=10927;
                i25 += (((i29 * Test.instanceCount) + l3) - s2);
                i30 = 6;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
