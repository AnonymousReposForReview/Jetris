package tests.javafuzzer1816;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:39:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4082056036868920090L;
    public static volatile int iFld=60311;
    public static short sFld=15062;
    public static float fFld=49.177F;
    public static byte byFld=67;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.410F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        byte by=-103;
        int i2=-11, i3=-191, i4=4, i5=11, i6=-149, i7=184, i8=-57, i9=-53, iArr1[]=new int[N];
        double d=0.49429;
        float f=25.105F;
        short s=13557;
        boolean b=false;

        FuzzerUtils.init(iArr1, -14);

        by += (byte)-3L;
        switch (((223 >>> 1) % 9) + 27) {
        case 27:
            Test.iFld = Test.iFld;
            iArr1[(Test.iFld >>> 1) % N] -= Test.iFld;
            switch (((Test.iFld >>> 1) % 6) + 62) {
            case 62:
                Test.iFld -= Test.iFld;
                for (i2 = 11; 289 > i2; ++i2) {
                    i4 = 1;
                    while (++i4 < 6) {
                        d -= i4;
                    }
                    i3 += (i2 * f);
                    for (i5 = 1; 6 > i5; i5 += 2) {
                        i3 -= i2;
                        for (i7 = 1; i7 < 3; i7++) {
                            Test.fArrFld[i2 + 1] = s;
                        }
                        if (b) break;
                    }
                }
                break;
            case 63:
                Test.instanceCount += Test.instanceCount;
            case 64:
                iArr1[(i5 >>> 1) % N] /= (int)(i8 | 1);
                break;
            case 65:
                i6 >>= 0;
                break;
            case 66:
                Test.iFld *= (int)Test.instanceCount;
                break;
            case 67:
                b = b;
            }
            break;
        case 28:
            Test.instanceCount -= (long)f;
            break;
        case 29:
            Test.iFld -= (int)f;
        case 30:
            Test.instanceCount += Test.instanceCount;
        case 31:
            f = -42;
        case 32:
            i6 <<= -9;
            break;
        case 33:
            i6 *= i9;
            break;
        case 34:
            Test.iFld = i9;
            break;
        case 35:
            iArr1[(i2 >>> 1) % N] -= (int)f;
            break;
        default:
            i9 += i2;
        }
        vMeth1_check_sum += by + i2 + i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i5 + i6 + i7 +
            i8 + s + (b ? 1 : 0) + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1) {

        int i10=12, i11=-30782, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 1);

        i1 += (iArr[(4 >>> 1) % N] - (--i1));
        vMeth1();
        for (i10 = 5; i10 < 189; i10++) {
            i1 *= -6;
        }
        long meth_res = i1 + i10 + i11 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        float f1=0.51F;
        int i12=10, i13=-17622, i14=18817, i15=5, i16=-152, i17=-3, i18=-2, iArr2[]=new int[N];
        long l=12L;

        FuzzerUtils.init(iArr2, 234);

        iMeth(i);
        for (f1 = 4; 259 > f1; f1++) {
            for (i13 = 6; i13 > f1; i13 -= 2) {
                Test.iFld *= i14;
                iArr2[(i13 >>> 1) % N] = (int)f1;
                i14 += i13;
                for (i15 = 1; i15 > 1; i15 -= 3) {
                    i16 = i13;
                }
                i <<= 48024;
            }
            Test.sFld += (short)Test.instanceCount;
            for (i17 = 1; i17 < 6; i17++) {
                l -= i12;
                l -= i14;
                i16 += Test.sFld;
                Test.iFld += (int)f1;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + l +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i19=-9, i20=-14, i22=-38715, i23=-33, i24=-242, i25=1, iArr3[]=new int[N];
        double d1=33.104807;

        FuzzerUtils.init(iArr3, -13);

        vMeth(Test.iFld);
        for (i19 = 2; i19 < 388; i19++) {
            i20 += (i19 | i19);
            Test.iFld += (i19 * i19);
            Test.instanceCount &= Test.instanceCount;
            Test.fFld = Test.iFld;
        }
        for (int i21 : iArr3) {
            for (i22 = 1; i22 < 63; i22++) {
                try {
                    i23 = (Test.iFld % i21);
                    Test.iFld = (i19 / 63882);
                    Test.iFld = (47 % i22);
                } catch (ArithmeticException a_e) {}
                i24 = 1;
                while (++i24 < 2) {
                    Test.iFld -= i22;
                    Test.instanceCount += -36411;
                    Test.fFld *= -218L;
                    Test.instanceCount += (i24 * i24);
                    i21 >>= 183;
                    i21 += i24;
                    Test.instanceCount = i23;
                    Test.sFld += (short)(i24 | Test.iFld);
                    i23 *= i21;
                    Test.fArrFld[i24 + 1] /= (i22 | 1);
                }
            }
            d1 = 1;
            while (++d1 < 63) {
                i25 = 1;
                while (++i25 < 1) {
                    Test.fArrFld = Test.fArrFld;
                    i21 += (((i25 * Test.fFld) + Test.byFld) - i19);
                    i20 -= (int)Test.fFld;
                    Test.fFld -= -262390364L;
                    i21 = i23;
                    Test.fFld -= Test.sFld;
                    iArr3[i25] /= (int)137L;
                }
                i20 += (int)(((d1 * i21) + i22) - Test.sFld);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
