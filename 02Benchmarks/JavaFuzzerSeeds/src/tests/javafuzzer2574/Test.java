package tests.javafuzzer2574;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:50:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=167L;
    public int iFld=-17399;
    public static float fFld=39.274F;
    public static int iFld1=206;
    public static byte byFld=121;
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4112496842L);
        FuzzerUtils.init(Test.fArrFld, 80.187F);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, int i8, int i9) {

        int i10=21457, i11=4, i12=14563, i13=-1, i14=-5, i15=2, i16=-36698, i17=38, iArr1[]=new int[N];
        double d=-2.4224;
        byte by=-122;

        FuzzerUtils.init(iArr1, -29898);

        for (i10 = 1; i10 < 278; ++i10) {
            i9 -= i7;
        }
        i7 >>= i9;
        for (d = 1; 144 > d; ++d) {
            Test.instanceCount += 58232;
            for (i13 = 1; i13 < 11; ++i13) {
                boolean b1=false;
                i12 = 181;
                for (i15 = 2; i15 > 1; --i15) {
                    i9 = (int)Test.instanceCount;
                    Test.instanceCount >>= Test.instanceCount;
                }
                switch ((int)((d % 8) + 13)) {
                case 13:
                    by = (byte)3;
                    break;
                case 14:
                    if (b1) break;
                    Test.instanceCount >>>= i13;
                case 15:
                    try {
                        i11 = (805331728 / i15);
                        i16 = (i15 / i15);
                        iArr1[(int)(d - 1)] = (i8 % iArr1[i13]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 16:
                    b1 = b1;
                    break;
                case 17:
                    if (b1) break;
                case 18:
                    if (i12 != 0) {
                    }
                case 19:
                    i8 %= (int)(i17 | 1);
                    break;
                case 20:
                    i9 = i10;
                default:
                    Test.iFld1 += (int)(3527935195301089313L + (i13 * i13));
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16 + by + i17
            + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static boolean bMeth() {

        int i6=10712, i18=-10715, i19=-66, i20=77, i21=49, i22=208, iArr2[][]=new int[N][N];
        long l=-34866L;
        boolean b2=true;

        FuzzerUtils.init(iArr2, 93);

        i6 = 316;
        while (--i6 > 0) {
            Test.iFld1 -= (int)lMeth(i6, Test.iFld1, -10);
            try {
                Test.iFld1 = (22 % Test.iFld1);
                iArr2[i6][i6 - 1] = (i6 / 186);
                Test.iFld1 = (-114 / i6);
            } catch (ArithmeticException a_e) {}
            Test.iFld1 += (i6 ^ Test.instanceCount);
            for (i18 = 1; i18 < 5; ++i18) {
                if (b2) {
                    for (l = 1; l < 2; ++l) {
                        Test.lArrFld[i6 - 1] = 32909;
                        if (b2) continue;
                        i19 += Test.iFld1;
                    }
                    i19 >>= i18;
                    Test.iFld1 = (int)-72.111487;
                    for (i21 = 1; i21 < 2; i21++) {
                        Test.byFld = (byte)Test.instanceCount;
                        Test.iFld1 = Test.byFld;
                    }
                }
            }
        }
        long meth_res = i6 + i18 + i19 + l + i20 + (b2 ? 1 : 0) + i21 + i22 + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth() {

        int i=42, i1=63940, i2=-11, i3=204, i4=3, i5=-156, i23=47090, iArr3[]=new int[N];
        float f=-2.588F;
        boolean b=false;

        FuzzerUtils.init(iArr3, 50963);

        for (i = 10; i < 377; i++) {
            for (i2 = 1; i2 < 5; ++i2) {
                for (i4 = 2; i4 > 1; i4 -= 3) {
                    i1 += (((i4 * Test.fFld) + Test.instanceCount) - i3);
                    Test.instanceCount |= Test.iFld1;
                    switch (((i2 % 2) * 5) + 98) {
                    case 104:
                        Test.lArrFld[i2] = (++i5);
                        f %= (((long)(Float.intBitsToFloat(i5++) + ((i1 - Test.iFld1) * (i5--)))) | 1);
                        break;
                    case 106:
                        b = (b = (b && bMeth()));
                        i3 = i5;
                        Test.instanceCount = 15241;
                        iArr3[i + 1] -= i4;
                    default:
                        Test.iFld1 >>= i23;
                        i5 += (i4 * i4);
                    }
                    Test.instanceCount += (-147 + (i4 * i4));
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + (b ? 1 : 0) + i23 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i24=-5, i25=-224, i26=-44263, i27=-48278, i28=-201, i29=-58537, i30=-178, i31=210, i32=-1, i33=7,
            iArr[][]=new int[N][N];
        double d1=0.17115;
        boolean b3=false, b4=false;
        short s=-28749, sArr[]=new short[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(sArr, (short)20720);

        iArr[(-13 >>> 1) % N][(iFld >>> 1) % N] += -3175;
        vMeth();
        for (i24 = 4; i24 < 154; ++i24) {
            Test.instanceCount = Test.iFld1;
            for (i26 = 167; i26 > 6; i26--) {
                Test.lArrFld[i26] = i26;
                for (d1 = 1; 2 > d1; ++d1) {
                    iArr[i24][i24 - 1] += i24;
                }
                i25 &= i24;
                Test.fArrFld[i26] = Test.instanceCount;
                Test.iFld1 = i25;
                if (false) {
                    if (b3) continue;
                } else if (b3) {
                    i29 = 1;
                    while ((i29 += 3) < 2) {
                        sArr[i29] <<= (short)Test.iFld1;
                        Test.iFld1 += i29;
                        i28 -= i28;
                        Test.instanceCount += (long)Test.fFld;
                        Test.instanceCount += (((i29 * s) + Test.iFld1) - i24);
                        i27 += (int)Test.fFld;
                    }
                    i25 += i25;
                }
            }
            b3 = b3;
            for (i30 = 5; i30 < 167; ++i30) {
                for (i32 = 1; i32 < 2; ++i32) {
                    i25 *= i32;
                    iArr[i24 + 1][i30] -= i33;
                    b3 = true;
                    i28 += i25;
                    Test.iFld1 = i31;
                    b3 = b4;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
