package tests.javafuzzer2023;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:43:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6975696088088392367L;
    public static double dFld=4.1167;
    public static short sFld=40;
    public float fFld=0.530F;
    public byte byArrFld[]=new byte[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i3) {

        int i4=-112, i5=188, i6=-1, i7=73, iArr1[]=new int[N];
        long l1=-6725L, lArr[][]=new long[N][N];
        float f1=0.263F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.224F);
        FuzzerUtils.init(iArr1, 55901);
        FuzzerUtils.init(lArr, -3L);

        for (i4 = 3; 173 > i4; i4++) {
            fArr[i4 + 1] += (float)Test.dFld;
            for (i6 = 9; i6 > 1; --i6) {
                switch (((i5 >>> 1) % 5) + 122) {
                case 122:
                    fArr[i6] = -124.399F;
                    iArr1 = FuzzerUtils.int1array(N, (int)-59224);
                case 123:
                    l1 = 1;
                    while (++l1 < 2) {
                        i3 *= i4;
                        i7 = i3;
                        f1 += (((l1 * i7) + i7) - i7);
                        i3 += i7;
                        lArr[i6 + 1][(int)(l1 + 1)] = i7;
                        i5 >>= i6;
                        iArr1[i4] = i3;
                        i5 <<= i4;
                    }
                    break;
                case 124:
                case 125:
                    i7 = (int)Test.instanceCount;
                    break;
                case 126:
                    iArr1[i6 + 1] *= i3;
                    break;
                }
            }
        }
        vMeth2_check_sum += l + i3 + i4 + i5 + i6 + i7 + l1 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f) {

        int i8=59987, i9=218, i10=5943, i11=43883, i12=50423, i13=125, i14=-195, iArr2[]=new int[N];
        boolean b=true;
        long l2=986304316L, lArr1[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr1, -62507L);
        FuzzerUtils.init(byArr, (byte)55);
        FuzzerUtils.init(iArr2, 21070);

        vMeth2(Test.instanceCount, -2);
        i8 *= i8;
        lArr1[(i8 >>> 1) % N] += i8;
        for (i9 = 347; i9 > 20; i9 -= 3) {
            i8 *= i10;
            b = false;
            l2 *= i9;
            i10 = i8;
        }
        for (i11 = 6; i11 < 254; i11++) {
            byArr[i11] += (byte)i12;
            iArr2[i11] += i8;
            i8 += (i11 | Test.sFld);
            for (i13 = 7; 1 < i13; i13--) {
                i14 += i13;
                l2 = 59807;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i8 + i9 + i10 + (b ? 1 : 0) + l2 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(short s) {

        int i=8, i1=30188, i2=-23962, i15=4, i16=-228, i17=-4, iArr[]=new int[N];
        float f2=0.418F;

        FuzzerUtils.init(iArr, 181);

        i = 1;
        do {
            for (i1 = 1; 8 > i1; i1++) {
                iArr[i - 1] = (int)(((i + -10) * (-90 ^ (Test.instanceCount - -3787141774L))) + (-(i1 + i2)));
                i2 += (((i1 * Test.instanceCount) + i2) - i);
                vMeth1(f2);
                i2 -= i;
                for (i15 = 1; i15 < 2; i15++) {
                    try {
                        i16 = (i2 % -164);
                        iArr[i1] = (i16 / i1);
                        i2 = (iArr[i1 - 1] % -3123);
                    } catch (ArithmeticException a_e) {}
                    i2 = i1;
                    if (i1 != 0) {
                        vMeth_check_sum += s + i + i1 + i2 + Float.floatToIntBits(f2) + i15 + i16 + i17 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.dFld -= i2;
                }
                try {
                    i16 = (44350 % i);
                    i2 = (i1 % i1);
                    i16 = (iArr[i] / -209);
                } catch (ArithmeticException a_e) {}
                i2 *= i17;
                iArr[i - 1] *= i1;
                f2 *= i2;
            }
        } while (++i < 209);
        vMeth_check_sum += s + i + i1 + i2 + Float.floatToIntBits(f2) + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=10030, i19=-5, i20=19905, i21=-28, i22=175, iArr3[]=new int[N];
        byte by=3;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr3, 80);
        FuzzerUtils.init(lArr2, -8L);

        vMeth(Test.sFld);
        i18 = 1;
        while (++i18 < 197) {
            by = (byte)i18;
            for (i19 = 5; i19 < 127; i19++) {
                Test.instanceCount %= -51474;
                i21 = 1;
                do {
                    Test.instanceCount += (long)fFld;
                    Test.instanceCount += (((i21 * by) + Test.sFld) - i18);
                } while (++i21 < 2);
                Test.sFld = (short)Test.dFld;
                i20 -= i18;
                iArr3[i18 + 1] -= (int)fFld;
            }
            Test.dFld += 8185626952981407730L;
            i22 = 1;
            while (++i22 < 127) {
                i20 <<= i20;
            }
            i20 = i21;
        }
        Test.dFld -= 4598;
        iArr3 = iArr3;
        fFld -= (float)-2.38768;
        for (int i23 : iArr3) {
            fFld = -12;
            Test.instanceCount = -11L;
            Test.dFld += i22;
            Test.sFld -= (short)i19;
            lArr2[(i19 >>> 1) % N][(-235 >>> 1) % N] += i19;
            i20 += i20;
            byArrFld[(i22 >>> 1) % N] = (byte)221;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
