package tests.javafuzzer1974;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:54:27 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=29818L;
    public volatile int iFld=8;
    public static float fFld=-83.59F;
    public static int iFld1=0;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
        FuzzerUtils.init(Test.iArrFld1, 11);
    }

    public static long dMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(float f, double d, int i5) {

        int i6=-36042, i7=12, i8=-10, i9=-198, iArr[][]=new int[N][N];
        boolean b=true;
        long l=-5483L;

        FuzzerUtils.init(iArr, -36651);

        i6 = 1;
        do {
            i5 >>= -122;
        } while ((i6 += 2) < 298);
        f += i6;
        f += i5;
        i7 = 1;
        do {
            i5 = (int)f;
            Test.instanceCount *= 53;
            for (i8 = 1; i8 < 8; i8++) {
                i5 = 34007;
                i5 = i6;
                if (b) continue;
                try {
                    i5 = (-242 % i9);
                    iArr[i8][i7] = (i9 / -40377);
                    i9 = (163 % i8);
                } catch (ArithmeticException a_e) {}
            }
            i9 = (int)Test.instanceCount;
            d = Test.instanceCount;
            i9 *= (int)l;
        } while (++i7 < 213);
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + l
            + FuzzerUtils.checkSum(iArr);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth(int i3, int i4) {

        int i10=-8, i11=5, i12=2;
        boolean b1=false;
        byte by=60;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(dArr, 2.6012);

        Test.instanceCount = (long)((++lArr[(i3 >>> 1) % N]) - fMeth1(Test.fFld, -1.65219, i4));
        dArr[(i3 >>> 1) % N] += i3;
        for (i10 = 1; i10 < 183; ++i10) {
            i11 >>>= i10;
            i12 = 1;
            while (++i12 < 9) {
                i4 |= i10;
                b1 = b1;
                i3 = (int)Test.instanceCount;
                Test.instanceCount -= Test.instanceCount;
                by >>>= (byte)i11;
                Test.iArrFld[i12] >>>= i11;
                lArr[i12] -= i4;
                by = (byte)Test.instanceCount;
                Test.iArrFld[i12] <<= i12;
            }
            i11 *= (int)Test.fFld;
        }
        long meth_res = i3 + i4 + i10 + i11 + i12 + (b1 ? 1 : 0) + by + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static double dMeth() {

        int i2=-2, i13=-244, i14=164, i15=107, i16=-109, i17=248, i18=-5, i19=-50088;
        short s=-21454;
        byte by1=86;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 13.673F);

        i2 += (int)(-fMeth(i2, i2));
        switch (((i2 >>> 1) % 1) + 95) {
        case 95:
            i2 *= (int)Test.fFld;
            for (i13 = 1; i13 < 219; ++i13) {
                i2 = i14;
                s -= (short)Test.fFld;
                i14 += (i13 * i13);
                i2 = i15;
                fArr[i13 + 1] *= i15;
            }
            i15 &= i15;
        }
        Test.iFld1 -= by1;
        for (i16 = 8; i16 < 139; i16++) {
            for (i18 = 1; i18 < 12; i18++) {
                Test.instanceCount >>= s;
            }
            Test.instanceCount &= by1;
        }
        long meth_res = i2 + i13 + i14 + s + i15 + by1 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-45289, i1=231, i20=-18947, i21=-1, i22=-62974, i23=36, i24=-158;
        boolean b2=false;
        byte by2=-87;
        short s1=-29751;
        long l1=44620L;
        double d1=-100.88272;

        iFld |= (int)Test.instanceCount;
        i = 1;
        do {
            i1 = 280;
            do {
                dMeth();
                iFld += i1;
                if (b2) continue;
            } while (--i1 > 0);
            by2 += (byte)(-44140 + (i * i));
            Test.iArrFld[i - 1] = i;
            Test.iFld1 += (((i * iFld) + s1) - i);
            Test.instanceCount -= -61591;
            i20 = 1;
            do {
                iFld -= Test.iFld1;
                for (i21 = i20; i21 < 4; ++i21) {
                    Test.instanceCount -= i21;
                    iFld += i21;
                    i22 -= 81;
                    i22 >>>= (int)Test.instanceCount;
                    i22 -= i21;
                    iFld = (int)Test.fFld;
                }
                iFld -= Test.iFld1;
            } while (++i20 < 145);
            Test.instanceCount += (((i * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            for (l1 = 1; l1 < i; ++l1) {
                i23 *= i21;
                i24 = 1;
                do {
                    switch (((i % 2) * 5) + 66) {
                    case 69:
                        Test.iArrFld = Test.iArrFld;
                        Test.iArrFld1 = Test.iArrFld1;
                        d1 = i23;
                        break;
                    case 68:
                        Test.iArrFld[(int)(l1 - 1)] = (int)1988181856932985024L;
                        break;
                    default:
                        Test.iArrFld1 = Test.iArrFld1;
                    }
                } while (++i24 < 2);
            }
        } while ((i += 3) < 154);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  fMeth ->  fMeth dMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
