package tests.javafuzzer1806;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:32:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static int iFld=141;
    public static int iFld1=5;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, int i2, float f) {

        int i3=-80, i4=10, i5=3, iArr1[]=new int[N];
        double d=-58.7838;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 197);
        FuzzerUtils.init(lArr, 5L);

        for (i3 = 17; 306 > i3; ++i3) {
            short s=21062;
            for (d = 1; d < 6; ++d) {
                i5 = i1;
                Test.instanceCount -= (long)f;
            }
            Test.instanceCount *= -102;
            Test.iFld = i1;
            i5 = (int)-12903L;
            switch (((Test.iFld >>> 1) % 6) + 95) {
            case 95:
                i1 = -19;
                Test.instanceCount += Test.iFld;
                i2 <<= i4;
                switch ((((i5 >>> 1) % 2) * 5) + 16) {
                case 23:
                    Test.instanceCount = i1;
                    s -= (short)i3;
                    break;
                case 17:
                default:
                    f = 9;
                }
                break;
            case 96:
                iArr1[i3 - 1] = Test.iFld;
                break;
            case 97:
                i2 >>= Test.iFld;
            case 98:
                lArr[(i1 >>> 1) % N][i3] >>>= s;
                break;
            case 99:
            case 100:
                iArr1[i3 - 1] >>= 15370;
            default:
                f += i1;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + Double.doubleToLongBits(d) + i5 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        long l=34664L;
        int i6=-18081, i7=164, i8=-63, i9=-10, iArr[]=new int[N];
        double d1=0.97801, d2=0.32251, dArr[][]=new double[N][N];
        float f1=0.346F;
        short s1=6098;
        boolean b1=true;

        FuzzerUtils.init(iArr, -193);
        FuzzerUtils.init(dArr, 49.31688);

        Test.iFld <<= (int)(((Test.instanceCount - Test.iFld) * (Test.iFld + Test.instanceCount)) + ((-(iArr[(Test.iFld
            >>> 1) % N]--)) * (Test.instanceCount / (Test.iFld | 1))));
        vMeth(Test.iFld, Test.iFld, 0.532F);
        for (l = 21; l < 357; l++) {
            dArr[(int)(l - 1)][(int)(l + 1)] += d1;
            for (i7 = 1; i7 < 5; i7++) {
                for (f1 = 1; f1 < 2; f1++) {
                    i6 += (int)(f1 - Test.instanceCount);
                    iArr[(int)(f1 - 1)] = (int)d2;
                    Test.instanceCount <<= 2;
                    i6 += (int)((long)f1 ^ Test.iFld);
                    d2 -= 118;
                    Test.instanceCount <<= Test.iFld;
                    Test.iFld >>= (int)l;
                    s1 = (short)122;
                    if (b1) break;
                }
            }
        }
        long meth_res = l + i6 + Double.doubleToLongBits(d1) + i7 + i8 + Float.floatToIntBits(f1) + i9 +
            Double.doubleToLongBits(d2) + s1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(boolean b) {

        int i=-10;
        byte by=39;

        i = (((-by) + i) - (iMeth() * i));
        vSmallMeth_check_sum += (b ? 1 : 0) + i + by;
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        int i10=-71, i11=-214, i12=5, i13=-64636, i14=7, iArr2[]=new int[N];
        float f2=-37.855F;
        double d3=84.25480;
        byte by1=65, byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, -59074);
        FuzzerUtils.init(byArr, (byte)7);

        for (int smallinvoc=0; smallinvoc<980; smallinvoc++) vSmallMeth(b2);
        if (b2) {
            iArr2[(Test.iFld >>> 1) % N] += Test.iFld;
            switch (((Test.iFld >>> 1) % 5) + 46) {
            case 46:
                for (i10 = 12; i10 < 363; i10++) {
                    for (i12 = 2; i12 < 72; ++i12) {
                        i14 = 1;
                        while (++i14 < 2) {
                            i13 -= i13;
                            i13 = i11;
                            if (b2) {
                                Test.instanceCount += i14;
                            }
                            i11 = (int)Test.instanceCount;
                            i11 %= (int)(i12 | 1);
                            iArr2[i12 - 1] -= (int)-2259719424L;
                            if (b2) {
                                Test.instanceCount += (i14 * Test.instanceCount);
                                f2 = i13;
                                if (b2) {
                                    byArr[i14 + 1] += (byte)i11;
                                    i13 = (int)Test.instanceCount;
                                    Test.instanceCount += Test.iFld1;
                                    i11 -= (int)Test.instanceCount;
                                } else if (b2) {
                                    if (b2) break;
                                } else {
                                    i13 += (i14 + Test.iFld);
                                    i13 = (int)d3;
                                }
                                switch ((i12 % 8) + 58) {
                                case 58:
                                case 59:
                                    d3 += i14;
                                    Test.instanceCount += (i14 ^ i13);
                                    Test.instanceCount += (((i14 * Test.iFld1) + f2) - Test.instanceCount);
                                    break;
                                case 60:
                                    i13 += i14;
                                    break;
                                case 61:
                                    Test.iFld = i11;
                                case 62:
                                    f2 = i14;
                                case 63:
                                    if (b2) break;
                                case 64:
                                    f2 += ((long)i14 ^ (long)i11);
                                    break;
                                case 65:
                                    Test.instanceCount += (i14 * i14);
                                    break;
                                default:
                                    Test.instanceCount *= Test.iFld1;
                                }
                            } else if (b2) {
                                Test.iFld1 = Test.iFld;
                            }
                        }
                    }
                }
                break;
            case 47:
                by1 -= (byte)i10;
            case 48:
            case 49:
                i13 = i11;
                break;
            case 50:
                i13 = Test.iFld;
                break;
            default:
                Test.iFld1 -= i11;
            }
        } else if (b2) {
            Test.instanceCount -= Test.iFld1;
        } else if (b2) {
            Test.instanceCount = i14;
        } else {
            iArr2[(i12 >>> 1) % N] -= i14;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
