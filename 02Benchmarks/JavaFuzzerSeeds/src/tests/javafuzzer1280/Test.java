package tests.javafuzzer1280;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:40:09 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8223114463501947099L;
    public static volatile float fFld=-113.662F;
    public static byte byFld=-49;
    public static double dFld=-3.16141;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -20.670F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=9938, i4=-8, i5=42011, i6=1, i7=-197, i8=13, iArr[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 1.122F);
        FuzzerUtils.init(dArr, -2.65424);
        FuzzerUtils.init(lArr, 315212151309729141L);
        FuzzerUtils.init(iArr, -13);

        for (i3 = 148; i3 > 4; i3--) {
            switch (((i3 % 5) * 5) + 52) {
            case 68:
                for (i5 = 1; i5 < 11; i5++) {
                    if (b) break;
                }
                dArr[i3 + 1] += i4;
                break;
            case 54:
                i6 ^= i6;
                i4 = i3;
                break;
            case 72:
                Test.instanceCount = (long)90.16178;
                for (i7 = 1; i7 < 11; ++i7) {
                    Test.instanceCount = i4;
                    Test.instanceCount += (i7 * i7);
                    switch (((i4 >>> 1) % 10) + 69) {
                    case 69:
                        i6 += i7;
                        Test.instanceCount -= i6;
                        lArr[i3] <<= i3;
                        break;
                    case 70:
                    case 71:
                        iArr[i7 - 1] -= (int)Test.instanceCount;
                        break;
                    case 72:
                        Test.fFld *= Test.instanceCount;
                        break;
                    case 73:
                        i6 += (((i7 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                        break;
                    case 74:
                        i4 -= (int)Test.fFld;
                        break;
                    case 75:
                        i4 += (i7 + i7);
                        break;
                    case 76:
                        lArr[i7] >>= Test.byFld;
                    case 77:
                        lArr[i3 + 1] -= (long)Test.fFld;
                        break;
                    case 78:
                        i4 += 77;
                    default:
                        i8 -= i4;
                    }
                }
            case 59:
                i6 = (int)Test.instanceCount;
                break;
            case 61:
                i4 &= (int)Test.instanceCount;
                break;
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + (b ? 1 : 0) + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i2, float f) {

        int i9=39412, i10=-167, i11=-5, i12=72, i13=-4, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, 13);

        vMeth2();
        Test.instanceCount = i2;
        i2 += i2;
        i9 = 1;
        while (++i9 < 269) {
            for (i10 = 1; i10 < 6; i10++) {
                for (i12 = 1; i12 < 2; ++i12) {
                    i2 *= (int)Test.dFld;
                }
                i13 -= i12;
                i13 = (int)f;
                i11 += (i10 | Test.byFld);
            }
            l *= Test.instanceCount;
        }
        i2 ^= i12;
        f -= i13;
        i2 += i13;
        iArr1[(-198 >>> 1) % N][(i11 >>> 1) % N] += (int)l;
        vMeth1_check_sum += l + i2 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1) {

        int i14=-30317, i15=-1, i16=-14426, i17=-7338, i18=47996, i19=64251, iArr2[][]=new int[N][N];
        short s=-11097;

        FuzzerUtils.init(iArr2, 4);

        i = i;
        vMeth1(Test.instanceCount, i, Test.fFld);
        for (i14 = 13; i14 < 245; i14++) {
            i16 = 1;
            do {
                for (i17 = 1; i17 < 1; i17++) {
                    try {
                        i1 = (iArr2[(i17 >>> 1) % N][i14 - 1] % -226671031);
                        i18 = (i1 % 4873);
                        i = (13619 / iArr2[i16][i14 + 1]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = Test.instanceCount;
                    i1 -= Test.byFld;
                    switch (((i16 % 4) * 5) + 84) {
                    case 85:
                        iArr2[i14 + 1][i16 - 1] -= i16;
                        break;
                    case 99:
                        iArr2[i17 + 1][i14] >>= i;
                        s += (short)i15;
                        break;
                    case 100:
                        iArr2[i17 - 1][i14 + 1] <<= i19;
                        Test.instanceCount = (long)Test.dFld;
                        Test.fFld += i17;
                    case 103:
                        try {
                            iArr2[i14 - 1][i17] = (iArr2[i16 + 1][i16 - 1] % i18);
                            i15 = (iArr2[i17 - 1][i17] / i1);
                            i1 = (i / -23278);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                }
            } while (++i16 < 7);
        }
        vMeth_check_sum += i + i1 + i14 + i15 + i16 + i17 + i18 + s + i19 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i20=6624, i21=-44882, i22=-115, i23=15606, i24=-8, i25=220, i26=-8, i27=207, iArr3[]=new int[N];
        boolean b1=false;
        short s1=-22562;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, -173);
        FuzzerUtils.init(lArr1, -12L);

        vMeth(i20, 45179);
        try {
            Test.instanceCount += i20;
        }
        catch (NegativeArraySizeException exc1) {
            if (b1) {
                i20 = i20;
                i20 -= i21;
                Test.instanceCount >>= i21;
            } else {
                for (i22 = 255; i22 > 9; --i22) {
                    i23 = i21;
                    switch (((58848 >>> 1) % 8) + 91) {
                    case 91:
                        Test.dFld -= -15245;
                        for (i24 = 3; 102 > i24; i24++) {
                            switch (((i22 % 2) * 5) + 69) {
                            case 74:
                                try {
                                    i20 = (-107 / i21);
                                    i25 = (iArr3[i22] / -21131);
                                    i23 = (iArr3[i22 - 1] / i21);
                                } catch (ArithmeticException a_e) {}
                                i21 -= i21;
                                i25 = 8;
                                break;
                            case 78:
                                iArr3[i22 + 1] = 50747;
                                break;
                            }
                            i20 = (int)Test.instanceCount;
                            iArr3[i22] = i20;
                        }
                        Test.instanceCount >>= -10;
                        lArr1[i22 + 1] = i20;
                        break;
                    case 92:
                        i25 += (10237 + (i22 * i22));
                        break;
                    case 93:
                        i20 = i20;
                        for (i26 = i22; i26 < 102; i26++) {
                            lArr1[i26 - 1] *= -39;
                            i23 *= i26;
                        }
                        if (b1) {
                            lArr1[i22 - 1] *= -164;
                        } else if (b1) {
                            try {
                                i20 = (i20 / i20);
                                i27 = (iArr3[i22 - 1] / i26);
                                i21 = (-5828 % iArr3[i22 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i23 = s1;
                        } else if (b1) {
                            Test.fFld += Test.instanceCount;
                        } else {
                            i20 = (int)Test.fFld;
                        }
                        break;
                    case 94:
                    case 95:
                        i27 += (i22 + i20);
                        break;
                    case 96:
                        iArr3[i22 + 1] -= i27;
                        break;
                    case 97:
                        i23 += (((i22 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                        break;
                    case 98:
                        i27 += i22;
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
