package tests.javafuzzer310;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:40:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2187836367845456879L;
    public static float fFld=-2.531F;
    public static byte byFld=118;
    public byte byFld1=-17;
    public int iFld=-60820;
    public boolean bFld=true;
    public static double dArrFld[][]=new double[N][N];
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -115.57313);
        FuzzerUtils.init(Test.iArrFld, 40576);
        FuzzerUtils.init(Test.lArrFld, 214774813L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=-154, i5=154, i6=5, i7=225, i8=44;
        float f=35.293F;
        long l3=-4781L;
        short s=25819;

        for (i4 = 181; i4 > 4; i4--) {
            switch ((i4 % 2) + 24) {
            case 24:
            case 25:
                f -= f;
                Test.instanceCount = i5;
            }
            i6 = 1;
            do {
                i5 += (int)Test.instanceCount;
                l3 = 1;
                do {
                    s = (short)i6;
                } while ((l3 -= 2) > 0);
                f -= (float)1.62079;
                i5 = (int)12L;
                for (i7 = 1; 1 > i7; i7++) {
                    i5 = i6;
                    try {
                        i8 = (132 / i5);
                        Test.iArrFld[i7 - 1] = (i8 / i6);
                        Test.iArrFld[i7] = (-30107 % i8);
                    } catch (ArithmeticException a_e) {}
                    i8 += (((i7 * i8) + i7) - f);
                    Test.lArrFld[i4 - 1][i6 + 1] = 91;
                }
            } while (++i6 < 9);
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + i6 + l3 + s + i7 + i8;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l2, int i3, double d) {


        Test.dArrFld[(-78 >>> 1) % N][(-3 >>> 1) % N] -= Test.iArrFld[(i3 >>> 1) % N];
        i3 = (int)(lMeth() * i3);
        Test.instanceCount <<= -46622;
        vMeth_check_sum += l2 + i3 + Double.doubleToLongBits(d);
    }

    public static int iMeth(long l, int i2, long l1) {

        double d1=0.30306;
        int i9=1;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 117.79F);

        fArr[(i2 >>> 1) % N] = i2;
        vMeth(l, i2, d1);
        Test.instanceCount += (long)Test.fFld;
        i9 = 1;
        do {
            i2 >>= (int)39419L;
            i2 += (i9 * i9);
            Test.iArrFld[i9] |= (int)l1;
            i2 += (i9 ^ i9);
            i2 -= i9;
            Test.iArrFld[i9 - 1] >>= i9;
            i2 <<= i9;
            Test.iArrFld = Test.iArrFld;
            Test.byFld += (byte)(((i9 * i2) + Test.instanceCount) - i2);
            Test.lArrFld[i9 + 1][i9] -= i9;
        } while (++i9 < 388);
        i2 = i9;
        long meth_res = l + i2 + l1 + Double.doubleToLongBits(d1) + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-29, i1=-3971, i10=-45969, i11=-14, i12=11851, i13=15061, i14=-2, i15=-4, i16=125, i17=8, i18=1,
            i19=-53069, i20=4, i21=-26082;
        short s1=-22474, sArr[]=new short[N];
        byte by=-7;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-26433);
        FuzzerUtils.init(dArr, -2.103058);
        FuzzerUtils.init(lArr, -43019L);

        for (i = 20; i < 332; i++) {
            switch (((iMeth(20942L, i, -39118L) >>> 1) % 3) + 28) {
            case 28:
                for (i10 = 81; i10 > i; i10 -= 3) {
                    i1 += (i10 | i11);
                    for (i12 = 1; 1 > i12; i12++) {
                        Test.instanceCount += Test.instanceCount;
                        Test.fFld += i12;
                    }
                    i11 += i10;
                    for (i14 = 1; i14 < 1; i14++) {
                        i13 += (13 + (i14 * i14));
                        sArr[i14 - 1] &= (short)-6;
                        i13 += (i14 * i14);
                        s1 -= (short)i1;
                        Test.iArrFld[i] += -9;
                        Test.instanceCount += byFld1;
                    }
                }
                i13 += 12753;
                i11 = (int)Test.fFld;
                Test.fFld += i11;
            case 29:
                for (i16 = 81; i16 > 3; i16--) {
                    iFld = i13;
                }
                i13 += i;
                for (i18 = 2; i18 < 81; ++i18) {
                    Test.instanceCount <<= 226;
                    Test.iArrFld[i18 + 1] = (int)Test.instanceCount;
                    switch (((i15 >>> 1) % 5) + 2) {
                    case 2:
                    case 3:
                        i15 += (int)Test.fFld;
                        i11 -= i19;
                        for (i20 = 1; i20 < 2; i20++) {
                            i17 = i14;
                            byFld1 += (byte)i20;
                        }
                        break;
                    case 4:
                        Test.instanceCount += (22038 + (i18 * i18));
                    case 5:
                        if (bFld) continue;
                    case 6:
                        Test.iArrFld[i + 1] >>= (int)Test.instanceCount;
                    }
                }
                break;
            case 30:
                by -= (byte)i18;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
