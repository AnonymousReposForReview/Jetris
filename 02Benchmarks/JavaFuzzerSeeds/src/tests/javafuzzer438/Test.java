package tests.javafuzzer438;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:51:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3287054843L;
    public static long lFld=7962181878509179822L;
    public float fFld=-2.985F;
    public static short sFld=-26221;
    public static int iFld=-6;
    public long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, int i6) {

        int i7=11925, i8=78, i9=-6, i10=-181, i11=194, i12=21220, i13=-8, i14=8;
        double d=0.62140;
        float f=110.191F;

        for (i7 = 18; i7 < 364; i7++) {
            Test.iArrFld[i7 - 1][i7] += i6;
            i6 += (int)(70.972F + (i7 * i7));
            Test.iArrFld[i7 + 1][i7] += (int)Test.lFld;
        }
        Test.lFld *= i8;
        for (i9 = 2; i9 < 333; i9++) {
            i5 *= -12;
            for (d = i9; d < 5; ++d) {
                i8 = (int)-44676L;
                if (i9 != 0) {
                    vMeth2_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 +
                        i14 + Float.floatToIntBits(f);
                    return;
                }
                i5 += (int)(d * d);
            }
            for (i12 = 1; 5 > i12; ++i12) {
                i14 = 1;
                while (++i14 < 2) {
                    i10 ^= i8;
                    i6 = (int)f;
                }
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f);
    }

    public static void vMeth1(int i3, long l, boolean b) {

        int i15=14, i16=13, i17=-145, iArr[]=new int[N];
        double d1=0.95952;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, -49059);
        FuzzerUtils.init(fArr, 1.24F);

        for (int i4 : iArr) {
            vMeth2(73, i4);
            i3 = i4;
            i4 = i4;
            i15 = 1;
            while (++i15 < 4) {
                b = b;
                if (true) break;
                Test.lFld |= Test.instanceCount;
                for (i16 = 1; i16 < 1; ++i16) {
                    d1 *= l;
                    fArr[i16][i15 - 1] += Test.instanceCount;
                    try {
                        i4 = (i15 / 245);
                        i17 = (-1629987077 % i15);
                        iArr[i16 - 1] = (960 / iArr[i15 + 1]);
                    } catch (ArithmeticException a_e) {}
                }
                iArr[i15] -= (int)Test.lFld;
            }
            i3 = Test.sFld;
            d1 *= i15;
        }
        vMeth1_check_sum += i3 + l + (b ? 1 : 0) + i15 + i16 + i17 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(int i1) {

        int i2=-6;
        boolean b1=true;

        lArrFld[(i1 >>> 1) % N] -= i1;
        i1 -= (int)Test.lFld;
        i2 = 1;
        do {
            vMeth1(i2, Test.instanceCount, b1);
        } while (++i2 < 219);
        fFld += i2;
        fFld += i2;
        vMeth_check_sum += i1 + i2 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-67, i18=46864, i19=-13, i20=25330, i21=17, i22=-12, i23=-60092, i24=11907, i25=61;
        double d2=1.40289;
        byte by=108;

        Test.lFld /= (((long)(fFld + ((fFld * i) + (i + -8.884F)))) | 1);
        vMeth(-28);
        for (i18 = 4; i18 < 248; i18++) {
            for (i20 = 4; i20 < 103; i20++) {
                i <<= 3;
                Test.lFld *= (long)d2;
                i19 /= (int)(i19 | 1);
                for (i22 = 1; i22 < 2; i22 += 2) {
                    i19 += (((i22 * Test.lFld) + Test.lFld) - i22);
                    i21 *= (int)d2;
                    Test.iArrFld[i20 + 1][i22] = (int)Test.lFld;
                    Test.iArrFld[i20][i22 - 1] = i21;
                    i19 *= -12;
                    d2 *= i20;
                    d2 -= Test.iFld;
                    i21 = (int)Test.lFld;
                }
                Test.lFld = i21;
                i21 -= (int)Test.instanceCount;
                switch ((i20 % 2) + 85) {
                case 85:
                    d2 += i;
                    fFld *= Test.lFld;
                    break;
                case 86:
                    Test.sFld = (short)Test.lFld;
                    Test.instanceCount <<= 14113;
                    Test.lFld = Test.iFld;
                    Test.iArrFld[i20 - 1][i18 - 1] = i;
                    break;
                default:
                    i19 += i20;
                    Test.instanceCount = (long)d2;
                }
                Test.lFld += (i20 ^ Test.instanceCount);
            }
            by += (byte)(((i18 * Test.sFld) + Test.sFld) - i24);
            i25 -= i18;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
