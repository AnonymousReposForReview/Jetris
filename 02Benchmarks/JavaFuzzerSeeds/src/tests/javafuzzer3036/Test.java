package tests.javafuzzer3036;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:04:56 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public static int iFld=-36;
    public static float fFld=95.644F;
    public static volatile boolean bFld=false;
    public short sFld=-11847;
    public static double dFld=-2.12476;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3511);
        FuzzerUtils.init(Test.lArrFld, 28531L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i4=-63988, i5=26, i6=38295, i7=-8, i8=-37411, i9=167;
        double d1=11.105216;
        long l3=-7L, lArr[]=new long[N];
        byte by=109;

        FuzzerUtils.init(lArr, -29572L);

        lArr[(Test.iFld >>> 1) % N] += Test.instanceCount;
        for (int i3 : Test.iArrFld) {
            i4 = 1;
            while (++i4 < 4) {
                Test.instanceCount = i3;
            }
            Test.instanceCount = i3;
        }
        for (i5 = 322; i5 > 17; i5 -= 3) {
            i6 *= (int)3567343604L;
            d1 %= (i6 | 1);
            for (i7 = 1; i7 < 15; ++i7) {
                i6 -= i4;
            }
            l3 = 15;
            while (--l3 > 0) {
                lArr[i5] *= i5;
                i9 = 1;
                do {
                    Test.instanceCount *= by;
                    Test.iFld += i4;
                } while (++i9 < 1);
            }
        }
        long meth_res = i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + l3 + i9 + by +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l2, short s) {

        double d=93.53240;
        float f=0.380F;
        int i10=-27814, i11=251, i12=0, i13=66, i14=6;
        byte by1=8;
        boolean b=true;

        Test.iFld = (int)(l2 + ((Test.instanceCount - 12077L) + (Test.iFld + d)));
        Test.iArrFld[(Test.iFld >>> 1) % N] &= (int)5769430044647549194L;
        f -= iMeth();
        for (i10 = 11; i10 < 281; ++i10) {
            Test.lArrFld[i10] = l2;
            by1 += (byte)i10;
            f *= l2;
            i11 <<= i11;
            switch (((i11 >>> 1) % 9) + 67) {
            case 67:
                l2 |= Test.iFld;
                break;
            case 68:
                i12 = 1;
                while (++i12 < 6) {
                    for (i13 = 1; i13 < 1; ++i13) {
                        b = b;
                        f /= (i12 | 1);
                    }
                    i14 -= i14;
                }
            case 69:
                s = (short)4236;
                break;
            case 70:
                i11 += (((i10 * i10) + i10) - Test.instanceCount);
                break;
            case 71:
                Test.iFld <<= -182;
            case 72:
                i11 = (int)l2;
                break;
            case 73:
                Test.iFld /= (int)((long)(d) | 1);
                break;
            case 74:
                d -= d;
                break;
            case 75:
                Test.iFld = i14;
            default:
                f += i12;
            }
        }
        vMeth1_check_sum += l2 + s + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i10 + i11 + by1 + i12 + i13
            + i14 + (b ? 1 : 0);
    }

    public static void vMeth(long l, long l1) {

        short s1=-31996, sArr[]=new short[N];
        byte by2=56;
        int i15=-52954, i16=50738, i17=6;
        double d2=2.50869;
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)564);
        FuzzerUtils.init(fArr, 1.53F);

        vMeth1(l1, s1);
        Test.instanceCount ^= Test.instanceCount;
        sArr[(Test.iFld >>> 1) % N] = (short)218;
        by2 &= (byte)Test.iFld;
        for (i15 = 1; i15 < 183; ++i15) {
            Test.iFld += (i15 * i15);
            d2 *= Test.instanceCount;
            i17 = 1;
            while (++i17 < 9) {
                if (Test.bFld) {
                    fArr[i17 + 1] -= i15;
                    Test.fFld += i16;
                } else if (Test.bFld) {
                    Test.fFld /= ((long)(d2) | 1);
                } else {
                    Test.iFld = (int)Test.fFld;
                    i16 = i17;
                    vMeth_check_sum += l + l1 + s1 + by2 + i15 + i16 + Double.doubleToLongBits(d2) + i17 +
                        FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                Test.iFld += i17;
            }
        }
        vMeth_check_sum += l + l1 + s1 + by2 + i15 + i16 + Double.doubleToLongBits(d2) + i17 +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-35, i1=2804, i2=-9, i18=83, i19=-9487, i20=14, i22=-36464;
        byte by3=-103;
        long l5=1L;

        i += (int)Test.instanceCount;
        for (i1 = 20; i1 < 366; i1++) {
            vMeth(Test.instanceCount, Test.instanceCount);
            by3 = (byte)-22930L;
            Test.iArrFld[i1 + 1] += (int)Test.instanceCount;
            Test.instanceCount -= -225;
            Test.instanceCount += (17 + (i1 * i1));
            Test.lArrFld[(i >>> 1) % N] += Test.instanceCount;
            Test.iArrFld = Test.iArrFld;
            Test.bFld = false;
        }
        if (Test.bFld) {
            sFld = (short)i;
            Test.instanceCount = Test.iFld;
            i18 = 1;
            while (++i18 < 163) {
                int i21=11;
                Test.iFld += (((i18 * by3) + Test.instanceCount) - Test.instanceCount);
                if (Test.bFld) {
                    l5 = 154;
                    while (--l5 > 0) {
                        fArrFld[i18 + 1] += (float)Test.dFld;
                        if (Test.bFld) break;
                        i ^= (int)Test.instanceCount;
                        for (i19 = 1; i19 > 1; i19--) {
                            Test.fFld %= (sFld | 1);
                            Test.instanceCount = Test.instanceCount;
                        }
                    }
                    Test.iFld += (int)Test.instanceCount;
                }
                i20 += (((i18 * i18) + Test.iFld) - Test.fFld);
                sFld = (short)i21;
                i2 += (((i18 * i18) + sFld) - Test.instanceCount);
                i22 = 1;
                while (++i22 < 154) {
                    fArrFld[i22] *= i19;
                    i2 = i2;
                }
            }
        } else {
            i20 += i2;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
