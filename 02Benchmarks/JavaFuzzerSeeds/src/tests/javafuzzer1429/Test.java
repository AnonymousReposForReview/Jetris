package tests.javafuzzer1429;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:14:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-75L;
    public static volatile boolean bFld=false;
    public short sFld=14770;
    public volatile int iFld=-1;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-70);
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, short s, long l) {

        int i3=12, i4=-206, i5=-187, i6=-7, i7=-28, i8=-22429;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(bArr, true);

        for (i3 = 4; i3 < 287; i3++) {
            for (i5 = 1; i5 < 6; ++i5) {
                i4 += (i5 * l);
                i2 += (((i5 * i4) + i4) - i2);
                for (i7 = 1; i7 < 2; ++i7) {
                    boolean b=false;
                    i8 = i3;
                    i6 += (i7 * i7);
                    l = Test.instanceCount;
                    switch ((((i4 >>> 1) % 2) * 5) + 36) {
                    case 41:
                        if (i5 != 0) {
                        }
                        break;
                    case 38:
                        i8 += i7;
                        if (b) continue;
                    }
                    lArr[i5] += l;
                    b = b;
                    bArr = FuzzerUtils.boolean1array(N, (boolean)true);
                }
            }
        }
        long meth_res = i2 + s + l + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i, int i1) {

        double d1=-115.13295;
        short s1=9235, sArr[]=new short[N];
        int i9=27065, i10=7;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)19127);
        FuzzerUtils.init(lArr1, 1134322459L);

        Test.byArrFld[(44367 >>> 1) % N] *= (byte)446L;
        d1 = (i * iMeth(i, s1, Test.instanceCount));
        i1 *= (int)Test.instanceCount;
        sArr[(i1 >>> 1) % N] -= (short)i;
        for (i9 = 271; i9 > 5; --i9) {
            b1 = b1;
            d1 *= 2858651838L;
            i1 += i9;
            try {
                i10 = (i1 / i10);
                Test.iArrFld[i9] = (i / i9);
                i1 = (Test.iArrFld[i9 - 1] / Test.iArrFld[i9 - 1]);
            } catch (ArithmeticException a_e) {}
            if (b1) break;
            Test.instanceCount += i9;
            i &= i10;
            Test.instanceCount *= i;
            lArr1[i9] -= Test.instanceCount;
            i1 += (-12 + (i9 * i9));
        }
        vMeth1_check_sum += i + i1 + Double.doubleToLongBits(d1) + s1 + i9 + i10 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(double d) {

        int i11=49526, i12=-7, i13=111, i14=-173;
        float f=34.754F;

        vMeth1(i11, i11);
        f *= i11;
        try {
            for (i12 = 5; 146 > i12; i12++) {
                i14 = 1;
                do {
                    short s2=674;
                    i11 = i13;
                    i13 -= i14;
                    if (Test.bFld) {
                        Test.iArrFld[i14 + 1] = i11;
                        vMeth_check_sum += Double.doubleToLongBits(d) + i11 + Float.floatToIntBits(f) + i12 + i13 + i14;
                        return;
                    } else if (Test.bFld) {
                        f += i14;
                    }
                    switch (((i14 % 5) * 5) + 6) {
                    case 31:
                        i11 += i12;
                        i11 = i12;
                        i11 = i11;
                        Test.bFld = Test.bFld;
                        break;
                    case 12:
                        i13 = i14;
                        break;
                    case 24:
                        d = i14;
                        break;
                    case 14:
                        f = s2;
                        break;
                    case 16:
                    }
                } while (++i14 < 11);
            }
        }
        catch (ArithmeticException exc1) {
            i13 = i13;
        }
        finally {
            Test.instanceCount = i12;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i11 + Float.floatToIntBits(f) + i12 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        double d2=1.48308;
        long l1=3L;
        int i17=-177, i18=-14226, i19=13968, i20=-5, i21=28, i22=12, i23=-10, i24=196, i25=-12;
        float f1=0.624F;

        vMeth(d2);
        for (int i16 : Test.iArrFld) {
            switch ((((i16 >>> 1) % 1) * 5) + 103) {
            case 105:
                Test.iArrFld[(i16 >>> 1) % N] = -12;
                i16 <<= (int)49024L;
            default:
                i16 = i16;
                i16 = i16;
                Test.iArrFld[(245 >>> 1) % N] *= i16;
            }
            for (l1 = 3; l1 < 63; ++l1) {
                i17 = i16;
                sFld += (short)(l1 * i16);
            }
            Test.iArrFld[(i17 >>> 1) % N] += (int)f1;
            f1 = i16;
        }
        i17 += i17;
        i17 += i17;
        i17 += i17;
        for (i18 = 12; i18 < 299; ++i18) {
            for (i20 = 88; i20 > i18; i20 -= 2) {
                i17 *= 9;
                if (false) break;
            }
            f1 += i17;
        }
        i19 += (int)l1;
        i17 = (int)1L;
        i17 = (int)l1;
        Test.iArrFld[(i21 >>> 1) % N] -= 6;
        Test.instanceCount <<= l1;
        for (i22 = 293; i22 > 16; i22 -= 3) {
            for (i24 = 10; i24 < 272; i24++) {
                Test.bFld = Test.bFld;
                try {
                    iFld = (Test.iArrFld[i24 - 1] % i20);
                    iFld = (i25 / i19);
                    Test.iArrFld[i22] = (i21 / Test.iArrFld[i22]);
                } catch (ArithmeticException a_e) {}
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
