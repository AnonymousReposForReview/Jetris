package tests.javafuzzer2252;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:00:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static float fFld=-94.331F;
    public static short sFld=-5133;
    public int iFld=-12;
    public static boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i2, float f) {

        byte by=-22;
        int i3=-226, i4=5, i5=-100, iArr[][]=new int[N][N];
        short s=8589;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(fArr, 1.29F);

        i2 = i2;
        i2 -= i2;
        i2 += i2;
        Test.instanceCount -= Test.instanceCount;
        by >>= (byte)i2;
        for (i3 = 22; i3 < 395; ++i3) {
            switch ((i3 % 7) + 57) {
            case 57:
                i2 |= (int)l1;
                iArr[i3 + 1][i3 - 1] = i2;
            case 58:
                if (i3 != 0) {
                    vMeth_check_sum += l1 + i2 + Float.floatToIntBits(f) + by + i3 + i4 + i5 + s +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                i5 = 1;
                do {
                    i4 += (((i5 * i5) + i2) - i3);
                } while ((i5 += 2) < 5);
            case 59:
                s = (short)i2;
                Test.instanceCount *= (long)70.279;
                fArr[i3] -= i2;
            case 60:
                s += (short)(((i3 * i2) + f) - i4);
                break;
            case 61:
                by += (byte)(i3 - i5);
                break;
            case 62:
                iArr[i3][i3 + 1] <<= i2;
                break;
            case 63:
                i4 += (((i3 * i2) + by) - by);
                break;
            default:
                i2 = 11;
            }
        }
        vMeth_check_sum += l1 + i2 + Float.floatToIntBits(f) + by + i3 + i4 + i5 + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(int i1, long l) {

        int i6=-244, i7=-1, i8=-5, i9=-3, i10=-1204, i11=-5, i12=-231, i13=42109, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -174);

        i1 = (int)-1L;
        vMeth(Test.instanceCount, i1, Test.fFld);
        for (i6 = 10; i6 < 215; i6++) {
            for (i8 = 1; i8 < 8; i8++) {
                i9 += i8;
                Test.instanceCount = -28286;
                for (i10 = 1; i10 < 2; i10++) {
                    Test.sFld = (short)1;
                    l *= i1;
                }
                i7 += i8;
                for (i12 = 1; i12 < 2; i12++) {
                    iArr1[i12 + 1] &= i8;
                    Test.fFld = Test.fFld;
                    if (b) continue;
                }
                l >>>= 63;
            }
        }
        long meth_res = i1 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        double d=-108.25957;
        int i14=-7, i15=46446, i16=217, i17=-40881, i18=9, i19=12;
        long l2=14134L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3322850548L);

        d = ((Test.instanceCount + iMeth1(i14, 38L)) + Test.instanceCount);
        for (i15 = 16; i15 < 297; i15++) {
            i17 = 1;
            while (++i17 < 6) {
                Test.fFld = i16;
                iArrFld[i17][i17] >>>= (int)Test.instanceCount;
                i14 += i17;
                lArr[i15 + 1] -= Test.instanceCount;
            }
            i16 -= -13;
            i14 += (i15 + i14);
            for (i18 = 6; i18 > 1; --i18) {
                i19 += (int)1.352F;
                Test.instanceCount = l2;
                i16 = i17;
                i14 = (int)l2;
                l2 = -2489;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + i18 + i19 + l2 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i20=14, i21=-20624, i22=11, i23=-43900, i24=41128, i25=-226;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.34562);

        dArr[(i >>> 1) % N] = (((-iMeth()) - 12) - -222);
        Test.instanceCount /= (Test.instanceCount | 1);
        Test.instanceCount -= i;
        for (i20 = 4; i20 < 197; ++i20) {
            i21 += (((i20 * Test.instanceCount) + i21) - Test.fFld);
            iArrFld[i20] = iArrFld[i20 + 1];
            for (i22 = 2; i22 < 130; ++i22) {
                i -= -18143;
                if (true) {
                    i23 = (int)Test.fFld;
                    i21 = iFld;
                    i += i20;
                    iFld += (int)53907L;
                } else if (Test.bFld) {
                    Test.lArrFld[i20] = i23;
                    for (i24 = i22; 2 > i24; i24++) {
                        switch ((i24 % 7) + 96) {
                        case 96:
                            i21 = (int)12244L;
                            i23 >>>= (int)Test.instanceCount;
                        case 97:
                            i23 = -10;
                            break;
                        case 98:
                            Test.fFld -= i22;
                        case 99:
                            Test.instanceCount += i24;
                            i23 *= (int)Test.instanceCount;
                            Test.instanceCount += 0;
                            break;
                        case 100:
                            i23 = (int)Test.instanceCount;
                            i25 += (((i24 * i20) + Test.fFld) - i23);
                            i21 <<= i22;
                            break;
                        case 101:
                            i23 = i21;
                            if (Test.bFld) continue;
                            i23 -= 13611;
                            break;
                        case 102:
                            iFld += (int)(0.854F + (i24 * i24));
                            break;
                        default:
                            Test.lArrFld = Test.lArrFld;
                        }
                    }
                } else {
                    i25 += (((i22 * i24) + i21) - Test.instanceCount);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
