package tests.javafuzzer790;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:50:43 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2213433254L;
    public static int iFld=21025;
    public static byte byFld=-80;
    public static boolean bFld=true;
    public int iFld1=1;
    public short sFld=-26293;
    public static double dFld=-105.113639;
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld1, -8L);
        FuzzerUtils.init(Test.fArrFld, 2.932F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i1=4, i2=-109, i3=-14, i4=-80, i5=80, i6=13031, i7=-10658, iArr1[]=new int[N];
        float f=-1.601F, f1=-1.612F;
        short s=8630;
        boolean b=true;

        FuzzerUtils.init(iArr1, -58366);

        i1 = 1;
        while (++i1 < 194) {
            for (i2 = 1; i2 < 8; i2++) {
                for (i4 = 2; i4 > i2; --i4) {
                    Test.instanceCount = i3;
                }
            }
        }
        for (i6 = 381; i6 > 3; --i6) {
            if (b) {
                i3 += (i6 * f);
                f1 = 1;
                while (++f1 < 4) {
                    i5 = i7;
                    s = (short)i3;
                    i7 *= i3;
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) +
                            Float.floatToIntBits(f1) + s + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    iArr1[(int)(f1)] = Test.iFld;
                }
            }
            iArr1[i6] = i3;
            i7 += (i6 + Test.iFld);
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + s +
            (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -40782);

        Test.instanceCount = (Test.iFld + iArr[(i >>> 1) % N]);
        vMeth1();
        Test.lArrFld1[(-30 >>> 1) % N] += i;
        Test.instanceCount = Test.iFld;
        long meth_res = i + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i8=104, i9=54, i10=0, iArr2[]=new int[N], iArr3[]=new int[N];
        short s1=-24942;
        double d=-108.90451, d1=2.68580, dArr[][]=new double[N][N];
        float f2=-57.153F, f3=62.256F;

        FuzzerUtils.init(iArr2, 215);
        FuzzerUtils.init(iArr3, 7);
        FuzzerUtils.init(dArr, 0.80124);

        Test.iFld -= iMeth(Test.iFld);
        iArr2 = iArr2;
        iArr3[(Test.iFld >>> 1) % N] &= 63215;
        Test.iFld = Test.iFld;
        for (long l : Test.lArrFld1) {
            Test.iFld = Test.iFld;
            for (i8 = 1; i8 < 4; ++i8) {
                Test.iFld *= s1;
                Test.fArrFld[i8 + 1][i8 - 1] = (float)d;
                iArr3[i8] >>= Test.iFld;
                i10 = 1;
                do {
                    switch (i8 + 59) {
                    case 59:
                        i9 = Test.byFld;
                        try {
                            i9 = (1325352627 / iArr3[i8 - 1]);
                            i9 = (-556964958 / i10);
                            iArr3[i8 + 1] = (i10 / 134);
                        } catch (ArithmeticException a_e) {}
                        l += (long)-2.71772;
                        break;
                    case 60:
                        f2 += i10;
                        break;
                    case 61:
                        f2 *= i8;
                        break;
                    case 62:
                        i9 += (int)f2;
                        break;
                    case 63:
                        f2 += (i10 * f2);
                    case 64:
                        Test.iFld += i10;
                        break;
                    case 65:
                        Test.iFld *= 6;
                    case 66:
                        i9 = Test.iFld;
                        break;
                    case 67:
                        dArr[i10][i10 + 1] += i9;
                        break;
                    case 68:
                        Test.iFld -= Test.iFld;
                        break;
                    case 69:
                        iArr3 = iArr3;
                        break;
                    case 70:
                    case 71:
                        try {
                            i9 = (212 % Test.iFld);
                            iArr2[i8] = (Test.iFld % 169);
                            Test.iFld = (iArr3[i8 + 1] / 26316);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 72:
                        f3 += 2526021793L;
                        break;
                    case 73:
                    case 74:
                        l *= Test.instanceCount;
                        break;
                    case 75:
                        Test.iFld = 11;
                    case 76:
                        Test.iFld >>>= (int)Test.instanceCount;
                        break;
                    case 77:
                        Test.instanceCount += i10;
                        break;
                    case 78:
                        Test.instanceCount >>= i8;
                    case 79:
                        Test.fArrFld[i10 - 1][i10 + 1] = i8;
                        break;
                    case 80:
                        Test.byFld = (byte)-186L;
                        break;
                    case 81:
                        Test.iFld = Test.iFld;
                    case 82:
                        if (Test.iFld != 0) {
                            vMeth_check_sum += i8 + i9 + s1 + Double.doubleToLongBits(d) + i10 +
                                Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) +
                                FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    case 83:
                    case 84:
                        i9 = i9;
                        break;
                    case 85:
                        i9 += (i10 * i10);
                        break;
                    case 86:
                        s1 += (short)(i10 * i8);
                        break;
                    case 87:
                        s1 += (short)(i10 * i10);
                        break;
                    case 88:
                        i9 += (int)Test.instanceCount;
                        break;
                    case 89:
                    case 90:
                        Test.iFld |= Test.byFld;
                        break;
                    case 91:
                    case 92:
                        iArr2[i10 + 1] -= i8;
                    case 93:
                        l *= Test.iFld;
                    case 94:
                    case 95:
                        Test.instanceCount = s1;
                    case 96:
                        i9 = s1;
                        break;
                    case 97:
                        if (Test.bFld) continue;
                        break;
                    case 98:
                    case 99:
                    case 100:
                        Test.iFld += Test.iFld;
                        break;
                    case 101:
                        Test.iFld += (i10 * i10);
                    case 102:
                        i9 = i9;
                    case 103:
                        Test.instanceCount = i10;
                        break;
                    case 104:
                        l = (long)f3;
                        break;
                    case 105:
                        i9 = Test.iFld;
                        break;
                    case 106:
                        Test.iFld += i10;
                        break;
                    case 107:
                        f3 += (i10 * i9);
                        break;
                    case 108:
                        iArr2 = iArr2;
                        break;
                    case 109:
                        iArr3[i8 + 1] *= (int)l;
                    case 110:
                        d *= d1;
                    case 111:
                        Test.iFld += i10;
                        break;
                    case 112:
                        Test.iFld += (0 + (i10 * i10));
                        break;
                    case 113:
                    case 114:
                        i9 += (((i10 * i10) + i10) - f2);
                        break;
                    case 115:
                        s1 *= (short)i9;
                        break;
                    case 116:
                        iArr2[i10 - 1] = (int)-4905198257846037385L;
                        break;
                    case 117:
                        Test.instanceCount += (i10 * i10);
                    case 118:
                        Test.iFld <<= i8;
                        break;
                    case 119:
                        Test.iFld += Test.byFld;
                    case 120:
                        f2 = i10;
                        break;
                    case 121:
                        iArr3[i8 - 1] *= (int)41372L;
                        break;
                    case 122:
                        Test.instanceCount *= i10;
                        break;
                    case 123:
                        Test.iFld += (int)l;
                        break;
                    case 124:
                        Test.iFld *= i10;
                        break;
                    case 125:
                    case 126:
                        f2 -= Test.instanceCount;
                        break;
                    case 127:
                        Test.iFld <<= Test.iFld;
                        break;
                    case 128:
                        l -= i8;
                        break;
                    default:
                        i9 -= i10;
                    }
                } while (++i10 < 2);
            }
        }
        vMeth_check_sum += i8 + i9 + s1 + Double.doubleToLongBits(d) + i10 + Float.floatToIntBits(f2) +
            Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i11=2, i12=154, i13=121, i14=47802, i15=211, i16=11, iArr4[]=new int[N];
        float f4=1.279F;

        FuzzerUtils.init(iArr4, -32706);

        Test.iFld = Math.abs((Test.iFld * Test.iFld) - Test.byFld);
        Test.iFld += (int)lArrFld[(147 >>> 1) % N];
        vMeth();
        for (i11 = 4; i11 < 297; ++i11) {
            Test.instanceCount += Test.iFld;
            lArrFld[i11 + 1] = 49503L;
            Test.instanceCount *= 31;
            i13 = 1;
            do {
                i14 = 1;
                while (++i14 < 1) {
                    i12 -= i13;
                    i12 *= (int)f4;
                }
                Test.instanceCount = Test.iFld;
                i12 = (int)Test.instanceCount;
                for (i15 = 1; i15 < 1; i15++) {
                    i12 += (((i15 * iFld1) + Test.instanceCount) - Test.iFld);
                    switch ((i13 % 1) + 35) {
                    case 35:
                        iFld1 += (26782 + (i15 * i15));
                        i12 += i15;
                        iArr4[i11 - 1] -= (int)f4;
                        iFld1 = i14;
                        break;
                    default:
                        iArr4 = iArr4;
                        iArr4[i15] -= iFld1;
                        Test.lArrFld1[i11] = Test.instanceCount;
                    }
                    switch ((((i14 >>> 1) % 1) * 5) + 33) {
                    case 34:
                        Test.iFld -= sFld;
                        Test.dFld = 696909349L;
                        break;
                    default:
                        i16 += (int)(134L + (i15 * i15));
                        Test.iFld = i14;
                        Test.instanceCount = i13;
                    }
                    Test.byFld += (byte)(i15 * i15);
                }
            } while (++i13 < 86);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
