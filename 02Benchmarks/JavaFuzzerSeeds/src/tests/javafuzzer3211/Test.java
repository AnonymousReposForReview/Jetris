package tests.javafuzzer3211;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:56:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=49L;
    public static float fFld=2.988F;
    public static short sFld=29049;
    public static boolean bFld=false;
    public static boolean bFld1=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -246);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i2, double d2, int i3) {

        int i4=-198, i5=-13, i6=12, i7=159, i8=9, iArr[]=new int[N];
        short s=-29904;
        float f1=-79.330F, fArr1[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr, -2150);
        FuzzerUtils.init(fArr1, 0.280F);

        i3 = (int)Test.instanceCount;
        for (i4 = 13; i4 < 237; i4++) {
            for (i6 = 1; i6 < 7; ++i6) {
                s += (short)(((i6 * f1) + i4) - i2);
                b = b;
                iArr[(-33 >>> 1) % N] >>= i6;
                if (b) break;
                if (b) {
                    i7 -= -2;
                    s += (short)i3;
                    i8 = 1;
                    while (++i8 < 2) {
                        i5 = i5;
                        f1 += (((i8 * i8) + i6) - i8);
                        i2 += (i8 - i6);
                        i2 += (i8 * i8);
                    }
                } else if (b) {
                    fArr1 = FuzzerUtils.float1array(N, (float)-2.734F);
                } else {
                    i5 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d2) + i3 + i4 + i5 + i6 + i7 + s + Float.floatToIntBits(f1) + (b ?
            1 : 0) + i8 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        double d1=1.29763;
        int i1=-21718, i9=-9662, i10=-64566, i11=-217;
        short s1=9039;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr1, 6L);
        FuzzerUtils.init(fArr, 76.120F);
        FuzzerUtils.init(byArr, (byte)-127);

        lArr1[(5 >>> 1) % N] %= ((long)(d1) | 1);
        fArr[(i1 >>> 1) % N] = (float)(lArr1[(i1 >>> 1) % N] += (long)dMeth(i1, 81.29532, i1));
        Test.instanceCount >>= Test.instanceCount;
        Test.fFld = Test.instanceCount;
        i1 = i1;
        for (i9 = 20; i9 < 350; i9++) {
            i10 += i1;
            d1 += i1;
            Test.fFld += i10;
            Test.iArrFld[i9 + 1] >>>= i10;
            Test.fFld += i9;
            s1 >>= (short)-26011;
            i1 += i9;
            byArr[i9] >>= (byte)Test.instanceCount;
            i1 >>= i11;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i1 + i9 + i10 + s1 + i11 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth() {

        double d=94.119886;
        long l=-2707347867L;
        int i12=6, i13=33, i14=12;
        boolean b1=false;
        byte by1=108;

        d -= (++Test.instanceCount);
        vMeth();
        l = 1;
        while (++l < 390) {
            Test.iArrFld = Test.iArrFld;
            i12 *= i12;
            i12 += (int)(((l * i12) + Test.sFld) - i12);
            Test.fFld += -891;
        }
        Test.iArrFld[(0 >>> 1) % N] -= i12;
        Test.fFld -= i12;
        i12 = Test.sFld;
        for (i13 = 17; i13 < 379; i13++) {
            i14 += (i13 * i13);
            Test.iArrFld[i13 - 1] = i12;
            if (b1) break;
            by1 += (byte)(((i13 * Test.sFld) + i12) - i12);
        }
        long meth_res = Double.doubleToLongBits(d) + l + i12 + i13 + i14 + (b1 ? 1 : 0) + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i16=59735, i17=120, i18=-10374, i19=-40, i20=130, i21=-3, iArr1[]=new int[N];
        byte by=104;
        float f=0.326F;
        long l1=-59488L, lArr[]=new long[N];
        double d3=-35.45301, d4=-1.5983;

        FuzzerUtils.init(lArr, -1L);
        FuzzerUtils.init(iArr1, -139);

        lArr[(i >>> 1) % N] ^= Math.abs((int)(by - (Test.instanceCount + f)));
        iMeth();
        Test.iArrFld[(i >>> 1) % N] = i;
        Test.instanceCount *= i;
        Test.iArrFld = Test.iArrFld;
        Test.instanceCount = i;
        for (i16 = 6; i16 < 122; i16++) {
            i >>= (int)Test.instanceCount;
            Test.iArrFld[i16] = (int)74.556F;
            i17 = (int)Test.instanceCount;
            i17 += (int)l1;
            Test.iArrFld[i16 + 1] *= (int)d3;
            f = i17;
            d4 = 1;
            while (++d4 < 216) {
                i18 = 1;
                while (++i18 < 1) {
                    i17 = (int)Test.instanceCount;
                    lArr[i18 - 1] -= i17;
                    i17 += (((i18 * Test.instanceCount) + i18) - f);
                    l1 += (((i18 * Test.instanceCount) + i16) - i);
                }
                Test.bFld = Test.bFld;
                Test.instanceCount = i16;
                i17 += (64688 + (d4 * d4));
                if (Test.bFld1) {
                    d3 = -50;
                } else {
                    i19 = 1;
                    while ((i19 -= 2) > 0) {
                        try {
                            i17 = (147 / Test.iArrFld[(i >>> 1) % N]);
                            i17 = (i16 / Test.iArrFld[(int)(d4 + 1)]);
                            iArr1[i16 + 1] = (Test.iArrFld[(int)(d4 + 1)] / i18);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.bFld = Test.bFld1;
                    for (i20 = 1; i20 < 1; ++i20) {
                        i21 += (i20 ^ (long)f);
                    }
                }
                i21 = i20;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
