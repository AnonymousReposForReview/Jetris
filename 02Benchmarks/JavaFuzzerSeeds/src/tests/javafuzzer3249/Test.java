package tests.javafuzzer3249;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:35:37 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12268L;
    public int iFld=-250;
    public static int iFld1=-14365;
    public static float fFld=-89.426F;
    public static int iFld2=21966;
    public static byte byFld=-60;
    public static boolean bFld=true;
    public short sFld=16024;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, long l2) {

        int i5=5, i6=-8, iArr[]=new int[N];
        short s=17008;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 31L);
        FuzzerUtils.init(iArr, -171);

        lArr[(Test.iFld1 >>> 1) % N] = Test.instanceCount;
        for (i5 = 12; 229 > i5; i5++) {
            int i7=-14;
            try {
                iArr[i5] = (-15051 / i5);
                i7 = (i6 / Test.iFld1);
                Test.iFld1 = (i5 / -11679);
            } catch (ArithmeticException a_e) {}
            l1 += (long)Test.fFld;
            s = (short)Test.instanceCount;
        }
        vMeth1_check_sum += l1 + l2 + i5 + i6 + s + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, double d1, byte by) {

        int i1=-26194, i2=-90, i3=61, i4=-2, i8=-15030, i9=33, i10=65, iArr1[]=new int[N];
        short s1=30929;
        boolean b=false;

        FuzzerUtils.init(iArr1, 8);

        for (i1 = 17; i1 < 386; ++i1) {
            if (b) {
                for (i3 = 1; i3 < 5; i3++) {
                    vMeth1(Test.instanceCount, -2064597366L);
                    Test.iFld2 = Test.iFld1;
                    Test.iFld2 += i3;
                    Test.instanceCount = i2;
                }
                iArr1[i1] = (int)Test.instanceCount;
                for (i8 = i1; i8 < 5; ++i8) {
                    i9 = s1;
                    i10 = 1;
                    do {
                        Test.instanceCount -= i10;
                        i2 = (int)Test.fFld;
                        i9 = i3;
                        if (b) break;
                    } while (++i10 < 1);
                }
            } else if (b) {
                Test.instanceCount += i1;
            } else {
                i4 = -229;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + by + i1 + i2 + i3 + i4 + i8 + i9
            + s1 + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l) {

        double d2=-36.90403;

        vMeth(d2, d2, Test.byFld);
        long meth_res = l + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=112, i11=-13340, i12=-33363, i13=-9, i14=0, i15=48746, i16=-12451;
        double d3=92.82746;
        float f=-24.508F;
        long l3=25260L;

        iFld = (iFld--);
        i = 349;
        while (--i > 0) {
            iFld >>= (int)(Math.abs(iMeth(50823L)) * 1682258885109448402L);
            Test.byFld += (byte)(i * i);
            iFld = Test.iFld2;
            Test.iFld1 *= (int)d3;
            Test.iArrFld[i] += (int)d3;
            Test.instanceCount = i;
            Test.iFld2 %= (int)8919486705826946865L;
            Test.iFld1 = (int)Test.instanceCount;
            Test.iFld1 = -24664;
            for (i11 = 4; i11 < 72; i11++) {
                i12 *= (int)Test.instanceCount;
            }
        }
        for (i13 = 2; i13 < 169; i13++) {
            Test.iFld1 = Test.iFld2;
            Test.iFld2 *= Test.byFld;
            f = 1;
            do {
                i12 = i11;
                i12 += (int)Test.instanceCount;
                l3 = i;
                for (i15 = 1; i15 < 1; i15++) {
                    byArrFld = FuzzerUtils.byte1array(N, (byte)-22);
                    i16 += (i15 * f);
                    Test.bFld = true;
                    i12 += (((i15 * f) + i) - i16);
                    Test.iArrFld[(int)(f + 1)] = sFld;
                    i12 <<= Test.iFld1;
                }
                if (Test.bFld) {
                    iFld = i14;
                    Test.iArrFld[(int)(f + 1)] -= i15;
                }
            } while (++f < 150);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
