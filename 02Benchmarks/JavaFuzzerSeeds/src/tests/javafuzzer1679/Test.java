package tests.javafuzzer1679;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3154929833L;
    public static boolean bFld=false;
    public static float fFld=0.92F;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -26088L);
        FuzzerUtils.init(Test.fArrFld, 62.618F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, float f) {

        int i3=-17441;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -118.921F);

        fArr[(-38222 >>> 1) % N] -= i3;
        Test.bFld = Test.bFld;
        i3 = (int)l;
        vMeth2_check_sum += l + Float.floatToIntBits(f) + i3 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(int i1, double d1, int i2) {

        float f1=-36.699F;
        int i4=22003, i5=92, i6=8, i7=-64534, i8=-3, i9=-26425, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -10);

        vMeth2(Test.instanceCount, f1);
        for (i4 = 17; i4 < 297; i4++) {
            i1 += i4;
            i1 = i2;
            i5 = i5;
            if (i5 != 0) {
                vMeth1_check_sum += i1 + Double.doubleToLongBits(d1) + i2 + Float.floatToIntBits(f1) + i4 + i5 + i6 +
                    i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
                return;
            }
            for (i6 = 6; i6 > i4; i6--) {
                for (i8 = 1; i8 < 1; i8 += 2) {
                    switch (((-4 >>> 1) % 2) + 116) {
                    case 116:
                        i9 = (int)Test.instanceCount;
                        i7 = (int)Test.instanceCount;
                        break;
                    case 117:
                        iArr[i6][(-127 >>> 1) % N] = (int)Test.instanceCount;
                        iArr[i6][i4] += i7;
                        break;
                    default:
                        i5 += i7;
                    }
                    i1 *= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i1 + Double.doubleToLongBits(d1) + i2 + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 +
            i9 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d) {

        int i10=-24019, i11=-147, i12=-11, i15=46008, i16=-35406, i17=48, iArr1[]=new int[N];
        byte by=-78;
        short s=23089, sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -18572);
        FuzzerUtils.init(sArr, (short)1218);

        vMeth1(i10, d, i10);
        by += (byte)24;
        for (i11 = 6; i11 < 122; ++i11) {
            if (Test.bFld) {
                sArr[i11 - 1] += (short)i11;
                for (i15 = 1; i15 < 13; i15++) {
                    i17 <<= i11;
                    iArr1[i15] = i10;
                    i16 -= i10;
                    Test.instanceCount += (((i15 * Test.instanceCount) + s) - i12);
                    Test.instanceCount += i12;
                    i10 = i10;
                }
            } else {
                if (false) {
                    i12 <<= (int)172L;
                    s >>= (short)Test.instanceCount;
                } else if (Test.bFld) {
                    i16 *= i17;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i10 + by + i11 + i12 + i15 + i16 + i17 + s +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr3) {

        double d2=-76.94469;
        int i18=18322, i19=-4, i20=-207, i21=-6, iArr2[]=new int[N];
        short s1=8189;
        byte by1=58;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(bArr, false);

        vMeth(d2);
        for (i18 = 7; i18 < 347; i18++) {
            i19 = (int)Test.instanceCount;
            i19 >>>= i19;
            i20 = 1;
            while (++i20 < 74) {
                Test.fFld = -13;
                s1 += (short)(((i20 * i20) + i20) - i20);
                i19 += (i20 + Test.instanceCount);
                Test.instanceCount <<= s1;
                iArr2 = iArr2;
                i19 |= (int)Test.instanceCount;
                Test.lArrFld[i20 + 1] *= i18;
                i21 = 1;
                do {
                    Test.fFld += 1421687748L;
                    i19 *= by1;
                    switch (((i21 >>> 1) % 1) + 115) {
                    case 115:
                        by1 ^= (byte)Test.instanceCount;
                        switch (((i20 % 6) * 5) + 29) {
                        case 45:
                            i19 *= i18;
                            i19 |= s1;
                            break;
                        case 41:
                            Test.fArrFld[i21] *= i19;
                            try {
                                i19 = (-43375 / i19);
                                i19 = (iArr2[i20 - 1] / -129);
                                iArr2[i20] = (i18 / 212);
                            } catch (ArithmeticException a_e) {}
                            i19 %= (int)(i18 | 1);
                            i19 += i21;
                        case 39:
                            s1 += (short)(i21 + s1);
                        case 30:
                            i19 += i21;
                            bArr[i18] = Test.bFld;
                            by1 *= (byte)Test.fFld;
                            if (Test.bFld) continue;
                        case 44:
                            Test.fFld *= i20;
                            break;
                        case 51:
                            Test.lArrFld[i18 - 1] >>= i19;
                        }
                        break;
                    }
                } while (++i21 < 1);
            }
        }

    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
