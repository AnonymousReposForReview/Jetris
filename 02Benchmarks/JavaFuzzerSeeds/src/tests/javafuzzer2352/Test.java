package tests.javafuzzer2352;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:06:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=50112478L;
    public static int iFld=-243;
    public static boolean bFld=true;
    public static volatile int iFld1=-9;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(byte by, float f, short s) {

        int i5=156, i6=-12, i7=-13, i8=-26822, i9=-12, i10=6, i11=-217;
        double d=2.120154;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 172L);

        Test.instanceCount >>= 6380;
        i5 -= (int)Test.instanceCount;
        i5 += -5811;
        d = i5;
        for (i6 = 151; i6 > 4; i6--) {
            for (i8 = 1; i8 < 11; ++i8) {
                f = Test.instanceCount;
                i9 = i9;
            }
            lArr[i6 + 1] += Test.instanceCount;
            i5 = (int)f;
            Test.instanceCount = Test.instanceCount;
            for (i10 = i6; i10 < 11; ++i10) {
                i11 |= 230;
                i11 += (i10 - i8);
                d = -21420;
            }
        }
        vMeth1_check_sum += by + Float.floatToIntBits(f) + s + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 +
            i10 + i11 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        byte by1=124;
        float f1=114.565F;
        short s1=-28508;
        int i12=-22869, i13=64792, i14=0, i15=2, i16=-48236, iArr[]=new int[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -138);
        FuzzerUtils.init(lArr1, -3034717051L);

        vMeth1(by1, f1, s1);
        by1 >>= (byte)Test.iFld;
        Test.iFld = Test.iFld;
        iArr[(Test.iFld >>> 1) % N] >>= Test.iFld;
        Test.bFld = false;
        for (i12 = 8; 171 > i12; i12++) {
            i14 = i14;
            lArr1[i12][i12 - 1] = 56402L;
        }
        for (i15 = 12; i15 < 202; ++i15) {
            Test.instanceCount = Test.instanceCount;
            i13 >>= (int)Test.instanceCount;
            Test.bFld = Test.bFld;
        }
        Test.bFld = Test.bFld;
        Test.iFld += i15;
        Test.iFld1 *= (int)Test.instanceCount;
        long meth_res = by1 + Float.floatToIntBits(f1) + s1 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1) {

        int i2=-60973, i3=11, i4=4;
        short s2=-26071;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 70.34126);

        for (i2 = 307; 16 < i2; i2 -= 3) {
            i4 = 1;
            while (++i4 < 16) {
                iMeth();
                s2 += (short)(1 + (i4 * i4));
                Test.iFld %= (int)(Test.instanceCount | 1);
                switch ((i4 % 1) + 104) {
                case 104:
                    Test.iFld1 += (i4 * i4);
                    i3 += i4;
                    try {
                        i1 = (i3 / 1316890102);
                        Test.iArrFld[i2 - 1] = (65338 / i3);
                        Test.iArrFld[i4 + 1] = (i / Test.iFld1);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld = Test.iArrFld;
                    break;
                }
            }
        }
        dArr[(Test.iFld >>> 1) % N] = -12;
        i3 *= 21888;
        for (int i18 : Test.iArrFld) {
            Test.iFld1 |= Test.iFld;
            s2 = (short)Test.iFld;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i19=45844, i20=-29644, i21=-221, i22=71, i23=-44587, i24=13582, i25=-51662;
        byte by2=61;
        float f2=0.987F, f3=0.860F;
        short s3=2414;
        long l1=-2284931819L;
        double d1=1.57669;

        if (Test.bFld) {
            vMeth(Test.iFld, Test.iFld);
        } else if (Test.bFld) {
            if (Test.bFld) {
                for (i19 = 13; i19 < 380; i19 += 2) {
                    Test.instanceCount += (i19 ^ by2);
                    if (Test.bFld) break;
                    Test.iFld = (int)Test.instanceCount;
                    Test.iArrFld[i19 + 1] = i19;
                    Test.instanceCount += (((i19 * i20) + i19) - Test.iFld);
                    Test.iFld += i19;
                    f2 = -80;
                    i21 = 1;
                    do {
                        if (Test.bFld) continue;
                        try {
                            i20 = (i19 / Test.iArrFld[i19]);
                            Test.iFld = (-1509593408 % Test.iArrFld[i19]);
                            Test.iArrFld[(i20 >>> 1) % N] = (i21 / i20);
                        } catch (ArithmeticException a_e) {}
                        Test.iArrFld[i21] -= s3;
                        Test.iArrFld[i21] <<= i20;
                        i20 |= (int)l1;
                    } while ((i21 += 3) < 137);
                }
                for (i22 = 11; i22 < 351; ++i22) {
                    i23 = Test.iFld;
                    f2 -= f2;
                    l1 = Test.iFld1;
                    l1 *= Test.instanceCount;
                    Test.iFld1 += (int)(-7L + (i22 * i22));
                    Test.iFld1 -= (int)Test.instanceCount;
                    for (i24 = 74; i24 > 2; i24 -= 2) {
                        f3 = 1;
                        do {
                            i23 -= Test.iFld1;
                            f2 -= (float)d1;
                            Test.iArrFld[(int)(f3)] *= (int)d1;
                            i25 += -217;
                        } while (++f3 < 3);
                    }
                }
            }
        } else {
            l1 = -8L;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
