package tests.javafuzzer2277;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:17:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-114L;
    public static int iFld=-191;
    public int iFld1=-208;
    public byte byFld=90;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
        FuzzerUtils.init(Test.fArrFld, -1.651F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f=36.590F;

        f = Test.iFld;
        vMeth1_check_sum += Float.floatToIntBits(f);
    }

    public static long lMeth() {

        int i6=-53, i7=-11, i8=35, i9=-202, i10=152, i11=22361;
        double d1=-1.65711;
        float f1=0.110F;

        vMeth1();
        Test.iFld = 33071;
        Test.iFld = 3;
        for (i6 = 8; 218 > i6; i6++) {
            for (i8 = i6; i8 < 8; ++i8) {
                for (i10 = i8; i10 < 1; i10++) {
                    i11 += (i10 | i9);
                    d1 -= Test.instanceCount;
                    Test.instanceCount = i7;
                    Test.instanceCount *= Test.instanceCount;
                    Test.iArrFld[i6] -= i10;
                    if (i9 != 0) {
                    }
                    Test.instanceCount = i11;
                    f1 = i6;
                    Test.iFld = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l) {

        int i=6800, i1=210, i2=37050, i3=-20799, i4=-5, i5=14, i12=10, iArr[]=new int[N];
        double d=-77.49364;
        long l1=494028029L;
        byte by=-70;
        float f2=0.394F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 42977);
        FuzzerUtils.init(sArr, (short)28243);

        i = (int)(Test.instanceCount * (Math.abs(d) + i));
        for (l1 = 6; l1 < 287; ++l1) {
            for (i2 = 1; i2 < 6; i2++) {
                Test.instanceCount -= (Math.min(by ^ i3, Test.instanceCount) - i2);
                i3 <<= (int)Test.instanceCount;
            }
            for (i4 = (int)(l1); 6 > i4; i4++) {
                i5 += (((i4 * by) + Test.instanceCount) - i3);
                iArr[(int)(l1 + 1)] >>= (int)lMeth();
                Test.fArrFld[i4] -= i2;
                switch ((int)(l1 % 2)) {
                case 0:
                case 1:
                    f2 = 213;
                default:
                    i12 = 1;
                    do {
                        by *= (byte)i5;
                    } while ((i12 -= 3) > 0);
                    d += i1;
                    sArr[(int)(l1 + 1)] *= (short)i12;
                }
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + l1 + i1 + i2 + i3 + by + i4 + i5 +
            Float.floatToIntBits(f2) + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        float f3=-47.209F, f4=-86.768F;
        int i13=81, i14=22737, i15=-62960, i16=20501, iArr1[]=new int[N];
        double d2=-42.33120;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-14437);
        FuzzerUtils.init(iArr1, -12797);

        vMeth(10425L);
        b = b;
        Test.iFld = 47375;
        for (f3 = 9; f3 < 156; f3++) {
            i13 += i13;
            for (f4 = 9; f4 < 171; ++f4) {
                d2 = Test.instanceCount;
                for (i15 = 2; i15 > 1; --i15) {
                    iFld1 >>= (int)Test.instanceCount;
                    switch ((int)((f4 % 8) + 113)) {
                    case 113:
                        i16 >>= i14;
                        i13 += i14;
                        break;
                    case 114:
                        i13 += (int)d2;
                        sArr1[i15] = (short)i14;
                        if (true) break;
                        break;
                    case 115:
                        i13 -= i16;
                        try {
                            Test.iFld = (-37 % iFld1);
                            Test.iFld = (Test.iFld / i15);
                            i16 = (i16 / iArr1[i15 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 116:
                        i14 -= i14;
                        Test.instanceCount += (i15 * i16);
                        break;
                    case 117:
                        Test.iArrFld[(int)(f3 + 1)] -= (int)f4;
                        break;
                    case 118:
                        if (b) {
                            Test.instanceCount += Test.instanceCount;
                        } else {
                            d2 = i16;
                        }
                        if (b) continue;
                        iArr1[(int)(f4 - 1)] *= Test.iFld;
                        i16 *= (int)Test.instanceCount;
                    case 119:
                        i16 += i15;
                        byFld *= (byte)d2;
                        Test.instanceCount += (i15 * i15);
                        iFld1 += (int)f4;
                    case 120:
                        Test.iFld *= (int)Test.instanceCount;
                        break;
                    default:
                        if (b) continue;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
