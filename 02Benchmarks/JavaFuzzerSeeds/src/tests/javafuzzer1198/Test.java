package tests.javafuzzer1198;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:22:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=884621460L;
    public static short sFld=1364;
    public boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.99235);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i3) {


        i3 <<= i3;
        i3 >>= i3;
        i3 <<= i3;
        i3 *= (int)-8409552749739002235L;
        i3 -= (int)33L;
        Test.sFld += (short)i3;
        i3 = i3;
        i3 = i3;
        vMeth1_check_sum += Float.floatToIntBits(f1) + i3;
    }

    public static float fMeth(int i1, int i2) {

        float f2=-1.665F;

        vMeth1(f2, i1);
        long meth_res = i1 + i2 + Float.floatToIntBits(f2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(long l) {

        int i4=-111, i5=-50616, i6=-24342;
        float f3=-121.927F;
        boolean b=true;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-8750);
        FuzzerUtils.init(lArr, -6554923162151530901L);

        Test.instanceCount = (long)(-10 * (fMeth(i4, -33457) + i4));
        iArrFld[(i4 >>> 1) % N][(i4 >>> 1) % N] /= (int)-1.921F;
        i4 += i4;
        sArr[(i4 >>> 1) % N] = (short)l;
        i4 = (int)f3;
        if (b) {
            for (i5 = 22; i5 < 385; i5++) {
                i6 -= (int)l;
                i6 *= i6;
                i6 = i5;
                f3 -= Test.instanceCount;
                switch ((i5 % 8) + 45) {
                case 45:
                    Test.instanceCount -= i6;
                    sArr[i5 - 1] = (short)Test.instanceCount;
                    i4 -= (int)f3;
                    break;
                case 46:
                    iArrFld[i5 + 1] = iArrFld[i5 - 1];
                    break;
                case 47:
                    Test.dArrFld[i5] = l;
                case 48:
                    Test.instanceCount += (-12 + (i5 * i5));
                    break;
                case 49:
                    try {
                        i6 = (i4 / -251);
                        iArrFld[i5 - 1][i5 - 1] = (i6 % -42377);
                        i6 = (i4 / i6);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 50:
                    fArrFld[i5] /= (i6 | 1);
                    break;
                case 51:
                    if (true) break;
                    break;
                case 52:
                    i6 = (int)f3;
                }
            }
        } else if (b) {
            i6 += (int)Test.instanceCount;
        }
        vMeth_check_sum += l + i4 + Float.floatToIntBits(f3) + i5 + i6 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=31.494F;
        int i=-2706, i7=-190, i8=53813, i9=4387, i10=-168, iArr[]=new int[N];
        double d=0.94891;

        FuzzerUtils.init(iArr, 83);

        for (f = 11; 276 > f; ++f) {
            switch ((int)((f % 1) + 28)) {
            case 28:
                iArr[(int)(f + 1)] = (int)(d = Test.instanceCount);
                if (bFld) {
                    vMeth(Test.instanceCount);
                } else {
                    i7 = 1;
                    do {
                        float f4=-119.579F;
                        iArrFld[(int)(f + 1)][i7 - 1] &= (int)3234013011L;
                        f4 += (i7 + Test.sFld);
                    } while (++i7 < 95);
                    i += (int)(217L + (f * f));
                    switch ((int)((f % 5) + 114)) {
                    case 114:
                        i += i;
                        break;
                    case 115:
                    case 116:
                    case 117:
                        i >>= i7;
                        if (bFld) continue;
                        i += (int)f;
                        break;
                    case 118:
                        for (i8 = 3; i8 < 95; i8++) {
                            double d1=24.25034;
                            i += (int)d;
                            iArrFld[i8][(int)(f - 1)] = (int)Test.instanceCount;
                            d -= Test.sFld;
                            if (bFld) continue;
                            i10 = 1;
                            while (++i10 < 2) {
                                i += (((i10 * i8) + Test.instanceCount) - Test.instanceCount);
                                i9 *= i9;
                                i9 >>= (int)83L;
                                i9 += (i10 + i10);
                                i += i10;
                            }
                            d = d1;
                            d += 64236L;
                        }
                    }
                    Test.instanceCount *= (long)f;
                }
                iArr[(int)(f + 1)] = i9;
                break;
            }
            Test.instanceCount %= (i9 | 1);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
