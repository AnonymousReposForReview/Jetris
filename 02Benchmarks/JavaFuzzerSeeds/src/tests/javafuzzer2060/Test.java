package tests.javafuzzer2060;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:13:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-59325L;
    public static double dFld=1.100013;
    public static float fFld=2.877F;
    public static short sFld=10400;
    public static volatile byte byFld=109;
    public static int iFld=-36606;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[][]=new long[N][N];
    public static byte byArrFld[]=new byte[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.300F);
        FuzzerUtils.init(Test.iArrFld, -59047);
        FuzzerUtils.init(Test.lArrFld, 252L);
        FuzzerUtils.init(Test.byArrFld, (byte)63);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i4, long l) {

        float f3=0.405F, f4=-1.329F;
        int i5=-6, i6=-44262, i7=41872, i8=-1, i9=-144;
        byte by=64;
        short s1=-21322;
        double d=54.68372;
        boolean b=false;

        try {
            for (f3 = 6; f3 < 144; ++f3) {
                i4 = i4;
                for (i6 = 1; i6 < 11; ++i6) {
                    by -= (byte)-24276;
                    Test.iArrFld[(int)(f3 + 1)] = Test.iArrFld[(int)(f3 - 1)];
                    for (i8 = (int)(f3); i8 < 2; ++i8) {
                        i7 += i6;
                        switch ((i8 % 2) + 127) {
                        case 127:
                        case 128:
                            i4 *= s1;
                            break;
                        }
                        i5 *= (int)d;
                        s1 = (short)16492;
                    }
                }
                Test.iArrFld[(int)(f3)][(int)(f3)] = i9;
                if (b) continue;
                f4 = by;
            }
        }
        catch (NullPointerException exc2) {
            l <<= s1;
        }
        long meth_res = i4 + l + Float.floatToIntBits(f3) + i5 + i6 + i7 + by + i8 + i9 + s1 +
            Double.doubleToLongBits(d) + (b ? 1 : 0) + Float.floatToIntBits(f4);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1() {

        int i3=8;

        i3 = byMeth(i3, Test.instanceCount);
        vMeth1_check_sum += i3;
    }

    public static void vMeth(short s, float f) {

        int i1=-8, i2=30, i10=-235, i11=-27130, iArr[][]=new int[N][N];
        float f1=-72.43F;
        boolean b1=true;

        FuzzerUtils.init(iArr, -175);

        Test.instanceCount <<= iArr[(i1 >>> 1) % N][(i1 >>> 1) % N];
        try {
            for (f1 = 9; f1 < 284; f1++) {
                switch ((int)((f1 % 7) + 8)) {
                case 8:
                    s += (short)f1;
                    break;
                case 9:
                    vMeth1();
                    i2 >>= (int)Test.instanceCount;
                    break;
                case 10:
                    Test.lArrFld = Test.lArrFld;
                    b1 = false;
                    for (i10 = 1; i10 < 6; ++i10) {
                        Test.instanceCount = Test.instanceCount;
                        Test.byArrFld = Test.byArrFld;
                        i2 += i10;
                        Test.instanceCount /= ((long)(Test.dFld) | 1);
                    }
                    Test.instanceCount += (long)(f1 * f1);
                    break;
                case 11:
                    f = Test.instanceCount;
                case 12:
                    Test.instanceCount -= s;
                    break;
                case 13:
                    Test.fArrFld[(int)(f1 + 1)] = i1;
                case 14:
                default:
                    i1 -= i10;
                }
            }
        }
        catch (UserDefinedExceptionTest exc3) {
            i1 = 49037;
        }
        vMeth_check_sum += s + Float.floatToIntBits(f) + i1 + Float.floatToIntBits(f1) + i2 + (b1 ? 1 : 0) + i10 + i11
            + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=8, i12=18, i13=11, i14=213, i15=56, i16=-4;
        long l1=3L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 103.90517);

        switch (((((int)(-7172L >>> (i * Test.instanceCount))) >>> 1) % 9) + 107) {
        case 107:
        case 108:
            vMeth((short)(-31721), Test.fFld);
            i = -56209;
            i += i;
            Test.sFld = Test.byFld;
            break;
        case 109:
            iArrFld1[(58117 >>> 1) % N] -= (int)1.94512;
            i <<= i;
            for (i12 = 394; i12 > 10; i12 -= 3) {
                i /= (int)(i | 1);
                i *= -11;
                switch (((i12 >>> 1) % 4) + 5) {
                case 5:
                    i13 %= -26215;
                    break;
                case 6:
                    Test.lArrFld[(i12 >>> 1) % N][i12] *= i13;
                    for (l1 = i12; l1 < 196; ++l1) {
                        i14 = (int)l1;
                        dArr[i12] -= 2.730F;
                        for (i15 = 1; i15 < 1; ++i15) {
                            if (true) continue;
                            Test.lArrFld[i15 + 1] = Test.lArrFld[i12 - 1];
                            switch (((i12 >>> 1) % 8) + 114) {
                            case 114:
                                iArrFld1[i12 + 1] = i14;
                            case 115:
                                Test.fFld *= i13;
                                break;
                            case 116:
                                Test.instanceCount += (i15 ^ i12);
                                break;
                            case 117:
                                i16 += (i15 * i15);
                                break;
                            case 118:
                                Test.iArrFld[i12][(int)(l1 - 1)] *= i13;
                                i14 = i13;
                                Test.byArrFld[(int)(l1 + 1)] -= (byte)i15;
                                i = (int)Test.instanceCount;
                            case 119:
                                i += i12;
                                break;
                            case 120:
                                i14 += (int)14L;
                                break;
                            case 121:
                                try {
                                    i14 = (114 / Test.iFld);
                                    Test.iArrFld[(int)(l1 - 1)][i15 + 1] = (i15 % 1753388692);
                                    iArrFld1[i12 - 1] = (i14 % Test.iArrFld[(int)(l1 + 1)][i15]);
                                } catch (ArithmeticException a_e) {}
                                break;
                            default:
                                Test.iFld += (i15 - i);
                            }
                        }
                    }
                    break;
                case 7:
                    i = (int)l1;
                    break;
                case 8:
                    Test.dFld *= Test.byFld;
                default:
                    iArrFld1[i12] = (int)Test.instanceCount;
                }
            }
            break;
        case 110:
            iArrFld1[(i14 >>> 1) % N] -= (int)Test.dFld;
            break;
        case 111:
            i += i13;
        case 112:
            Test.iArrFld[(i13 >>> 1) % N][(-242 >>> 1) % N] *= (int)Test.fFld;
            break;
        case 113:
            iArrFld1[(i12 >>> 1) % N] = (int)-4018395477L;
        case 114:
            Test.iFld += -6;
            break;
        case 115:
            Test.lArrFld[(-6 >>> 1) % N] = Test.lArrFld[(i >>> 1) % N];
        default:
            Test.iArrFld[(i16 >>> 1) % N][(i16 >>> 1) % N] = (int)l1;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
