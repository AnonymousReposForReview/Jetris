package tests.javafuzzer1358;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:39:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=245L;
    public short sFld=-13459;
    public static double dFld=55.1376;
    public static float fFld=-58.600F;
    public static boolean bFld=false;
    public static byte byFld=-113;
    public volatile int iFld=58213;
    public float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 21709);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4, long l) {

        float f=-108.987F, f1=1.244F;
        int i5=4, i6=93, i7=0, i8=-52768, i9=-4, i10=215, iArr[]=new int[N];
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -59398L);
        FuzzerUtils.init(iArr, -26658);

        lArr[(i4 >>> 1) % N] -= i4;
        Test.dFld -= f;
        for (i5 = 5; i5 < 225; i5 += 2) {
            Test.instanceCount -= i3;
            if (b) continue;
            for (i7 = 14; i7 > 1; --i7) {
                f += -17969;
                for (i9 = 1; i9 < 2; i9++) {
                    if (b) break;
                }
                f1 = 1;
                do {
                    i3 -= 65;
                    iArr[i7 + 1] += i3;
                    i8 -= (int)Test.dFld;
                    i10 += (int)f1;
                    f += (f1 * i6);
                } while (++f1 < 2);
            }
        }
        vMeth_check_sum += i3 + i4 + l + Float.floatToIntBits(f) + i5 + i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i2) {

        int i11=-9992, i12=-10;
        byte by=-24;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 23.978F);

        vMeth(i2, -8, Test.instanceCount);
        i11 = 1;
        while (++i11 < 352) {
            i12 = 5;
            while (--i12 > 0) {
                i2 += (int)Test.instanceCount;
                i2 -= i11;
                by = (byte)i12;
                i2 >>= (int)Test.instanceCount;
                Test.instanceCount *= i2;
                i2 = i2;
            }
            fArr = fArr;
            Test.fFld += Test.instanceCount;
            i2 += (int)(-46012L + (i11 * i11));
            if (Test.bFld) break;
            i2 -= (int)111L;
        }
        i2 |= i11;
        long meth_res = i2 + i11 + i12 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-63951, i13=-2, i14=0, i15=31149, i16=10, i17=-215;
        short s=-26005;

        i1 -= iMeth1(i1);
        s += (short)i1;
        for (i13 = 11; i13 < 292; i13++) {
            i14 += (((i13 * i13) + Test.byFld) - i14);
            try {
                Test.iArrFld[i13] = (i1 % 64065);
                i14 = (i14 / i14);
                i14 = (i1 % Test.iArrFld[i13]);
            } catch (ArithmeticException a_e) {}
            i15 = 1;
            while (++i15 < 6) {
                for (i16 = 1; i16 < 1; ++i16) {
                    i17 = i17;
                    switch (((i13 % 3) * 5) + 4) {
                    case 10:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    case 5:
                        i1 = s;
                        i17 = i17;
                        Test.instanceCount += i16;
                        i1 &= i1;
                        break;
                    case 11:
                        i1 *= (int)Test.fFld;
                        break;
                    }
                }
            }
        }
        long meth_res = i1 + s + i13 + i14 + i15 + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i18=-42879, i19=-186, i20=-112, i21=-36851, i22=40523, i23=-23573, i24=3, i25=-30424, i26=18914,
            i27=70, i28=8, i29=185, i30=30272, i31=-8, i32=-81;
        long l2=-61L;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-22871);

        Test.instanceCount += sFld;
        i -= (int)(fArrFld[(i >>> 1) % N] = (iMeth() - i));
        Test.iArrFld[(i >>> 1) % N] = 14449;
        i = 238;
        for (l2 = 7; l2 < 264; l2++) {
            if (Test.bFld) continue;
            for (i19 = 2; i19 < 98; i19++) {
                Test.fFld = (float)Test.dFld;
            }
            for (i21 = (int)(l2); i21 < 98; i21++) {
                Test.instanceCount = Test.instanceCount;
                i20 = i18;
                i += (int)1.152F;
                try {
                    i = (i22 / 28531);
                    i = (i22 % 27218);
                    i = (i19 % 1993639676);
                } catch (ArithmeticException a_e) {}
                Test.fFld = (float)Test.dFld;
            }
        }
        i23 = 1;
        while (++i23 < 154) {
            sArr = sArr;
            try {
                i24 = (i21 / i24);
                Test.iArrFld[i23 - 1] = (i23 / Test.iArrFld[i23 - 1]);
                iFld = (i23 % iFld);
            } catch (ArithmeticException a_e) {}
            for (i25 = 2; i25 < 163; i25++) {
                for (i27 = i25; i27 < 2; ++i27) {
                    i22 += (i27 * l2);
                }
                i26 >>= i21;
                for (i29 = i25; i29 < 2; ++i29) {
                    Test.instanceCount = (long)-2.670F;
                    i *= i19;
                    i26 += (((i29 * Test.instanceCount) + l2) - i25);
                }
                Test.iArrFld[i23] -= i18;
                for (i31 = 1; i31 < 2; ++i31) {
                    Test.iArrFld = Test.iArrFld;
                    Test.fFld -= i26;
                    Test.instanceCount += i31;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
