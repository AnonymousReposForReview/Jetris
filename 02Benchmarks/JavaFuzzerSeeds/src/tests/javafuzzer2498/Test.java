package tests.javafuzzer2498;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:26:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5317383018754201276L;
    public static float fFld=0.613F;
    public static volatile int iFld=-6;
    public static int iFld1=-49;
    public static short sFld=31385;
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 117.926F);
        FuzzerUtils.init(Test.iArrFld, 2033);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i8) {

        int i9=63, i10=-11, iArr1[]=new int[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -47.38815);
        FuzzerUtils.init(iArr1, 1);

        Test.iArrFld[(Test.iFld >>> 1) % N][(i8 >>> 1) % N] = (int)Test.instanceCount;
        for (i9 = 9; i9 < 217; ++i9) {
            int i11=-5;
            dArr[i9][i9] -= 20253;
            Test.iArrFld[i9][i9 - 1] *= (int)Test.instanceCount;
            i10 -= -71;
            Test.fFld *= i10;
            i10 <<= (int)Test.instanceCount;
            Test.iFld1 *= 240;
            Test.iFld += (i9 * i9);
            i11 += (i9 | Test.iFld1);
            iArr1[i9] = i8;
        }
        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = i8;
        iArr1[(i10 >>> 1) % N] = i9;
        Test.instanceCount *= Test.iFld1;
        i10 >>>= Test.sFld;
        vMeth1_check_sum += Float.floatToIntBits(f) + i8 + i9 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(int i4, int i5) {

        int i6=0, i7=0, i12=-11, i13=15012, iArr2[][]=new int[N][N];
        boolean b1=true;
        double d=81.41741;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr, 109L);
        FuzzerUtils.init(byArr, (byte)105);
        FuzzerUtils.init(iArr2, -2353);
        FuzzerUtils.init(fArr, -17.731F);

        Test.instanceCount = (((Test.iFld++) - (Test.iFld - Test.instanceCount)) + Test.iFld1);
        for (i6 = 3; i6 < 278; i6++) {
            Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
            lArr[i6] <<= (++Test.iFld);
            vMeth1(Test.fFld, 47145);
            b1 = b1;
            Test.iFld1 *= i7;
            Test.iArrFld[i6] = iArr2[i6 - 1];
            switch ((((Test.iFld >>> 1) % 1) * 5) + 27) {
            case 31:
                Test.iFld1 <<= i5;
                break;
            }
            i5 >>>= Test.iFld;
        }
        for (i12 = 168; 2 < i12; --i12) {
            Test.instanceCount = -63;
            d += Test.instanceCount;
            fArr = FuzzerUtils.float2array(N, (float)0.779F);
        }
        long meth_res = i4 + i5 + i6 + i7 + (b1 ? 1 : 0) + i12 + i13 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i) {

        int i1=42, i2=5, i3=134, i14=-77, i15=0, i16=-96, iArr[]=new int[N];
        boolean b=false;
        float f1=0.164F;

        FuzzerUtils.init(iArr, -8);

        i1 = 147;
        while (--i1 > 0) {
            switch ((i1 % 5) + 4) {
            case 4:
                i = (int)(((Test.instanceCount++) + (iArr[i1 - 1]--)) - (-Math.abs(Test.fFld)));
                for (i2 = 11; i2 > 1; i2 -= 3) {
                    iArr[i2] -= (int)(Test.fArrFld[i2 - 1]--);
                    Test.instanceCount -= (Test.iFld++);
                }
                b = bMeth(Test.iFld, Test.iFld);
                break;
            case 5:
                for (f1 = 1; f1 < 11; ++f1) {
                    switch ((int)(((f1 % 2) * 5) + 119)) {
                    case 124:
                        Test.instanceCount += i;
                        for (i15 = 1; i15 < 2; ++i15) {
                            Test.iFld &= i14;
                            Test.instanceCount = i3;
                            i = i16;
                            Test.fArrFld[i15 + 1] = -9;
                        }
                    case 127:
                        Test.fFld += (f1 * f1);
                        break;
                    default:
                        i16 = i2;
                    }
                }
                break;
            case 6:
                i3 += i1;
                break;
            case 7:
                i16 <<= i1;
                break;
            case 8:
                i14 += (int)(2L + (i1 * i1));
                break;
            default:
                Test.instanceCount >>= i15;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=254, i18=116, i19=7, i20=-8128, i21=9, i22=10, i23=-41;
        boolean b2=true, bArr[]=new boolean[N];
        double d1=-1.49513, d2=-19.53724;
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, 14072L);

        vMeth(Test.iFld1);
        for (i17 = 1; i17 < 213; ++i17) {
            i19 += (i17 ^ Test.instanceCount);
            Test.iFld = i18;
            for (i20 = 6; i20 < 118; i20++) {
                i19 *= i21;
                Test.fFld -= i19;
                Test.iFld = i21;
                Test.iFld = -15514;
                bArr[i17 - 1] = b2;
                if (b2) {
                    for (i22 = 1; i22 < 2; i22++) {
                        Test.iArrFld[i17][i17] = i19;
                        Test.instanceCount += (i22 * i19);
                    }
                    d1 = 1;
                    do {
                        i21 <<= Test.iFld;
                        switch (((i20 >>> 1) % 1) + 98) {
                        case 98:
                            Test.instanceCount += (long)d1;
                            if (b2) break;
                        default:
                            b2 = b2;
                            d2 = Test.sFld;
                            switch (((-8 >>> 1) % 7) + 84) {
                            case 84:
                                lArr1[i20 - 1] += Test.instanceCount;
                                Test.iFld = i20;
                                break;
                            case 85:
                            case 86:
                            case 87:
                                Test.fFld -= Test.instanceCount;
                                Test.instanceCount = 13177;
                                break;
                            case 88:
                                lArr1[i17 - 1] = i18;
                                break;
                            case 89:
                                i19 += (102 + (d1 * d1));
                                Test.iArrFld = FuzzerUtils.int2array(N, (int)28952);
                                Test.iArrFld[i17][i17] -= (int)723164676L;
                                break;
                            case 90:
                                Test.iArrFld[(int)(d1)][i20 + 1] <<= Test.iFld;
                                break;
                            default:
                                Test.iFld += (int)(((d1 * i17) + i23) - i20);
                            }
                        }
                    } while (++d1 < 2);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
