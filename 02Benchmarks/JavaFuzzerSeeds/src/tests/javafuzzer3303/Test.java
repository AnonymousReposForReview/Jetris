package tests.javafuzzer3303;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:46:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=29759L;
    public static volatile int iFld=-214;
    public volatile float fFld=-2.333F;
    public short sFld=4612;
    public static boolean bFld=true;
    public static volatile float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.409F);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        double d=114.49124, dArr[]=new double[N];
        int i7=-44101, i8=-3, i9=169, i10=-6, i11=-12;
        float f=0.405F, fArr[]=new float[N];
        short s=24793;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 752409496443124450L);
        FuzzerUtils.init(fArr, 107.266F);
        FuzzerUtils.init(dArr, -2.22591);

        for (d = 13; d < 273; d++) {
            f /= (Test.instanceCount | 1);
        }
        Test.instanceCount = i7;
        Test.instanceCount = Test.instanceCount;
        for (i8 = 10; 303 > i8; i8++) {
            lArr1 = lArr1;
            for (i10 = 1; 6 > i10; i10++) {
                s += (short)i10;
                Test.instanceCount -= Test.instanceCount;
                Test.instanceCount += i6;
                i6 = (int)d;
                fArr = fArr;
                i6 += (-192 + (i10 * i10));
            }
            dArr[i8] = i10;
            i9 = (int)-51L;
        }
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d) + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + s +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static double dMeth() {


        vMeth1(Test.iFld);
        long meth_res = 0;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=22320, i3=-20581, i4=-135, i5=54267, i12=189, i13=249;
        long l=-1057012661L, lArr[]=new long[N];
        double d1=2.11672;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -2775006779L);
        FuzzerUtils.init(bArr, false);

        if (b) {
            lArr[(50708 >>> 1) % N] = (i2--);
            for (i3 = 3; i3 < 144; ++i3) {
                Test.instanceCount += i3;
                i2 += (i3 * i3);
                i5 = 1;
                do {
                    i += (int)dMeth();
                    Test.iFld += i5;
                    for (i12 = i3; i12 < 1; i12++) {
                        switch ((((i13 >>> 1) % 4) * 5) + 61) {
                        case 67:
                            i1 += i12;
                            break;
                        case 77:
                            l = l;
                        case 79:
                            i2 -= (int)d1;
                            i = (int)l;
                            b = b;
                            break;
                        case 66:
                            bArr = bArr;
                            break;
                        }
                    }
                } while (++i5 < 11);
            }
        } else if (b) {
            i1 = (int)l;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i12 + i13 + l + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=39303, i15=-169, i16=1, i17=-78, i18=-113, i19=0, i20=5, i21=0;
        double d2=-1.87954, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.25515);

        vMeth(Test.iFld, Test.iFld);
        for (i14 = 16; i14 < 371; ++i14) {
            fFld -= Test.instanceCount;
            if (false) break;
            Test.fArrFld[i14 - 1] -= Test.instanceCount;
            Test.iFld += (int)(0.823F + (i14 * i14));
            for (i16 = 2; i16 < 71; ++i16) {
                d2 += i17;
                d2 = fFld;
                d2 = i15;
                i17 *= i15;
                dArr1[i14] *= sFld;
                i15 = (int)Test.instanceCount;
            }
            Test.iFld /= (int)-8L;
            i15 += (i14 * i14);
            for (i18 = 3; i18 < 71; i18++) {
                lArrFld[i14] |= i18;
                for (i20 = 2; i20 > 1; i20--) {
                    switch ((i18 % 2) + 126) {
                    case 126:
                        i19 >>= i20;
                        iArrFld[i18 - 1] *= (int)d2;
                    case 127:
                        Test.iFld -= (int)-3801870154L;
                        break;
                    }
                    switch ((i18 % 2) + 108) {
                    case 108:
                        i19 += i14;
                        if (Test.bFld) break;
                    case 109:
                        i21 += sFld;
                        break;
                    }
                    Test.instanceCount *= (long)d2;
                    Test.bFld = Test.bFld;
                    Test.iFld >>= i15;
                    if (Test.bFld) break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
