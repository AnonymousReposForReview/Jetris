package tests.javafuzzer406;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:17:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3707090107086668918L;
    public int iFld=203;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 36217L);
        FuzzerUtils.init(Test.sArrFld, (short)23991);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i10, boolean b1) {

        byte by1=-100;
        short s=1392;
        int i11=-185, i12=10, i13=-70, i14=-10, iArr2[]=new int[N];
        double d=-13.28245;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 29686);
        FuzzerUtils.init(fArr, -51.412F);

        iArr2[(i10 >>> 1) % N] = i10;
        Test.instanceCount = Test.instanceCount;
        i10 *= by1;
        Test.instanceCount |= i10;
        s *= (short)i10;
        fArr[(i10 >>> 1) % N] *= i10;
        for (i11 = 16; i11 < 382; i11++) {
            for (i13 = 5; i13 > 1; --i13) {
                i12 <<= i11;
                if (false) continue;
                i14 = -8;
                iArr2[i13] *= (int)d;
                i14 += (i13 - Test.instanceCount);
                Test.instanceCount >>>= -93;
                if (false) break;
            }
        }
        long meth_res = i10 + (b1 ? 1 : 0) + by1 + s + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(int i3, int i4, int i5) {

        int i6=0, i7=-28119, i8=0, i9=-50224, i15=-18014, i16=37491, iArr1[]=new int[N];
        boolean b2=true;
        short s1=-20274;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(fArr1, 45.135F);

        for (i6 = 9; 260 > i6; i6++) {
            for (i8 = 1; i8 < 6; ++i8) {
                iArr1[i8] *= (int)((-(7 - i6)) + fMeth(i9, b2));
                for (i15 = 1; i15 < 2; ++i15) {
                    try {
                        i9 = (-1498250032 % i8);
                        i16 = (iArr1[i6] % iArr1[i15 - 1]);
                        iArr1[i15 + 1] = (i9 / -227);
                    } catch (ArithmeticException a_e) {}
                    fArr1[i15 - 1] *= 81L;
                    i9 = (int)-52176L;
                }
                iArr1[i8 - 1] <<= (int)2886296139903674306L;
                s1 = (short)-21561L;
                i16 += i8;
                if (false) break;
                iArr1[i6 - 1] >>= (int)Test.instanceCount;
                if (i9 != 0) {
                }
                iArr1[i6 - 1] -= (int)Test.instanceCount;
            }
            fArr1[i6] -= Test.instanceCount;
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b2 ? 1 : 0) + i15 + i16 + s1 + FuzzerUtils.checkSum(iArr1)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i) {

        int i1=4, i2=-34, i17=-69, i18=9, iArr[]=new int[N];
        boolean b=true;
        byte by=97;
        float fArr2[]=new float[N];

        FuzzerUtils.init(iArr, -126);
        FuzzerUtils.init(fArr2, -93.1012F);

        for (i1 = 7; i1 < 260; i1++) {
            b = b;
            iArr[i1] >>= -23174;
            switch ((i1 % 2) + 73) {
            case 73:
                i2 |= i;
                i = (int)Long.reverseBytes(Math.abs(++Test.instanceCount));
            case 74:
                by = (byte)((Test.lArrFld[i1 + 1]++) + lMeth(i2, i, -29398));
                break;
            default:
                Test.sArrFld[i1] = (short)-10;
            }
            for (i17 = 1; i17 < 6; ++i17) {
                Test.instanceCount = Test.instanceCount;
                i -= i1;
                i18 *= (int)-1.32349;
            }
            i += i1;
            fArr2[i1 - 1] = i2;
            i = 3;
        }
        vMeth_check_sum += i + i1 + i2 + (b ? 1 : 0) + by + i17 + i18 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public void mainTest(String[] strArr1) {

        int i19=30, i20=-116, i21=-17, i22=-207, i23=48, i24=0, i25=111;
        short s2=14987;
        float f=-28.288F;

        vMeth(iFld);
        for (i19 = 7; i19 < 131; i19++) {
            iFld += (int)Test.instanceCount;
            i20 = (int)Test.instanceCount;
            s2 += (short)(((i19 * f) + i19) - i19);
            Test.instanceCount = iFld;
            i20 ^= (int)Test.instanceCount;
            i20 = iFld;
        }
        for (i21 = 12; i21 < 264; i21 += 3) {
            i20 *= i21;
        }
        i22 -= i23;
        i23 >>= i19;
        for (i24 = 358; i24 > 16; --i24) {
            byte by2=-21;
            i20 += i23;
            if (Test.bFld) {
                Test.instanceCount >>>= 0;
                i20 = i21;
                i22 *= 8479;
            } else {
                Test.instanceCount += (i24 - s2);
                iFld += (149 + (i24 * i24));
                by2 = (byte)-37552;
            }
            f += (i24 * i24);
            i25 *= i23;
            f += -7141L;
            by2 -= (byte)Test.instanceCount;
            f += (i24 * i24);
            if (Test.bFld) break;
            if (Test.bFld) continue;
            f += f;
        }
        iFld += 14;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
