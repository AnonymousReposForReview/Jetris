package tests.javafuzzer2526;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:13:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26171L;
    public static boolean bFld=false;
    public static float fFld=81.423F;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 27980);
        FuzzerUtils.init(Test.byArrFld, (byte)-114);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, short s1, boolean b) {

        double d=-2.77621;
        float f=64.322F;
        int i3=-1, i4=247;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7647188285466620906L);

        d = i2;
        b = b;
        f *= Test.instanceCount;
        i3 = 315;
        do {
            i2 = (int)f;
            Test.instanceCount -= (long)f;
            try {
                i2 = (i2 % i3);
                i2 = (23 / Test.iArrFld[i3]);
                Test.iArrFld[(i2 >>> 1) % N] = (1613497750 / i3);
            } catch (ArithmeticException a_e) {}
            i4 = 1;
            do {
                s1 += (short)(((i4 * f) + i4) - i2);
                Test.instanceCount = i4;
                Test.instanceCount += (i4 | i2);
                lArr1[i4] = 50;
            } while (++i4 < 5);
            s1 = (short)f;
            f = Test.instanceCount;
            i2 -= i2;
        } while (--i3 > 0);
        long meth_res = i2 + s1 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i3 + i4 +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, long l, short s) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.958F);

        Test.instanceCount -= lMeth(i1, s, Test.bFld);
        fArr[(i1 >>> 1) % N] = 2;
        long meth_res = i1 + l + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        short s2=17795;
        int i5=7721, i6=-49998, i7=158, i8=79, i9=52002, i10=237;
        byte by=-116;
        float f1=58.826F, fArr1[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3187215302L);
        FuzzerUtils.init(fArr1, 16.213F);

        Test.instanceCount = (++lArr[(i >>> 1) % N]);
        Test.instanceCount += iMeth(i, Test.instanceCount, s2);
        i5 = 1;
        while (++i5 < 169) {
            switch (((i5 >>> 1) % 1) + 94) {
            case 94:
                i += (int)Test.instanceCount;
                for (i6 = i5; i6 < 9; ++i6) {
                    Test.fFld = i7;
                }
                for (i8 = 1; i8 < 9; ++i8) {
                    Test.fFld -= Test.instanceCount;
                    Test.fFld += by;
                    for (f1 = 1; 2 > f1; ++f1) {
                        i10 &= 8;
                        fArr1[i5][i5] = 9;
                        i9 = (int)Test.instanceCount;
                        Test.fFld += 30926L;
                    }
                }
                break;
            }
        }
        vMeth_check_sum += i + s2 + i5 + i6 + i7 + i8 + i9 + by + Float.floatToIntBits(f1) + i10 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i11=11510, i12=6, i13=-8, i14=-50039, i15=10, i16=205;
        double d1=5.72315, d2=-123.130311;
        short s3=-14109;
        float fArr2[][]=new float[N][N];

        FuzzerUtils.init(fArr2, 0.460F);

        vMeth(30373);
        i11 *= i11;
        for (i12 = 17; i12 < 300; i12++) {
            switch (((i11 >>> 1) % 8) + 34) {
            case 34:
                for (i14 = 4; i14 < 89; i14++) {
                    i13 -= i12;
                    for (d1 = i14; d1 < 2; d1++) {
                        Test.fFld += i11;
                        switch ((i14 % 9) + 80) {
                        case 80:
                            i13 += (int)(((d1 * i15) + i12) - i14);
                            i15 = (int)178L;
                            i11 |= (int)Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 81:
                            i13 += (int)d1;
                            i11 = 16892;
                            i15 = (int)d1;
                            i16 = i15;
                            break;
                        case 82:
                        case 83:
                            i11 += (int)(((d1 * s3) + i11) - i14);
                            Test.bFld = Test.bFld;
                            switch ((int)(((d1 % 9) * 5) + 110)) {
                            case 136:
                                i16 <<= -49528;
                                break;
                            case 144:
                                Test.instanceCount += (long)(-83.338F + (d1 * d1));
                                Test.instanceCount += i13;
                                Test.instanceCount *= -117;
                                break;
                            case 118:
                                Test.iArrFld = FuzzerUtils.int1array(N, (int)57817);
                                break;
                            case 150:
                                Test.iArrFld[i14 + 1] += -19059;
                                break;
                            case 138:
                                switch ((int)((d1 % 5) + 53)) {
                                case 53:
                                case 54:
                                    try {
                                        Test.iArrFld[i12 + 1] = (60438 % i13);
                                        i16 = (i15 / i11);
                                        i11 = (i11 / -231);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 55:
                                    d2 = Test.fFld;
                                    i15 += (int)d1;
                                    break;
                                case 56:
                                    Test.bFld = Test.bFld;
                                case 57:
                                    Test.instanceCount += -54775;
                                    break;
                                default:
                                    Test.fFld += i15;
                                }
                            case 116:
                                s3 -= (short)i11;
                                break;
                            case 112:
                                s3 *= (short)i15;
                                break;
                            case 142:
                                i13 += (int)(d1 - i11);
                            case 148:
                                fArr2[(int)(d1 - 1)][(int)(d1 - 1)] -= 13;
                                break;
                            default:
                                i16 -= i12;
                            }
                            break;
                        case 84:
                            i13 += -110;
                            break;
                        case 85:
                            s3 += (short)i13;
                            break;
                        case 86:
                        case 87:
                        case 88:
                            i11 = i16;
                            break;
                        }
                    }
                }
                break;
            case 35:
                i11 = i13;
                break;
            case 36:
                i16 += (((i12 * Test.fFld) + i16) - Test.instanceCount);
                break;
            case 37:
                i15 += (i12 | i14);
                break;
            case 38:
                Test.instanceCount <<= i11;
            case 39:
                i13 += i12;
            case 40:
                Test.byArrFld[i12] = (byte)i11;
                break;
            case 41:
                Test.iArrFld[i12 - 1] += i14;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
