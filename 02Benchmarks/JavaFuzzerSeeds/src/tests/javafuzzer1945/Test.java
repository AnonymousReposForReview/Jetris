package tests.javafuzzer1945;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:19:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3975354714L;
    public static volatile boolean bFld=false;
    public static float fFld=0.964F;
    public static volatile int iFld=-224;
    public static byte byFld=-16;
    public int iFld1=-88;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 49L);
        FuzzerUtils.init(Test.iArrFld, 23666);
    }

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {

        int i4=6, i5=246, i6=13, i7=-128, i8=-5, i9=137, iArr[][]=new int[N][N];
        double d=-14.59249;
        boolean b=true;
        float f=-1.207F, f1=0.828F;

        FuzzerUtils.init(iArr, -5153);

        iArr[(54 >>> 1) % N][(i3 >>> 1) % N] *= i3;
        i3 -= i3;
        i3 = i3;
        for (i4 = 22; i4 < 381; ++i4) {
            for (i6 = 1; i6 < 5; i6++) {
                d = Test.instanceCount;
                for (i8 = 1; i8 < 2; i8++) {
                    i5 += i3;
                    i5 = -140;
                    i5 &= 27552;
                    b = b;
                }
                f += (((i6 * Test.instanceCount) + i6) - f1);
                i9 &= -7;
                i7 -= (int)Test.instanceCount;
                f1 = i9;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + (b ? 1 : 0) +
            Float.floatToIntBits(f) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, byte by) {

        short s=-4982;
        int i10=11, i11=45452, i12=-10, i13=8727;
        double d1=-70.92091;

        i2 += (int)(iMeth(i2) - Test.instanceCount);
        s = (short)i2;
        i10 = 1;
        while (++i10 < 217) {
            if (Test.bFld) break;
            Test.lArrFld[i10 - 1] -= (long)Test.fFld;
            i2 += (129 + (i10 * i10));
        }
        Test.iArrFld[(i2 >>> 1) % N] = (int)d1;
        i2 = by;
        for (i11 = 5; i11 < 236; i11++) {
            Test.instanceCount += (i11 * Test.fFld);
            try {
                i13 = (-16436 % i11);
                Test.iArrFld[i11 - 1] = (i12 % i10);
                i13 = (i12 / i12);
            } catch (ArithmeticException a_e) {}
            Test.fFld += -43846;
            if (false) {
                i2 &= i11;
                i12 = (int)-82L;
            } else {
                Test.instanceCount += (((i11 * Test.iFld) + i2) - i12);
            }
        }
        vMeth_check_sum += i2 + by + s + i10 + Double.doubleToLongBits(d1) + i11 + i12 + i13;
    }

    public static byte byMeth(int i) {

        int i1=-9, i14=-37535, i15=177, i16=-60375, i17=-63940;
        byte by1=17;
        long l=-4506019199443371989L;

        i1 = 149;
        while ((i1 -= 2) > 0) {
            vMeth(Test.iFld, by1);
        }
        i <<= -125;
        i = (int)-10L;
        i14 = 1;
        do {
            for (i15 = 17; i15 > 1; --i15) {
                Test.instanceCount += (i15 - i16);
                if (Test.bFld) {
                    if (Test.bFld) {
                        Test.instanceCount = i14;
                        if (false) break;
                    } else if (true) {
                        for (l = 1; l < 2; l++) {
                            i17 += (int)(((l * i1) + i16) - i16);
                            i17 += (int)l;
                            Test.instanceCount &= i17;
                        }
                    } else if (Test.bFld) {
                        Test.instanceCount -= i14;
                    } else {
                        i += i1;
                    }
                } else if (Test.bFld) {
                    i17 = (int)Test.instanceCount;
                } else {
                    i16 += 208;
                }
            }
        } while ((i14 += 3) < 273);
        long meth_res = i + i1 + by1 + i14 + i15 + i16 + l + i17;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-59, i19=-114, i20=8, i22=13, i23=135, i24=13, i25=2;
        float f2=4.866F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 83.118F);

        byMeth(Test.iFld);
        i18 = 1;
        while (++i18 < 183) {
            Test.iFld += (i18 ^ Test.instanceCount);
            Test.iFld -= Test.iFld;
            Test.instanceCount += (long)Test.fFld;
            Test.lArrFld = FuzzerUtils.long1array(N, (long)24347L);
            for (i19 = 4; i19 < 137; ++i19) {
                short s1=31936;
                int i21=190;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)51);
                Test.iFld ^= s1;
                i21 += (((i19 * Test.iFld) + Test.fFld) - i18);
                Test.instanceCount += (long)1.68841;
                i21 >>>= i21;
                for (i22 = 1; i22 < 2; i22++) {
                    i20 -= (int)Test.instanceCount;
                    Test.iFld = 3;
                    Test.fFld += (((i22 * Test.byFld) + i23) - Test.instanceCount);
                    Test.iFld <<= -7224;
                }
                for (i24 = i18; i24 < 2; i24 += 2) {
                    Test.iArrFld[i19 + 1] = (int)Test.instanceCount;
                    i25 += (((i24 * i25) + i24) - Test.instanceCount);
                    i25 = i20;
                }
                Test.iFld -= i20;
                switch ((((iFld1 >>> 1) % 2) * 5) + 113) {
                case 114:
                    Test.iArrFld[i19 - 1] = i23;
                    fArr[i18] += i23;
                    break;
                case 116:
                    if (Test.bFld) {
                        i25 += (i19 + i23);
                        try {
                            i25 = (-6982 % i18);
                            i21 = (i19 / 6064);
                            i20 = (Test.iFld / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                    } else if (Test.bFld) {
                        iFld1 += (int)Test.instanceCount;
                        f2 = Test.iFld;
                    }
                    break;
                default:
                    Test.iArrFld[i19 + 1] <<= i24;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
