package tests.javafuzzer3482;

import utils.FuzzerUtils;

// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 09:15:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static int iFld=-29240;
    public volatile byte byFld=-8;
    public float fFld=15.571F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 203L);
        FuzzerUtils.init(Test.iArrFld, -250);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, int i5) {

        int i6=11381, iArr[]=new int[N], iArr1[]=new int[N];
        float f1=0.1017F;
        boolean b1=true;

        FuzzerUtils.init(iArr, -44291);
        FuzzerUtils.init(iArr1, -26441);

        i4 >>>= i5;
        for (long l1 : Test.lArrFld) {
            i4 &= (int)l1;
            l1 = Test.instanceCount;
        }
        i4 = (int)-89.798F;
        i4 <<= i5;
        i6 = 309;
        while ((i6 -= 2) > 0) {
            switch ((i6 % 2) + 98) {
            case 98:
                iArr[i6 + 1] = i6;
                iArr1[i6] += (int)f1;
                b1 = b1;
                break;
            case 99:
            default:
                i4 = i5;
            }
            i5 += i4;
            Test.lArrFld[i6] /= 8098948051267333908L;
            if (i6 != 0) {
            }
        }
        long meth_res = i4 + i5 + i6 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, long l) {

        int i3=6, i7=-149, i8=4, i9=-5, i10=-14635, i11=-2, i12=-1;
        boolean b2=false;
        short s=-2843;

        i3 += (int)((iMeth(i3, i3) + i3) + f);
        try {
            i7 = 1;
            do {
                f = i7;
                if (i3 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + l + i3 + i7 + i8 + (b2 ? 1 : 0) + i9 + i10 + i11 + i12
                        + s;
                    return;
                }
                if (b2) {
                    i3 = i3;
                    if (i3 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + l + i3 + i7 + i8 + (b2 ? 1 : 0) + i9 + i10 + i11 +
                            i12 + s;
                        return;
                    }
                    i8 <<= i3;
                } else if (b2) {
                } else {
                    for (i9 = 1; i9 < 4; ++i9) {
                        i8 += -61;
                        for (i11 = 1; i11 < 2; ++i11) {
                            s -= (short)i9;
                            i3 += (((i11 * i12) + i10) - i8);
                            i8 *= (int)l;
                        }
                    }
                }
            } while (++i7 < 376);
        }
        catch (NullPointerException exc1) {
            i10 = i10;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i3 + i7 + i8 + (b2 ? 1 : 0) + i9 + i10 + i11 + i12 + s;
    }

    public static float fMeth(double d, boolean b, int i) {

        int i1=35786, i2=-22, i14=-19262, i15=-11;
        float f2=41.22F;
        short s1=-28614;

        Test.instanceCount |= i;
        for (i1 = 12; i1 < 234; ++i1) {
            vMeth(f2, Test.instanceCount);
            i <<= i1;
            s1 += (short)(i1 - Test.instanceCount);
            Test.instanceCount = i;
            f2 += Test.instanceCount;
            i2 -= i2;
            for (i14 = 7; i14 > 1; --i14) {
                Test.instanceCount = 22;
                try {
                    i2 = (i1 / -55225);
                    i15 = (Test.iArrFld[i14 + 1] % Test.iArrFld[i14 - 1]);
                    i15 = (i1 % -54);
                } catch (ArithmeticException a_e) {}
                i15 = i14;
                f2 += f2;
                i += (13 + (i14 * i14));
            }
            i2 -= -7;
        }
        long meth_res = Double.doubleToLongBits(d) + (b ? 1 : 0) + i + i1 + i2 + Float.floatToIntBits(f2) + s1 + i14 +
            i15;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=-48.66497;
        boolean b3=true;
        int i16=-81, i17=33816, i18=-26544, i19=-27851, i20=-14, i21=31, i22=12, i23=-33571;
        float f3=0.422F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 52.429F);

        Test.instanceCount *= (long)(fMeth(d1, b3, Test.iFld) * Test.iFld);
        Test.iFld = Test.iFld;
        i16 = 1;
        while (++i16 < 374) {
            Test.iFld += i16;
            for (i17 = 2; i17 < 67; i17++) {
                Test.iFld -= (int)-12L;
                for (i19 = 1; i19 < 2; i19++) {
                    byFld = (byte)i18;
                    i20 += i19;
                    d1 = i17;
                    try {
                        i18 = (Test.iArrFld[i16 - 1] % i16);
                        Test.iArrFld[i19 + 1] = (-62380 % Test.iFld);
                        Test.iArrFld[i16 + 1] = (i16 % -41313);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[i17] = i20;
                }
                d1 -= i18;
                Test.iArrFld[i16 - 1] = Test.iFld;
                Test.iArrFld = Test.iArrFld;
                Test.lArrFld = Test.lArrFld;
                Test.lArrFld[i17 + 1] = i18;
                fArr[i17] -= Test.instanceCount;
            }
            d1 -= -4201097340L;
            for (f3 = 3; f3 < 67; ++f3) {
                for (i22 = 2; i22 > 1; i22--) {
                    Test.instanceCount = i23;
                    Test.iArrFld[i22 - 1] += i22;
                    i18 *= i16;
                    fFld /= ((long)(d1) | 1);
                    Test.iArrFld[i16 + 1] += (int)d1;
                }
                i18 |= i17;
                Test.instanceCount = (long)f3;
                Test.instanceCount |= i19;
                i18 += (int)(f3 * i16);
            }
        }
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
