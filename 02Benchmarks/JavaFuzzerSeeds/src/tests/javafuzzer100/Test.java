package tests.javafuzzer100;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:21:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6689L;
    public int iFld=17;
    public volatile float fFld=22.460F;
    public static short sFld=402;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -136);
        FuzzerUtils.init(Test.fArrFld, 52.218F);
        FuzzerUtils.init(Test.lArrFld, 7988139289101536548L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;

    public static double dMeth1(long l, int i11, int i12) {

        short s1=-22593;
        int i13=-22914, i14=6, i15=-12, i16=9, i17=-93, i18=-194, i19=-3751;
        float f=0.856F, f1=-1.292F;
        double d1=2.64710;
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 230L);

        i11 -= s1;
        for (i13 = 353; i13 > 21; i13--) {
            f = Test.instanceCount;
            i14 = (int)l;
            Test.instanceCount >>= i14;
        }
        if (b) {
            i11 *= (int)l;
            for (f1 = 9; f1 < 179; ++f1) {
                i14 += (int)(f1 * f1);
                for (i16 = 1; i16 < 9; i16++) {
                    Test.fArrFld[(int)(f1)] += (float)d1;
                    i14 = i17;
                    for (i18 = 1; 2 > i18; ++i18) {
                        lArr1[i18] -= i19;
                        Test.iArrFld1[(int)(f1 - 1)] *= i19;
                    }
                }
            }
        } else {
            i12 -= (int)l;
        }
        long meth_res = l + i11 + i12 + s1 + i13 + i14 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i15 + i16
            + i17 + Double.doubleToLongBits(d1) + i18 + i19 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        dMeth1_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i8) {

        int i9=-52, i10=-205, i20=-7, i21=5, i22=234, i23=-8;
        boolean b1=false;
        double d2=-2.52389, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 100.41875);

        for (i9 = 5; i9 < 351; ++i9) {
            dArr[i9] += dMeth1(Test.instanceCount, 29687, i10);
            for (i20 = 5; 1 < i20; i20 -= 2) {
                Test.instanceCount *= i8;
                for (i22 = 1; 3 > i22; i22++) {
                    Test.sFld += (short)i22;
                    Test.instanceCount >>= 201L;
                    if (b1) break;
                    i21 -= (int)Test.instanceCount;
                    if (i21 != 0) {
                        vMeth_check_sum += i8 + i9 + i10 + i20 + i21 + i22 + i23 + (b1 ? 1 : 0) +
                            Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i10 = i20;
                    d2 %= 18;
                    Test.iArrFld1[i22 + 1] >>= 23;
                }
            }
            Test.lArrFld[i9 - 1] |= i20;
            i21 += i9;
        }
        vMeth_check_sum += i8 + i9 + i10 + i20 + i21 + i22 + i23 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static double dMeth() {

        int i6=-5701, i7=-6, i24=-194, i25=-10;
        boolean b2=false;
        double d3=2.38048, dArr1[]=new double[N];
        float f2=2.548F;

        FuzzerUtils.init(dArr1, -1.58441);

        i6 = 1;
        while (++i6 < 128) {
            i7 += (int)(-1.331F + (i6 * i6));
            try {
                i7 = (Test.iArrFld1[i6] / -7279);
                i7 = (i6 % i6);
                i7 = (44931 / i6);
            } catch (ArithmeticException a_e) {}
            i7 += (i6 + i7);
            Test.instanceCount >>= (Test.iArrFld1[i6 - 1]++);
            if (b2) {
                vMeth(i7);
                i7 = i7;
            }
            d3 += Test.instanceCount;
            f2 = i7;
            Test.iArrFld1[i6] = 10;
        }
        dArr1[(i6 >>> 1) % N] = f2;
        for (i24 = 3; i24 < 173; i24++) {
            i25 = i25;
            i25 *= (int)Test.instanceCount;
        }
        long meth_res = i6 + i7 + (b2 ? 1 : 0) + Double.doubleToLongBits(d3) + Float.floatToIntBits(f2) + i24 + i25 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=-32474, i2=-8, i3=104, i4=-13, i5=11, i26=-64258, i27=29192, i28=158, i29=152;
        double d=1.27806;
        short s=-17336;
        long lArr[][]=new long[N][N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(lArr, -813554774481981433L);
        FuzzerUtils.init(byArr, (byte)104);

        iArrFld[(i >>> 1) % N] -= (int)Math.min(Test.instanceCount, ++lArr[(i >>> 1) % N][(-230 >>> 1) % N]);
        for (i1 = 2; i1 < 186; i1++) {
            for (i3 = 2; i3 < 136; i3++) {
                i += (i3 * i3);
                switch ((i3 % 2) + 105) {
                case 105:
                    i5 = 2;
                    while ((i5 -= 3) > 0) {
                        iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
                        d += lArr[i1 + 1][i1 - 1];
                        s = (short)(iArrFld[i3] - ((i2 * iFld) - (fFld * fFld)));
                        fFld -= (float)dMeth();
                        try {
                            i2 = (i1 % i4);
                            i = (i4 % i3);
                            Test.iArrFld1[i1] = (21528 / i2);
                        } catch (ArithmeticException a_e) {}
                        i2 += i4;
                        iFld += i5;
                        Test.instanceCount += (i5 * i1);
                        fFld -= 207;
                    }
                    Test.iArrFld1[i1] >>= i1;
                    fFld /= (i | 1);
                    Test.fArrFld[i1 + 1] += i3;
                case 106:
                    i2 += (6 + (i3 * i3));
                    byArr[i1] = byArr[i3 - 1];
                    d = i;
                default:
                    for (i26 = 1; 2 > i26; ++i26) {
                        i27 ^= i27;
                        Test.iArrFld1 = iArrFld;
                    }
                    fFld = i27;
                    for (i28 = 2; i28 > i1; i28--) {
                        Test.instanceCount += (((i28 * Test.sFld) + i3) - i26);
                        iArrFld[i28 + 1] -= (int)1.953F;
                        lArr[i28 - 1][i28] += (long)d;
                        Test.instanceCount -= 15;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
