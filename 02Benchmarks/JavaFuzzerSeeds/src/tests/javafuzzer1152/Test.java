package tests.javafuzzer1152;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:55:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static float fFld=-28.997F;
    public volatile byte byFld=31;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -13.13118);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i9, byte by) {

        int i10=-6, i11=41017, i12=-170, i13=-46476, iArr2[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -61);

        i9 += (int)Test.instanceCount;
        Test.instanceCount >>= i9;
        i9 = -39513;
        for (i10 = 3; 379 > i10; i10++) {
            i11 <<= (int)Test.instanceCount;
            bArr[i10] = b;
            Test.instanceCount |= i11;
            iArr2[i10 - 1] <<= i9;
        }
        i9 ^= i10;
        i9 = i10;
        i11 -= (int)Test.fFld;
        i11 += (int)-9079181095524220273L;
        for (i12 = 20; i12 < 327; i12++) {
            i11 |= (int)Test.instanceCount;
            i9 += (int)-62.102F;
        }
        long meth_res = i9 + by + i10 + i11 + (b ? 1 : 0) + i12 + i13 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(int i7, int i8) {

        double d1=1.27301;
        short s=2911;
        byte by1=-64;
        int i14=22, i15=57289, i16=-213, i17=-1, i18=31249, iArr1[]=new int[N];
        float f1=0.451F;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 17772L);
        FuzzerUtils.init(iArr1, 26320);

        i8 -= (int)(--Test.instanceCount);
        i8 -= (int)((++lArr[(i8 >>> 1) % N]) - iArr1[(i7 >>> 1) % N]);
        Test.fFld += (float)((d1 *= (-(Test.instanceCount - Test.instanceCount))) * d1);
        i7 = (int)(Math.max(-s, i8--) - (lMeth(i8, by1) + by1));
        for (i14 = 6; 130 > i14; ++i14) {
            i7 -= (int)Test.instanceCount;
            i8 += i14;
            for (f1 = 13; f1 > 1; --f1) {
                if (b1) continue;
            }
            iArr1 = iArr1;
            for (i17 = 1; i17 < 13; i17++) {
                Test.instanceCount ^= i8;
            }
            i7 = i16;
            Test.fFld += (i14 + i8);
            Test.instanceCount -= Test.instanceCount;
        }
        long meth_res = i7 + i8 + Double.doubleToLongBits(d1) + s + by1 + i14 + i15 + Float.floatToIntBits(f1) + i16 +
            (b1 ? 1 : 0) + i17 + i18 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i6) {

        int i19=-38, i20=-53, i21=-8, iArr3[]=new int[N];
        boolean b2=true;
        long l=-11L;
        byte by2=66;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)30064);
        FuzzerUtils.init(iArr3, 167);

        i6 *= ((sArr[(i6 >>> 1) % N] = byMeth(i6, i6)) * i6);
        i19 = 1;
        while (++i19 < 302) {
            if (b2) {
                Test.instanceCount = i6;
            } else {
                Test.instanceCount += (((i19 * i6) + Test.instanceCount) - i19);
                i6 += i19;
                for (l = i19; 5 > l; l++) {
                    i21 = 1;
                    while (++i21 < 1) {
                        Test.instanceCount = -48189;
                        iArr3[i19] -= (int)Test.instanceCount;
                        i6 = (int)l;
                        by2 += (byte)(i21 + i6);
                        by2 -= (byte)l;
                        i6 += i21;
                        i6 <<= i6;
                    }
                }
            }
        }
        long meth_res = i6 + i19 + (b2 ? 1 : 0) + l + i20 + i21 + by2 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i1=50, i2=-38639, i3=8, i4=9, i5=-7, i22=2, i23=254, i24=238, i25=39, i26=5, i27=9, i28=-59380,
            i29=35267, iArr[]=new int[N];
        double d=0.5124, d3=-1.130681;
        float f=2.302F;
        short s1=14384;
        boolean b3=true;

        FuzzerUtils.init(iArr, 184);

        for (i = 8; i < 289; ++i) {
            iArr[i + 1] += (int)(((64332 % (Math.max(-7, i1) | 1)) - i1) - d);
            i2 = 1;
            while (++i2 < 89) {
                for (i3 = 1; 1 > i3; i3++) {
                    iArr[i2 - 1] += iArr[i3 + 1];
                    i4 -= (((i - i4) + (i1 - i2)) + (iArr[i2]--));
                    if (true) break;
                    f = ((long)(i3 + f) << (long)((-167 - (i2 - i)) - Math.abs(f)));
                    i5 <<= ((i4 - iMeth(i5)) - i);
                }
                s1 *= (short)-1.51723;
                i22 = 1;
                while (++i22 < 1) {
                    i1 *= i22;
                    i1 += (52318 + (i22 * i22));
                    i5 = (int)Test.instanceCount;
                    s1 += (short)(i22 * i22);
                    Test.fFld = i22;
                }
            }
        }
        if (b3) {
            for (i23 = 5; i23 < 294; i23++) {
                byFld += (byte)i23;
                for (i25 = 5; i25 < 87; i25++) {
                    i5 += i23;
                    i26 = i24;
                    d3 += Test.instanceCount;
                }
                i24 = (int)1316283481L;
                d3 = i26;
                i27 = 1;
                while (++i27 < 87) {
                    for (i28 = 1; i27 < i28; --i28) {
                        iArr = iArr;
                    }
                    f *= i23;
                }
                i29 += -1;
            }
        } else if (b3) {
            i29 += 173;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
