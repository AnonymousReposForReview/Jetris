package tests.javafuzzer1332;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-168L;
    public static double dFld=2.2091;
    public static float fFld=119.853F;
    public byte byFld=21;
    public short sFld=18131;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i, int i1) {

        float f=-72.218F, fArr[]=new float[N];
        int i2=250, i3=32599, i4=48, i5=-225, iArr[]=new int[N];
        short s=385;
        double d=-1.63059;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 182L);
        FuzzerUtils.init(fArr, 2.854F);
        FuzzerUtils.init(iArr, -150);

        i -= i;
        switch ((((i >>> 1) % 2) * 5) + 53) {
        case 56:
            f *= i;
            for (i2 = 10; i2 < 160; ++i2) {
                lArr[i2][i2] = 31165;
                i1 = (int)Test.dFld;
                Test.instanceCount = i1;
                i -= s;
                i4 = 11;
                while (--i4 > 0) {
                    if (i2 != 0) {
                        vMeth2_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + s + i4 +
                            Double.doubleToLongBits(d) + i5 + FuzzerUtils.checkSum(lArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    for (d = 1; d < 1; d += 3) {
                        byte by1=-25;
                        f += i4;
                        Test.instanceCount += (long)(((d * i4) + i3) - by1);
                        fArr[i2 + 1] -= i5;
                        by1 -= (byte)d;
                    }
                }
            }
        case 60:
            iArr[(i2 >>> 1) % N] = i3;
            break;
        }
        vMeth2_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + s + i4 + Double.doubleToLongBits(d) + i5 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        byte by=102;
        int i6=-1, i7=-14, i8=-201, i9=14, i10=43152, i11=8, i12=14, i13=187, i14=3, iArr1[][]=new int[N][N];
        short s1=4173;

        FuzzerUtils.init(iArr1, 81);

        Test.dFld -= (by * Test.instanceCount);
        vMeth2(i6, i6);
        for (i7 = 194; i7 > 2; i7 -= 3) {
            Test.dFld -= i6;
            i8 *= i8;
        }
        iArr1[(i8 >>> 1) % N][(i7 >>> 1) % N] += i6;
        iArr1[(i7 >>> 1) % N][(i8 >>> 1) % N] = 52508;
        for (i9 = 1; i9 < 261; ++i9) {
            for (i11 = 1; 6 > i11; i11++) {
                i12 = i12;
                Test.instanceCount = Test.instanceCount;
                Test.dFld += i9;
                for (i13 = 1; i13 < 2; i13++) {
                    Test.instanceCount = i8;
                    iArr1[i11 + 1][i13] = s1;
                }
            }
        }
        vMeth1_check_sum += by + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + s1 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        long l=9L;
        int i15=-36171, i16=-4, i17=0, i18=4, i19=35228, iArr2[]=new int[N];
        short s2=11329;

        FuzzerUtils.init(iArr2, 32);

        vMeth1();
        for (l = 4; l < 169; ++l) {
            float f1=-1.974F;
            i15 += (int)-10550L;
            f1 += l;
            f1 += l;
            if (true) {
                f1 += i15;
            }
            Test.instanceCount += (l | i15);
            for (i16 = (int)(l); i16 < 10; ++i16) {
                for (i18 = 1; 1 > i18; ++i18) {
                    i17 = i18;
                    i19 = i18;
                    iArr2[(int)(l)] *= (int)Test.dFld;
                    i19 <<= i17;
                    s2 = (short)i17;
                }
            }
        }
        vMeth_check_sum += l + i15 + i16 + i17 + i18 + i19 + s2 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i20=-135, i21=8003, i22=-132, i23=-1, i24=27, i26=7, i27=61565, i28=-28090, i29=7;
        boolean b=true;
        long l1=4062907511239720547L;

        vMeth();
        iArrFld[(i20 >>> 1) % N] = i20;
        i20 = i20;
        Test.fFld = byFld;
        i20 = (int)Test.dFld;
        for (i21 = 8; i21 < 152; ++i21) {
            lArrFld[i21] *= (long)Test.dFld;
            i22 += (i21 * i21);
            dArrFld[(i21 >>> 1) % N] *= i21;
            Test.bArrFld[i21] = b;
            lArrFld[i21 + 1] = (long)81.121071;
        }
        for (i23 = 2; i23 < 349; ++i23) {
            if (false) {
                lArrFld[i23] += Test.instanceCount;
                Test.instanceCount &= i20;
                i26 = 1;
                while (++i26 < 73) {
                    i24 *= i22;
                }
            } else if (b) {
                for (i27 = 73; i27 > 4; i27--) {
                    sFld = (short)i28;
                    i28 = i20;
                    i28 += (int)-25.670F;
                    if (false) break;
                    for (l1 = 1; l1 < 2; ++l1) {
                        Test.dFld = Test.dFld;
                        lArrFld[i27 + 1] += i20;
                        i20 += i29;
                        i22 -= i27;
                        i22 -= (int)Test.instanceCount;
                        i28 = i29;
                        Test.instanceCount += (l1 + Test.instanceCount);
                    }
                }
            } else if (b) {
                Test.fFld /= (i21 | 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
