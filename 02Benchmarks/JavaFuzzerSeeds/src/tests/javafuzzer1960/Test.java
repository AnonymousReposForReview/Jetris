package tests.javafuzzer1960;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:30:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6394635476962214713L;
    public static boolean bFld=true;
    public static float fFld=-1.430F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 34439);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4, float f1, int i5) {

        int i6=2, i7=45017, i8=-102, i9=136, i10=-9557, i11=-84, i12=170, i13=-200;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)31679);

        for (i6 = 9; 198 > i6; i6++) {
            for (i8 = 1; i8 < 8; ++i8) {
                Test.instanceCount -= i5;
            }
            Test.instanceCount *= i9;
            for (i10 = 1; i10 < 8; i10 += 3) {
                i9 = i10;
                for (i12 = 1; 4 > i12; i12++) {
                    i4 = 69;
                    Test.bFld = true;
                    Test.instanceCount += (-61 + (i12 * i12));
                    switch ((i10 % 9) + 126) {
                    case 126:
                        Test.instanceCount >>>= i10;
                        if (true) {
                            i11 += i4;
                            if (true) continue;
                        }
                        break;
                    case 127:
                        i5 += (i12 ^ i9);
                        break;
                    case 128:
                        sArr[i12] *= (short)i7;
                    case 129:
                    case 130:
                        i11 += i7;
                        break;
                    case 131:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 132:
                        Test.iArrFld[i10 + 1] <<= -50067;
                        break;
                    case 133:
                        i13 -= i6;
                    case 134:
                        f1 *= i11;
                        break;
                    }
                }
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i, int i1) {

        int i2=-14, i3=-41126;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)-42);
        FuzzerUtils.init(lArr, -7838L);
        FuzzerUtils.init(fArr, 6.953F);

        for (byte by : byArr) {
            double d=-2.76073;
            lArr[(i1 >>> 1) % N] = (lArr[(i >>> 1) % N] *= (-(-64500 + lArr[(6 >>> 1) % N])));
            for (i2 = 1; i2 < 4; ++i2) {
                lMeth(i, Test.fFld, i);
                i >>= (int)3967844007L;
                Test.instanceCount <<= -70;
                i3 -= -11;
                fArr[i2 + 1] %= (i | 1);
                i1 += i3;
            }
            if (Test.bFld) {
                i = (int)Test.instanceCount;
                switch ((((i2 >>> 1) % 9) * 5) + 106) {
                case 123:
                    d *= i3;
                    d = -143;
                    break;
                case 122:
                    i3 <<= i3;
                    break;
                case 151:
                case 142:
                    try {
                        i1 = (i1 / i3);
                        i1 = (i3 / -1959930213);
                        i1 = (39897 % i);
                    } catch (ArithmeticException a_e) {}
                case 129:
                    i = i2;
                    break;
                case 134:
                    Test.iArrFld[(51287 >>> 1) % N] *= (int)Test.instanceCount;
                    break;
                case 136:
                    Test.instanceCount &= Test.instanceCount;
                    break;
                case 127:
                    Test.instanceCount -= i2;
                case 117:
                    i1 <<= i3;
                default:
                    Test.instanceCount = i;
                }
            } else if (Test.bFld) {
                Test.fFld %= -3023820713L;
            } else {
                if (Test.bFld) break;
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(float f) {

        int i14=46872, i16=14;
        double d1=-127.8889;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-17864);

        vMeth1(i14, i14);
        i14 += i14;
        for (int i15 : Test.iArrFld) {
            Test.instanceCount = 47636;
            d1 = i14;
            sArr1[(i15 >>> 1) % N] += (short)d1;
            i16 = 1;
            do {
                Test.iArrFld = Test.iArrFld;
                i15 >>>= i15;
                i15 >>= i15;
                i14 += (((i16 * Test.instanceCount) + i16) - Test.instanceCount);
                Test.iArrFld[i16 + 1] -= -1151;
                i15 -= i16;
                Test.fFld = f;
                i14 += i15;
            } while (++i16 < 4);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i14 + Double.doubleToLongBits(d1) + i16 +
            FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {

        int i17=-157, i18=-180, i19=9821, i20=-13975, i21=-12, i22=10, i23=-11, i24=-46555, i25=2, i26=-12, i27=9,
            i28=-17957;
        byte by1=97;
        double d2=0.121824, d3=108.58040;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 4177804746737014381L);

        vMeth(Test.fFld);
        for (i17 = 7; i17 < 142; ++i17) {
            i18 *= i17;
            for (i19 = 4; i19 < 186; i19++) {
                by1 += (byte)(i19 - i17);
            }
            lArr1[i17 + 1] -= i17;
            i21 = 1;
            do {
                for (i22 = 1; i22 < 1; ++i22) {
                    i20 *= (int)Test.instanceCount;
                    Test.instanceCount = i17;
                    i23 += (i22 * by1);
                    i23 >>>= i18;
                    Test.fFld = i17;
                    by1 >>>= (byte)i18;
                }
                Test.instanceCount += (((i21 * Test.fFld) + i22) - Test.instanceCount);
                for (d2 = i17; d2 < 1; ++d2) {
                    if (Test.bFld) break;
                    i20 = i17;
                }
                Test.instanceCount = Test.instanceCount;
                for (i25 = 1; 1 > i25; i25++) {
                    i23 = -48982;
                }
                Test.instanceCount -= (long)62.752F;
                for (i27 = 1; i27 < 1; i27++) {
                    i18 &= -2;
                    switch ((((40323 >>> 1) % 10) * 5) + 82) {
                    case 83:
                        d3 = i18;
                        break;
                    case 85:
                        lArr1[i27 - 1] -= Test.instanceCount;
                        try {
                            i26 = (i17 / -35120);
                            i18 = (-129 / i24);
                            i28 = (-1792894625 / i25);
                        } catch (ArithmeticException a_e) {}
                        i28 += (i27 - i24);
                        lArr1[i27 + 1] = i20;
                    case 84:
                        Test.instanceCount += i22;
                        break;
                    case 117:
                        i18 <<= (int)Test.instanceCount;
                        break;
                    case 127:
                        lArr1[i17] += 14;
                        break;
                    case 113:
                        lArr1[i21 - 1] = i26;
                    case 93:
                        i18 *= i18;
                        break;
                    case 120:
                        Test.instanceCount <<= i26;
                    case 130:
                        Test.instanceCount = (long)Test.fFld;
                        break;
                    case 101:
                        Test.fFld = Test.instanceCount;
                    }
                }
            } while (++i21 < 186);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
