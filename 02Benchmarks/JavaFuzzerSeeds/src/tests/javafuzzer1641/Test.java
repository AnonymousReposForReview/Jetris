package tests.javafuzzer1641;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static int iFld=15124;
    public short sFld=-9017;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -106.643F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(float f1, int i5, long l1) {

        int i6=22622, i7=-5, i8=3, i9=-8, i10=-1519, i11=-164, iArr[][]=new int[N][N];
        boolean b=false;
        double d=55.114126, dArr[]=new double[N];
        long l2=2475382999L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 54746L);
        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(dArr, -2.127463);

        for (i6 = 9; 172 > i6; i6++) {
            lArr[i6] += 4370679078319641974L;
            switch ((((i6 >>> 1) % 2) * 5) + 6) {
            case 15:
                iArr[i6 - 1][i6 + 1] += i6;
                i5 >>= i5;
                i8 = 1;
                do {
                    if (b) continue;
                    i7 += (int)d;
                    for (i9 = i8; i9 < 1; i9++) {
                        dArr[i9 + 1] += Test.instanceCount;
                        i5 -= i5;
                        b = b;
                    }
                } while (++i8 < 10);
                break;
            case 7:
                for (l2 = 1; l2 < 10; ++l2) {
                    lArr[(int)(l2 - 1)] = l2;
                    Test.instanceCount -= Test.instanceCount;
                }
                break;
            default:
                i11 += (2 + (i6 * i6));
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i5 + l1 + i6 + i7 + i8 + (b ? 1 : 0) + Double.doubleToLongBits(d) +
            i9 + i10 + l2 + i11 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        float f2=-56.242F;
        long lArr1[]=new long[N];
        int iArr1[]=new int[N];

        FuzzerUtils.init(lArr1, 1607263467674519967L);
        FuzzerUtils.init(iArr1, 3);

        lMeth1(f2, Test.iFld, Test.instanceCount);
        lArr1[(Test.iFld >>> 1) % N] = Test.instanceCount;
        iArr1[(Test.iFld >>> 1) % N] += Test.iFld;
        long meth_res = Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, float f, byte by) {

        int i1=19, i2=181, i3=3, i4=-6478, i12=-13, iArr2[][]=new int[N][N];
        long l=-12L, lArr2[]=new long[N];
        short s=-9203;
        double d1=1.116618;

        FuzzerUtils.init(lArr2, 2199122591L);
        FuzzerUtils.init(iArr2, 225);

        i1 = 1;
        while (++i1 < 221) {
            for (l = 1; l < 7; l += 2) {
                f += i2;
                Test.instanceCount += (l + i2);
                if (i != 0) {
                    vMeth_check_sum += i + Float.floatToIntBits(f) + by + i1 + l + i2 + s + i3 + i4 + i12 +
                        Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                i = (int)f;
                if (false) {
                    i2 *= (int)((--i) * ((i1 >> s) * (i2 + l)));
                    for (i3 = 3; i3 > 1; i3 -= 2) {
                        i -= (int)((i2++) - (lMeth() + i12));
                        lArr2[i1] = i1;
                        lArr2[(int)(l)] = 44460L;
                        iArr2[i3 - 1][(int)(l + 1)] = (int)d1;
                    }
                } else {
                    i4 = i12;
                }
                try {
                    i4 = (iArr2[(int)(l - 1)][i1] % 18596);
                    i2 = (133 % Test.iFld);
                    i12 = (76 / i2);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + by + i1 + l + i2 + s + i3 + i4 + i12 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f3=-15.1F;
        byte by1=54;
        int i13=30674, i14=27, i15=-9023, i16=-41229, i17=26227, i18=216, i19=-191, i20=2204, i21=-225, i22=232, i23=1,
            i24=6794, iArr3[][]=new int[N][N];
        double d2=80.128691;

        FuzzerUtils.init(iArr3, -89);

        vMeth(Test.iFld, f3, by1);
        Test.instanceCount += Test.iFld;
        i13 = 1;
        while (++i13 < 126) {
            Test.iFld += (int)(-111L + (i13 * i13));
            for (i14 = 2; 199 > i14; i14++) {
                i15 *= 103;
                sFld += (short)i15;
                Test.instanceCount += (((i14 * by1) + f3) - i13);
                Test.instanceCount = i13;
            }
            Test.instanceCount = Test.instanceCount;
            Test.iFld += (((i13 * i13) + i14) - i15);
            Test.instanceCount -= Test.instanceCount;
            i15 += (((i13 * Test.iFld) + i14) - f3);
            i15 = -62;
            try {
                iArr3[i13][i13 - 1] = (i15 % Test.iFld);
                i15 = (iArr3[i13][i13] / -21);
                i15 = (iArr3[i13 - 1][i13] / -30584);
            } catch (ArithmeticException a_e) {}
            Test.iFld = Test.iFld;
        }
        for (i16 = 10; i16 < 306; ++i16) {
            Test.iFld = i16;
        }
        i18 = 1;
        while (++i18 < 257) {
            for (i19 = 6; i19 < 98; i19++) {
                for (i21 = i19; 2 > i21; ++i21) {
                    i17 |= sFld;
                    f3 = Test.instanceCount;
                    Test.iFld += (2 + (i21 * i21));
                    by1 = (byte)i20;
                    d2 += i21;
                }
                for (i23 = 1; i23 < 2; i23++) {
                    f3 = i23;
                    i15 += i13;
                    Test.fArrFld[i19] *= i13;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
