package tests.javafuzzer2843;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:21:55 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-202L;
    public int iFld=65469;
    public byte byFld=78;
    public static float fFld=-2.466F;
    public static boolean bFld=false;

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        double d3=-27.256;
        int i11=9, i12=64131, i13=4, i14=116, iArr1[]=new int[N];
        long l1=54L, lArr1[]=new long[N];
        short s1=11559;

        FuzzerUtils.init(lArr1, 96L);
        FuzzerUtils.init(iArr1, -6);

        for (d3 = 12; d3 < 214; d3++) {
            i11 = i11;
            i11 += i11;
            for (l1 = 1; 8 > l1; l1++) {
                for (i13 = 1; i13 < 2; i13++) {
                    i11 += i13;
                    Test.instanceCount <<= 978;
                    Test.fFld = i11;
                    lArr1[i13] >>= i14;
                    i11 -= s1;
                    switch ((int)((d3 % 2) + 58)) {
                    case 58:
                        i12 = i11;
                    case 59:
                        i14 += i12;
                        i14 += i13;
                        break;
                    }
                    iArr1[i13 + 1] <<= i11;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d3) + i11 + l1 + i12 + i13 + i14 + s1 + FuzzerUtils.checkSum(lArr1)
            + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(double d2, int i10) {

        byte by=38;
        int i15=-2, i16=14, i17=10, i18=64;
        short s2=9055;
        boolean b=false;

        i10 *= (int)(((by++) - i10) + (Double.longBitsToDouble(49084L) - (i10 - Test.fFld)));
        vMeth1();
        i10 = 3846;
        i10 <<= i10;
        if (b) {
            for (i15 = 17; i15 < 383; ++i15) {
                by += (byte)(i15 | Test.instanceCount);
                Test.instanceCount *= i16;
                d2 = s2;
            }
            Test.instanceCount = (long)Test.fFld;
            i16 += (int)Test.fFld;
        } else {
            Test.instanceCount *= Test.instanceCount;
            for (i17 = 273; i17 > 14; --i17) {
                Test.fFld += (((i17 * Test.instanceCount) + i18) - i17);
                i10 = 25;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d2) + i10 + by + i15 + i16 + s2 + (b ? 1 : 0) + i17 + i18;
    }

    public static byte byMeth() {

        float f1=-48.231F;
        int i9=-29171, i19=6, i20=-23371, i21=14, i22=7, i23=-9184, i24=58599, i25=-149, i26=12;
        double d4=17.89217;
        byte by1=-120;

        for (f1 = 8; f1 < 177; ++f1) {
            vMeth(d4, i9);
            for (i19 = (int)(f1); i19 < 9; ++i19) {
                Test.instanceCount += (i19 * i19);
            }
            for (i21 = (int)(f1); i21 < 9; i21++) {
                Test.fFld = i19;
                i9 -= (int)-51604L;
                Test.instanceCount += (i21 * by1);
            }
            i22 += (int)(f1 * f1);
            Test.instanceCount = i21;
            Test.instanceCount >>= i20;
        }
        for (i23 = 19; 372 > i23; ++i23) {
            for (i25 = 5; i25 > 1; i25--) {
                Test.instanceCount += (i25 - i26);
                Test.fFld -= i25;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i9 + Double.doubleToLongBits(d4) + i19 + i20 + i21 + i22 + by1 + i23
            + i24 + i25 + i26;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=-14, i2=-2352, i3=66, i4=-100, i5=187, i6=56, i7=-5, i8=-45, i27=-203, iArr[]=new int[N];
        short s=-8148;
        float f=2.434F;
        double d=-1.61554, d1=-111.34048;
        long l=1228966396L, lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr, -4637337050639712857L);
        FuzzerUtils.init(byArr, (byte)-113);

        Test.instanceCount <<= ((iArr[(iFld >>> 1) % N] + 1797590004L) + (iFld + iFld));
        i <<= (int)(iArr[(i >>> 1) % N] * ((Test.instanceCount++) - (s + Test.instanceCount)));
        i >>>= (int)((iFld = (++i)) * ((i + 102.76627) * (f - -4)));
        i1 = 1;
        while (++i1 < 379) {
            switch ((((iArr[i1] >>> 1) % 1) * 5) + 23) {
            case 24:
                for (d = 2; d < 66; ++d) {
                    byFld *= (byte)iArr[(int)(d - 1)];
                    i2 += (int)(((d * Test.instanceCount) + i1) - Test.instanceCount);
                    for (i3 = 1; i3 < 2; ++i3) {
                        Test.instanceCount >>>= (long)(-(++d1));
                    }
                    i2 += (int)(((d * Test.instanceCount) + i3) - Test.instanceCount);
                }
                for (i5 = 2; i5 < 66; i5++) {
                    iArr[i5 + 1] -= (int)(lArr[i1 - 1] - ((++i2) + Integer.reverseBytes(i3)));
                    f = i4;
                    i2 &= (int)Test.instanceCount;
                    for (i7 = i5; 2 > i7; i7++) {
                        if (Test.bFld) {
                            i4 += (i7 * i7);
                            switch ((((iFld << i8) >>> 1) % 2) + 106) {
                            case 106:
                            case 107:
                                l = (long)((f--) + (--i2));
                                i4 = (++iArr[i1 - 1]);
                                switch ((((((int)(d - iFld)) >>> 1) % 2) * 5) + 53) {
                                case 59:
                                    if (byMeth() < l) continue;
                                    i4 += (i7 * i4);
                                    break;
                                case 62:
                                    iFld += byFld;
                                    if (true) break;
                                    d1 *= 208;
                                    s = (short)27100L;
                                    break;
                                }
                            }
                            f = i2;
                            i6 %= (int)(i27 | 1);
                        } else if (Test.bFld) {
                            byArr[i1 + 1] -= (byte)3858;
                        } else if (Test.bFld) {
                            iArr[i1] = iFld;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
