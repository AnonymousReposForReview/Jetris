package tests.javafuzzer1797;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:24:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2292070630L;
    public static double dFld=22.85147;
    public float fFld=0.308F;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -113);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, float f) {

        int i5=-147, i6=6, i7=-16773, i8=-35, i9=22374, i10=-4;
        boolean b=true;
        byte by=-66;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3L);

        i5 = 1;
        while (++i5 < 223) {
            switch ((((i4 >>> 1) % 6) * 5) + 93) {
            case 107:
                Test.iArrFld[i5] = i4;
                lArr = lArr;
                i6 = 1;
                while (++i6 < 7) {
                    i4 = (int)Test.instanceCount;
                    Test.iArrFld[i6] = i7;
                    i7 <<= i5;
                    i4 %= (int)(Test.instanceCount | 1);
                }
                for (i8 = i5; 7 > i8; i8++) {
                    i10 = 1;
                    do {
                        i4 *= i10;
                        if (b) {
                            Test.instanceCount += (((i10 * f) + i5) - i7);
                        } else if (b) {
                            i9 &= i10;
                        } else if (b) {
                            i4 >>= i9;
                        } else {
                            Test.instanceCount -= i5;
                        }
                    } while (++i10 < 1);
                }
            case 100:
                Test.instanceCount = -150;
            case 108:
                Test.instanceCount = i5;
                break;
            case 118:
                i7 += (i5 * i7);
            case 94:
                i4 += (int)5107785690153172251L;
            case 123:
                by <<= (byte)814539672L;
            default:
                i9 += i5;
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + by +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth() {

        int i3=60611;
        float f1=117.188F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.24F);

        fArr[(i3 >>> 1) % N] -= Test.iArrFld[(i3 >>> 1) % N];
        vMeth(i3, f1);
        long meth_res = i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i1, int i2) {


        Test.iArrFld[(-1 >>> 1) % N] >>= (int)(Test.iArrFld[(i2 >>> 1) % N] -= (int)lMeth());
        i2 -= (int)Test.instanceCount;
        vSmallMeth_check_sum += i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i12=229, i13=-185, i14=-7, i15=63684, i16=0, i17=51, i18=-21040, i19=5;
        long l=-31325L, l1=-154L;
        short s=-20937;
        float f2=84.691F;
        byte by1=-17;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.53931);

        Test.dFld = (fFld - ((i - -3208L) - i));
        i *= (int)((fFld--) + ((Test.iArrFld[(i >>> 1) % N]--) - (Test.instanceCount - i)));
        for (int smallinvoc=0; smallinvoc<334; smallinvoc++) vSmallMeth(-149, i);
        for (i12 = 378; i12 > 7; --i12) {
            i13 *= i;
            Test.iArrFld[i12] &= i;
            for (l = i12; l < 68; ++l) {
                i += (int)(((l * Test.instanceCount) + fFld) - s);
                for (f2 = 1; f2 < 1; f2++) {
                    i13 = i13;
                    i14 += (int)(((f2 * i12) + i12) - i12);
                    i15 = i12;
                    by1 += (byte)Test.instanceCount;
                    i14 = (int)fFld;
                    Test.iArrFld[i12] -= i;
                    if (bFld) continue;
                    i14 >>= 150;
                    Test.dFld %= (i | 1);
                    dArr[(int)(f2)] = i14;
                }
                by1 /= (byte)34341;
            }
        }
        if (false) {
            i16 = 1;
            do {
                i15 += (int)l;
                for (i17 = 105; i17 > 1; i17 -= 2) {
                    fFld = i13;
                    for (l1 = 1; 3 > l1; l1++) {
                        s -= (short)i12;
                        bFld = bFld;
                    }
                }
                Test.dFld += 113;
                i13 = i14;
            } while (++i16 < 240);
        } else if (bFld) {
            Test.iArrFld[(29738 >>> 1) % N] = i17;
        } else {
            Test.iArrFld[(i13 >>> 1) % N] -= 47363;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
