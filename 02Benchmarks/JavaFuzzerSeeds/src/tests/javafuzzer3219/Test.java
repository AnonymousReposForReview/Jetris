package tests.javafuzzer3219;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:16:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-767767070L;
    public static byte byFld=-57;
    public short sFld=18645;
    public volatile boolean bFld=true;
    public int iFld=13;
    public static int iFld1=13;
    public static int iFld2=-11;
    public static float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.916F);
        FuzzerUtils.init(Test.iArrFld, 15422);
        FuzzerUtils.init(Test.lArrFld, -2796051119177604080L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2) {

        int i3=-2, i4=-248, i5=-3460, i6=-1, iArr[]=new int[N];
        float f=101.605F;
        boolean b=true, bArr[]=new boolean[N];
        double d=2.110089;

        FuzzerUtils.init(iArr, 47851);
        FuzzerUtils.init(bArr, false);

        i3 = 356;
        while ((i3 -= 2) > 0) {
            iArr[i3] -= i2;
            f = Test.instanceCount;
            i4 = 1;
            do {
                i2 = -29854;
                i2 = i4;
                for (i5 = 1; i5 < 1; ++i5) {
                    i2 >>>= i4;
                    Test.fArrFld[i5][i4] = i2;
                    if (b) continue;
                    i6 |= i4;
                    i2 = (int)Test.instanceCount;
                    iArr[i5 - 1] = i4;
                    d *= i5;
                    bArr = FuzzerUtils.boolean1array(N, (boolean)false);
                }
            } while (++i4 < 9);
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + (b ? 1 : 0) + Double.doubleToLongBits(d)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth(byte by, int i1) {

        int i7=-20167, i8=-25944, i9=-173, i10=18567, i11=254, i12=63, iArr1[][]=new int[N][N];
        boolean b1=true;
        float f1=-101.169F;

        FuzzerUtils.init(iArr1, 6);

        vMeth(-14);
        for (i7 = 8; i7 < 234; i7 += 3) {
            i8 += i7;
            Test.instanceCount = i7;
            if (b1) continue;
            for (i9 = 1; i9 < 21; ++i9) {
                i10 = i7;
                for (i11 = 1; i11 < 2; ++i11) {
                    i8 = i12;
                    iArr1 = iArr1;
                    if (i11 != 0) {
                    }
                    i12 += i11;
                    i8 -= i8;
                }
                iArr1[i9][i7 + 1] -= i10;
                f1 += i12;
            }
        }
        long meth_res = by + i1 + i7 + i8 + (b1 ? 1 : 0) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth() {

        int i13=1769;

        lMeth(Test.byFld, i13);
        Test.iArrFld[(13 >>> 1) % N] = i13;
        vSmallMeth_check_sum += i13;
    }

    public void mainTest(String[] strArr1) {

        int i=26976, i14=-60, i15=-8, i16=-28050, i17=85, i18=0, i19=135, i20=-1, i21=-7;
        float f2=-52.927F, f3=0.848F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1201342666L);

        i += (int)(++Test.instanceCount);
        for (int smallinvoc=0; smallinvoc<607; smallinvoc++) vSmallMeth();
        i14 = 1;
        while (++i14 < 223) {
            Test.instanceCount *= i;
            i15 = 1;
            while (++i15 < 113) {
                sFld += (short)(i15 * i15);
                if (bFld) break;
                i = i15;
                switch (((i14 % 2) * 5) + 4) {
                case 12:
                    iFld += (((i15 * i15) + Test.iFld1) - f2);
                    Test.iFld1 += (i15 ^ Test.iFld2);
                    break;
                case 9:
                    for (i16 = 1; i16 > 1; --i16) {
                        Test.lArrFld[i15] = i17;
                    }
                    lArr[i15] >>= i16;
                    break;
                }
                i += (i15 * f2);
            }
            Test.instanceCount += (i14 * i14);
            f3 = 1;
            while (++f3 < 113) {
                Test.iFld1 *= (int)123L;
                i += i16;
                Test.iFld1 += (-63954 + (f3 * f3));
            }
        }
        for (i18 = 13; 297 > i18; ++i18) {
            byArrFld[i18] += (byte)i18;
            switch (((i18 % 3) * 5) + 9) {
            case 16:
                Test.fArrFld[i18 + 1][i18 - 1] *= i19;
                Test.instanceCount >>= sFld;
                for (i20 = 3; 89 > i20; i20++) {
                    Test.fArrFld[i18 + 1][(7 >>> 1) % N] += Test.byFld;
                    i17 += 34128;
                    Test.iFld1 *= i18;
                }
            case 18:
            case 22:
                Test.instanceCount += -14;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
