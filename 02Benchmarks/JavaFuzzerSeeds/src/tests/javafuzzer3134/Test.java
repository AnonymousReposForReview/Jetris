package tests.javafuzzer3134;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:27:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1939428267L;
    public static volatile byte byFld=40;
    public static float fFld=118.985F;
    public static short sFld=-3884;
    public static double dFld=-43.1217;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 63480L);
        FuzzerUtils.init(Test.iArrFld, -30272);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vMeth() {

        int i2=2, i3=-160, i4=4841, i5=189, i6=6360, i7=-44231;
        short s=14242;
        double d=0.46696;
        float f=126.315F, fArr[]=new float[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr, -1.902F);
        FuzzerUtils.init(lArr1, 18307L);

        for (i2 = 13; i2 < 277; ++i2) {
            for (i4 = i2; i4 < 6; ++i4) {
                for (i6 = 1; i6 > 1; i6 -= 2) {
                    Test.byFld += (byte)(i6 * i6);
                    Test.instanceCount >>= s;
                    switch ((i2 % 1) + 113) {
                    case 113:
                        fArr[i2 + 1] -= Test.instanceCount;
                        i5 += (-23142 + (i6 * i6));
                        i3 /= (int)(((lArr1[i2 + 1][i4 - 1]++) - (i5 += (int)(-26252L + (i3--)))) | 1);
                        i5 += (--i7);
                        break;
                    default:
                        i7 >>= (int)(((Test.instanceCount + -45.856F) - Test.instanceCount) - (--i7));
                    }
                    d *= (-((53.51307 - (i4 * i4)) * i4));
                    d -= ((-(i5 * f)) + Test.instanceCount);
                }
                lArr1[i2 + 1][i2] = (--i7);
                i7 -= (int)2L;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + s + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i8) {

        int i9=27874, i10=13, i11=-214, i12=25744, i13=5, i14=-2, iArr1[]=new int[N], iArr2[]=new int[N];

        FuzzerUtils.init(iArr1, 113);
        FuzzerUtils.init(iArr2, -8664);

        vMeth();
        iArr1[(i8 >>> 1) % N] = (int)Test.instanceCount;
        for (i9 = 1; i9 < 325; i9 += 2) {
            Test.lArrFld[i9 - 1] -= -236;
            i11 = 1;
            while (++i11 < 10) {
                i8 += (i11 * i11);
                i10 += i11;
                Test.byFld = (byte)-61;
            }
        }
        iArr2[(59040 >>> 1) % N] += i10;
        Test.byFld = (byte)36167;
        iArr1[(i10 >>> 1) % N] += (int)1.80781;
        for (i12 = 6; 357 > i12; i12++) {
            i10 = (int)Test.instanceCount;
            Test.fFld -= i14;
            Test.lArrFld = Test.lArrFld;
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i1) {

        int i15=-35782, i16=165, i17=205, i18=44797, i19=-12, i20=-186, iArr3[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3486120844L);
        FuzzerUtils.init(iArr3, 25651);

        for (long l : lArr) {
            vMeth();
            iMeth(i1);
            iArr3[(i1 >>> 1) % N] = iArr3[(i1 >>> 1) % N];
        }
        for (i15 = 216; i15 > 1; i15--) {
            Test.instanceCount += (((i15 * Test.byFld) + Test.sFld) - i16);
            for (i17 = 1; 7 > i17; i17++) {
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.iArrFld[(i19 >>> 1) % N][i19 - 1] = (int)Test.instanceCount;
                    i16 = -55992;
                    i16 += (-12 + (i19 * i19));
                    i18 = (int)Test.fFld;
                    i16 += (int)-36729L;
                    Test.instanceCount *= Test.instanceCount;
                    Test.instanceCount += -13593;
                }
            }
        }
        long meth_res = i1 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-63, i21=-7, i22=61, i23=209, i24=-56589, i25=-34, i26=-143, i27=-94, iArr[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 38926);
        FuzzerUtils.init(fArr1, 113.961F);

        iArr[(i >>> 1) % N] <<= (int)lMeth(i);
        i -= -57;
        for (i21 = 8; i21 < 221; i21++) {
            i22 = i21;
            for (i23 = 1; 118 > i23; i23++) {
                i24 += (i23 * i23);
                i22 -= i;
                i22 = Test.sFld;
                i >>>= i23;
                i += (((i23 * Test.instanceCount) + Test.byFld) - i24);
                Test.instanceCount += i23;
            }
            for (i25 = 118; 4 < i25; --i25) {
                Test.instanceCount -= -31;
                Test.dFld += Test.byFld;
                Test.byFld -= (byte)21.204F;
                switch ((((223 >>> 1) % 6) * 5) + 109) {
                case 110:
                    Test.dFld *= i;
                    break;
                case 139:
                    fArr1[i21 + 1] -= i22;
                    i += i22;
                case 131:
                    Test.sFld += (short)i21;
                    i27 = 1;
                    do {
                        Test.instanceCount += i27;
                        i24 = 6;
                        switch ((i25 % 2) + 125) {
                        case 125:
                            Test.instanceCount *= Test.instanceCount;
                            i24 += (int)Test.instanceCount;
                            Test.byFld += (byte)i23;
                            i -= (int)Test.fFld;
                            break;
                        case 126:
                            Test.iArrFld[i27 - 1][i21] = i27;
                            Test.fFld += (((i27 * Test.fFld) + Test.instanceCount) - i24);
                            break;
                        default:
                            i24 = i21;
                        }
                    } while (++i27 < 2);
                case 136:
                    i = i27;
                case 112:
                    i26 = i;
                case 114:
                    i22 += (i25 ^ Test.instanceCount);
                    break;
                default:
                    Test.instanceCount ^= i;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
