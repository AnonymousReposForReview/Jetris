package tests.javafuzzer1463;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:08:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2157969538954632806L;
    public float fFld=2.617F;
    public short sFld=3075;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.74F);
        FuzzerUtils.init(Test.iArrFld, -151);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i8=3016, i9=-39732, i10=28, i11=9, iArr[]=new int[N];
        double d1=53.52614;
        byte by1=-90;
        boolean b1=false;

        FuzzerUtils.init(iArr, -10);

        i8 = 1;
        do {
            d1 *= Test.instanceCount;
            i9 += i8;
            if (i9 != 0) {
            }
            i9 = i9;
            if (i8 != 0) {
            }
            iArr[i8 + 1] -= by1;
            if (b1) continue;
            for (i10 = 7; i10 > 1; --i10) {
                i9 += (int)d1;
                Test.instanceCount += by1;
                Test.instanceCount += Test.instanceCount;
                i11 += i9;
                by1 *= (byte)-1;
                iArr[i8] = i9;
            }
        } while (++i8 < 247);
        long meth_res = i8 + Double.doubleToLongBits(d1) + i9 + by1 + (b1 ? 1 : 0) + i10 + i11 +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        int i4=-232, i5=-3, i6=4, i7=-14, i12=-60322, iArr1[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        float f2=-93.560F, f3=-11.819F;
        byte by=-76;
        double d2=2.96168;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -15538);

        i4 = 250;
        do {
            short s=-7689;
            b = (bArr[i4 - 1] || ((i2 - i4) != (s--)));
        } while ((i4 -= 2) > 0);
        for (i5 = 19; i5 < 344; i5++) {
            i6 += (((i5 * f2) + i3) - f2);
            i6 += (int)(((Test.instanceCount + f2) - (i5 - i2)) + (by = (byte)(i3--)));
            bArr[i5 - 1] = b;
            for (f3 = i5; 5 > f3; f3++) {
                i6 <<= (i6++);
                i3 *= (int)fMeth();
                iArr1[i5] <<= i5;
                i12 = 1;
                do {
                    i6 &= i5;
                    i7 += 10261;
                    Test.instanceCount = 7680;
                    Test.instanceCount = (long)d2;
                } while (--i12 > 0);
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + Float.floatToIntBits(f2) + by +
            Float.floatToIntBits(f3) + i7 + i12 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(float f, int i1, float f1) {

        double d=116.44859, dArr[]=new double[N];
        float f4=122.986F;
        int i14=13, i15=-35, iArr2[]=new int[N];
        short s1=-4475;

        FuzzerUtils.init(dArr, 0.35347);
        FuzzerUtils.init(iArr2, -2);

        dArr[(-38858 >>> 1) % N] += d;
        vMeth(i1, i1);
        Test.instanceCount -= -52;
        for (int i13 : iArr2) {
            for (f4 = 1; f4 < 4; f4++) {
                i1 += (int)f4;
                i14 = i14;
                d += d;
            }
            i15 = 1;
            while ((i15 += 2) < 4) {
                i14 += (i15 | Test.instanceCount);
                Test.instanceCount += (((i15 * i13) + s1) - i15);
                i1 -= (int)Test.instanceCount;
                iArr2[i15 + 1] = -1;
                Test.fArrFld[i15] += i15;
                i13 = (int)f4;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f4) + i14 + i15 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14, i16=244, i17=13, i18=7314, i19=-208, i20=39828, i21=49104, i22=72, i23=49165;
        double d3=-2.21161;
        float f5=52.620F;
        byte by2=73;
        long l=141L, l1=4L;

        i = iMeth(fFld, i, fFld);
        i = (int)Test.instanceCount;
        i16 = 1;
        while (++i16 < 310) {
            for (i17 = 5; 81 > i17; ++i17) {
                fFld += (i17 * Test.instanceCount);
                fFld += (float)d3;
                Test.instanceCount >>= 2;
                i18 += (i17 * Test.instanceCount);
                f5 -= -153;
                Test.instanceCount -= 11551;
                for (i19 = 2; i19 > 1; i19--) {
                    i20 = -233;
                    Test.iArrFld[i16 + 1] <<= (int)Test.instanceCount;
                    sFld -= (short)i19;
                    i = i16;
                    try {
                        i20 = (51680 % Test.iArrFld[i16 + 1]);
                        i20 = (i19 % i18);
                        i = (-39840 / i16);
                    } catch (ArithmeticException a_e) {}
                }
                for (i21 = 1; i21 < 2; i21++) {
                    i20 += (13 + (i21 * i21));
                    i22 *= (int)f5;
                    f5 = i18;
                }
                by2 -= (byte)i20;
            }
            i22 = i20;
            for (l = 4; l < 81; l++) {
                i22 <<= i18;
            }
            i = i16;
            i18 <<= i21;
            l1 = 1;
            while (++l1 < 81) {
                Test.instanceCount *= i21;
                try {
                    i23 = (Test.iArrFld[(int)(l1)] / -42555);
                    Test.iArrFld[(int)(l1)] = (Test.iArrFld[i16 + 1] % 156);
                    Test.iArrFld[(i23 >>> 1) % N] = (i17 % i16);
                } catch (ArithmeticException a_e) {}
                d3 -= d3;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
