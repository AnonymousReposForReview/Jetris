package tests.javafuzzer3094;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:35:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3636396229L;
    public static int iFld=-80;
    public static boolean bFld=false;
    public static short sFld=-26293;
    public static double dFld=-71.120246;
    public static byte byFld=-113;
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13246);
        FuzzerUtils.init(Test.iArrFld1, -209);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, long l2) {

        int i6=5, i7=64125, i8=-62082, i9=2906;
        float f1=1.635F;
        double d1=0.22365;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 3919471793876422906L);

        for (i6 = 6; i6 < 264; ++i6) {
            l2 += Test.instanceCount;
            Test.iFld >>>= -9;
            switch ((i6 % 8) + 2) {
            case 2:
                f1 = i6;
                d1 = l2;
                break;
            case 3:
                i7 <<= i7;
                Test.iArrFld[i6][i6 + 1] *= (int)-1332946446L;
                break;
            case 4:
                for (i8 = 1; i8 < 6; ++i8) {
                    try {
                        i9 = (Test.iFld % i6);
                        Test.iArrFld[i8][i6] = (i8 % Test.iArrFld[i6][i6]);
                        Test.iFld = (Test.iArrFld[i6 + 1][i8] % i6);
                    } catch (ArithmeticException a_e) {}
                    if (Test.bFld) {
                    } else {
                        i9 += (((i8 * i7) + l1) - i9);
                        i9 -= i9;
                    }
                    lArr2[i6 - 1] = i9;
                    i7 += (((i8 * i9) + l2) - Test.iFld);
                }
                break;
            case 5:
                lArr2[i6 - 1] *= Test.iFld;
                break;
            case 6:
                f1 = i6;
            case 7:
                if (i8 != 0) {
                    vMeth1_check_sum += l1 + l2 + i6 + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i8
                        + i9 + FuzzerUtils.checkSum(lArr2);
                    return;
                }
                break;
            case 8:
                i9 *= (int)d1;
                break;
            case 9:
                i9 -= (int)f1;
            default:
                Test.iFld = i9;
            }
        }
        vMeth1_check_sum += l1 + l2 + i6 + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i8 + i9 +
            FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth(int i4, int i5, float f) {

        int i11=-55, i12=-13, i13=-198;
        long l3=-14L;

        vMeth1(Test.instanceCount, Test.instanceCount);
        Test.iArrFld[(i5 >>> 1) % N][(i4 >>> 1) % N] <<= (int)-11L;
        i5 += i4;
        for (i11 = 359; i11 > 4; i11--) {
            f *= Test.instanceCount;
            switch (((i11 >>> 1) % 4) + 17) {
            case 17:
                l3 -= 85L;
                break;
            case 18:
                Test.bFld = Test.bFld;
                break;
            case 19:
                Test.instanceCount = l3;
                Test.iArrFld1[i11 + 1] -= i12;
                Test.sFld = (short)-76;
                break;
            case 20:
                i13 = 5;
                while ((i13 -= 2) > 0) {
                    i5 *= (int)f;
                    Test.dFld = 27244;
                }
                if (i5 != 0) {
                    vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i11 + i12 + l3 + i13;
                    return;
                }
                break;
            default:
                Test.iFld = i5;
            }
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i11 + i12 + l3 + i13;
    }

    public static int iMeth(long l, int i, int i1) {

        double d=-43.111202;
        int i2=-11068, i3=-63;
        float f2=-92.425F;
        boolean bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 11L);

        bArr[(Test.iFld >>> 1) % N] = ((d - (Test.iFld * Test.iFld)) < (-(i = Test.iFld)));
        l >>= lArr1[(i >>> 1) % N];
        lArr1[(i >>> 1) % N] = i1;
        for (i2 = 9; 285 > i2; ++i2) {
            lArr1[i2 + 1] *= i;
        }
        vMeth(i3, i3, f2);
        i = i3;
        Test.iArrFld[(i >>> 1) % N][(Test.iFld >>> 1) % N] = (int)7228268870969745844L;
        f2 += 1;
        f2 -= f2;
        long meth_res = l + i + i1 + Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=65496, i15=14, i16=1, i17=-106, i18=-102, i19=81, i20=1, i21=-17;
        float f3=-1.863F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -863L);

        lArr[(Test.iFld >>> 1) % N] = (Test.iFld + (lArr[(Test.iFld >>> 1) % N] - iMeth(Test.instanceCount, 13,
            Test.iFld)));
        Test.dFld = -30566;
        Test.instanceCount |= -1654358035L;
        for (i14 = 7; 362 > i14; ++i14) {
            f3 += (i14 * i14);
            Test.dFld *= Test.instanceCount;
            i16 = 1;
            while (++i16 < 71) {
                Test.iFld += (((i16 * f3) + i15) - i15);
                Test.iFld /= (int)(i14 | 1);
                Test.iFld += (int)(242L + (i16 * i16));
            }
            for (i17 = i14; i17 < 71; ++i17) {
                switch (((i15 >>> 1) % 2) + 4) {
                case 4:
                    Test.instanceCount += (i17 * i17);
                    break;
                case 5:
                    for (i19 = 1; 1 > i19; ++i19) {
                        if (true) continue;
                        Test.instanceCount <<= Test.sFld;
                    }
                    Test.instanceCount = i15;
                    if (Test.bFld) break;
                    Test.iArrFld[(i19 >>> 1) % N][i14 - 1] = i18;
                    break;
                }
                i21 = 1;
                while ((i21 += 3) < 1) {
                    Test.instanceCount = i17;
                    i15 -= 81;
                    Test.byFld = (byte)63;
                    Test.dFld = i16;
                    i20 += i21;
                    try {
                        Test.iArrFld1[i17 - 1] = (210 % i18);
                        Test.iFld = (-197279484 / i17);
                        Test.iArrFld[i14][i21 - 1] = (-19436 / i19);
                    } catch (ArithmeticException a_e) {}
                    i15 += i21;
                    lArr[i17 - 1] -= -788167567L;
                    Test.instanceCount = Test.instanceCount;
                }
                i18 += -179;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
