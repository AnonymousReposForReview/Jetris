package tests.javafuzzer3393;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:18:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1244716154L;
    public static byte byFld=98;
    public static float fFld=0.815F;
    public static float fFld1=50.124F;
    public static int iFld=-3;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -163L);
        FuzzerUtils.init(Test.iArrFld, 240);
        FuzzerUtils.init(Test.dArrFld, -2.3248);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, double d1, int i7) {

        int i8=-189, i9=-5, i10=49993, i11=5, i12=-23540, iArr1[]=new int[N];
        float f1=-57.107F;
        short s=-14561, sArr[]=new short[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -1698235986L);
        FuzzerUtils.init(sArr, (short)-20806);
        FuzzerUtils.init(iArr1, -230);

        for (i8 = 6; i8 < 258; i8++) {
            d1 = 83.147F;
            Test.instanceCount ^= i9;
            lArr = lArr;
            sArr[i8] += (short)f;
            Test.instanceCount += i8;
        }
        switch (((-155 >>> 1) % 4) + 8) {
        case 8:
            for (f1 = 256; 7 < f1; f1--) {
                Test.instanceCount += (long)d1;
            }
            s += (short)-84;
            iArr1[(i9 >>> 1) % N] -= Test.byFld;
            break;
        case 9:
            i10 -= 7516;
            break;
        case 10:
            for (i11 = 7; i11 < 196; ++i11) {
                if (true) continue;
                iArr1[i11 + 1] += (int)f;
            }
            break;
        case 11:
            lArr = lArr;
            break;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i7 + i8 + i9 +
            Float.floatToIntBits(f1) + i10 + s + i11 + i12 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static double dMeth(long l) {

        double d=-1.116975;
        int i2=-50212, i3=-23957, i4=42, i5=12, i6=2, i13=-7, i14=-13, iArr[][]=new int[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(fArr, -2.796F);

        d /= ((i2 = (iArr[(i2 >>> 1) % N][(i2 >>> 1) % N]++)) | 1);
        l = (i2--);
        switch ((((i2 * i2) >>> 1) % 4) + 109) {
        case 109:
            for (i3 = 7; i3 < 289; i3++) {
                for (i5 = 1; i5 < 6; i5++) {
                    vMeth1(Test.fFld, d, i3);
                    switch ((i3 % 2) + 17) {
                    case 17:
                        i4 += i5;
                        i2 ^= i5;
                        switch ((((i3 >>> 1) % 4) * 5) + 88) {
                        case 93:
                            for (i13 = 2; i13 > 1; i13 -= 2) {
                                i2 >>= (int)Test.instanceCount;
                                Test.lArrFld[i13 - 1] = (long)Test.fFld;
                            }
                            Test.byFld = (byte)-110L;
                        case 91:
                            i4 += (int)Test.fFld1;
                            break;
                        case 108:
                            i2 *= i5;
                        case 97:
                        }
                        break;
                    case 18:
                        i14 %= (int)((long)(Test.fFld1) | 1);
                        break;
                    default:
                        try {
                            i6 = (iArr[i3 + 1][i5 - 1] % iArr[i3][i3 + 1]);
                            i2 = (i4 / iArr[i3 + 1][i3 - 1]);
                            i14 = (i6 % -131);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
            break;
        case 110:
            iArr[(i5 >>> 1) % N] = iArr[(i5 >>> 1) % N];
        case 111:
            Test.fFld1 -= 6;
        case 112:
            d = i2;
            break;
        default:
            fArr[(42138 >>> 1) % N] = i3;
        }
        long meth_res = l + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + i13 + i14 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i, int i1) {


        i1 = (i1--);
        i1 -= (int)(((i1 - i) - dMeth(Test.instanceCount)) - i);
        i = -50526;
        vMeth_check_sum += i + i1;
    }

    public void mainTest(String[] strArr1) {

        int i15=-7231, i16=-100, i17=-47512, i18=231, i19=-13, i20=-10, iArr2[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        double d2=-117.46026;
        float fArr1[]=new float[N], fArr2[][]=new float[N][N];

        FuzzerUtils.init(iArr2, -28878);
        FuzzerUtils.init(fArr1, -22.834F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr2, 16.595F);

        vMeth(52205, Test.iFld);
        for (i15 = 4; i15 < 183; ++i15) {
            iArr2[i15 + 1] = (int)Test.instanceCount;
            for (i17 = 140; i17 > 5; i17--) {
                Test.instanceCount -= i16;
                Test.instanceCount >>= Test.iFld;
                switch (((i15 >>> 1) % 8) + 93) {
                case 93:
                    Test.iFld = i16;
                    Test.instanceCount -= i17;
                    if (b) {
                        Test.iArrFld = FuzzerUtils.int2array(N, (int)0);
                    }
                    break;
                case 94:
                    Test.iFld = i15;
                    Test.fFld = i15;
                    i18 = Test.iFld;
                    break;
                case 95:
                    Test.byFld = (byte)Test.instanceCount;
                    break;
                case 96:
                    if (b) {
                        Test.instanceCount >>>= i18;
                        for (i19 = 1; 2 > i19; i19++) {
                            Test.instanceCount += (((i19 * Test.instanceCount) + i20) - Test.instanceCount);
                            fArr1[i19 - 1] = i18;
                            bArr[i15 + 1] = b;
                            Test.dArrFld[i17 + 1] = Test.instanceCount;
                            bArr[i15] = b;
                            Test.dArrFld = Test.dArrFld;
                        }
                        i16 -= i17;
                        switch (((i15 % 5) * 5) + 72) {
                        case 88:
                            if (b) {
                                Test.instanceCount -= i20;
                                Test.iFld = 0;
                                i16 += (int)Test.fFld1;
                            } else {
                                Test.fFld = i18;
                            }
                        case 85:
                            i16 += (i17 * Test.fFld);
                        case 78:
                            i20 -= Test.iFld;
                        case 84:
                            Test.instanceCount += Test.iFld;
                            break;
                        case 82:
                            d2 = d2;
                            break;
                        default:
                            i16 += i18;
                        }
                    } else {
                        d2 += i16;
                    }
                case 97:
                    Test.instanceCount = i16;
                    break;
                case 98:
                    fArr2 = fArr2;
                    break;
                case 99:
                    i18 += (((i17 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                    break;
                case 100:
                    iArr2[i17] = Test.byFld;
                    break;
                default:
                    fArr2[i15][i17] = Test.iFld;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
