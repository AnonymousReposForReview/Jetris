package tests.javafuzzer944;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:51:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-154L;
    public static double dFld=0.86576;
    public boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -165);
        FuzzerUtils.init(Test.lArrFld, -59348L);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=108, i6=-14, i7=-12, i8=9805, i9=0, i10=12458, i11=28955;
        long l=-40971L, lArr[]=new long[N];
        double d=-2.127553;

        FuzzerUtils.init(lArr, -5L);

        Test.iArrFld[(i5 >>> 1) % N] += (int)Test.instanceCount;
        lArr[(i5 >>> 1) % N] += i5;
        for (i6 = 2; i6 < 333; ++i6) {
            i5 = i8;
            Test.instanceCount |= Test.instanceCount;
            lArr[i6 - 1] += i5;
            i9 = 1;
            while (++i9 < 5) {
                for (l = 1; l < 1; ++l) {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-138);
                }
                for (d = 1; d < 1; ++d) {
                    i10 += (int)(-3151321844L + (d * d));
                    Test.instanceCount -= i10;
                    if (true) break;
                    i5 += (int)(d * d);
                    i7 ^= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + l + i10 + Double.doubleToLongBits(d) + i11 +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i3, float f1, int i4) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -68.2F);

        vMeth();
        i4 = (int)Test.instanceCount;
        fArr = fArr;
        long meth_res = i3 + Float.floatToIntBits(f1) + i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(float f, int i2) {

        int i12=-44, i13=-39391, i14=0, i15=48862, i16=-964;

        i2 = (i2 + iMeth(i2, f, i2));
        Test.iArrFld[(-200 >>> 1) % N] = i2;
        i12 = 1;
        do {
            for (i13 = i12; i13 < 11; i13++) {
                f = i13;
                try {
                    i14 = (i14 % i2);
                    i14 = (1865821845 / i13);
                    i14 = (Test.iArrFld[i12 - 1] / 159);
                } catch (ArithmeticException a_e) {}
                for (i15 = 1; i15 < 1; i15++) {
                    Test.instanceCount += i2;
                    Test.instanceCount += (-2 + (i15 * i15));
                    i2 += (((i15 * f) + i2) - Test.instanceCount);
                    Test.iArrFld[i15] += (int)Test.instanceCount;
                    i14 += (((i15 * Test.instanceCount) + i2) - f);
                    i2 <<= (int)Test.instanceCount;
                    Test.dFld = Test.instanceCount;
                }
                Test.instanceCount = i14;
            }
        } while (++i12 < 148);
        long meth_res = Float.floatToIntBits(f) + i2 + i12 + i13 + i14 + i15 + i16;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i1=92, i17=-10, i19=-115, i20=10, i21=-78, i22=-136, i23=179, i24=68;
        float f2=1.700F, fArr1[]=new float[N];
        byte by=-75, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-57);
        FuzzerUtils.init(fArr1, 0.613F);

        for (i = 9; 222 > i; i++) {
            if (dMeth(f2, i17) <= Test.instanceCount) continue;
            i1 -= (int)Test.dFld;
            f2 *= by;
            by += (byte)(394454246L + (i * i));
            f2 *= f2;
            i1 += (int)(2.888F + (i * i));
        }
        Test.lArrFld[(i17 >>> 1) % N] >>= 31L;
        Test.lArrFld = FuzzerUtils.long1array(N, (long)-4228747998376144394L);
        f2 = f2;
        for (i19 = 8; 236 > i19; ++i19) {
            i20 -= i1;
            i17 += (i19 * i19);
            byArr = byArr;
            for (i21 = 110; i21 > 5; i21--) {
                for (i23 = 1; i23 < 2; ++i23) {
                    fArr1[i19] *= (float)Test.dFld;
                    Test.instanceCount += i23;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount += i23;
                }
                if (bFld) {
                    i20 = (int)Test.instanceCount;
                    Test.lArrFld[i21 + 1] += (long)Test.dFld;
                } else if (bFld) {
                    Test.iArrFld[i19 - 1] <<= by;
                    Test.instanceCount *= (long)Test.dFld;
                    Test.lArrFld = Test.lArrFld;
                    by <<= (byte)i22;
                } else if (bFld) {
                    Test.instanceCount %= (Test.instanceCount | 1);
                    Test.dFld += f2;
                    i24 >>>= 13;
                } else {
                    Test.instanceCount -= i20;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
