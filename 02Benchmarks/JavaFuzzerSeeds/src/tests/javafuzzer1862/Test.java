package tests.javafuzzer1862;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:46:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1551974494223713708L;
    public static int iFld=179;
    public static float fFld=-1.577F;
    public volatile short sFld=12954;
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, double d1, int i7) {

        byte by=-16;
        int i8=213, i9=-26646, i10=-24047, i11=-40973, iArr[]=new int[N];
        float f1=1.218F, f2=7.794F;

        FuzzerUtils.init(iArr, 2);

        by = (byte)Test.instanceCount;
        Test.instanceCount += i7;
        i8 = 1;
        while (++i8 < 358) {
            i9 = 1;
            while (++i9 < 5) {
                f1 = 1;
                do {
                    i6 >>= (int)53807L;
                    f2 = Test.iFld;
                } while (++f1 < 1);
                iArr[i9 - 1] += (int)d1;
                d1 += i7;
                for (i10 = i9; i10 < 1; ++i10) {
                    i11 += i11;
                    i6 += (int)(1529528191552447980L + (i10 * i10));
                    Test.iFld += Test.iFld;
                    try {
                        i11 = (i6 % 243);
                        i11 = (i6 % Test.iFld);
                        i6 = (iArr[i8] % -120);
                    } catch (ArithmeticException a_e) {}
                    i6 += (int)(37.371F + (i10 * i10));
                }
            }
        }
        vMeth2_check_sum += i6 + Double.doubleToLongBits(d1) + i7 + by + i8 + i9 + Float.floatToIntBits(f1) +
            Float.floatToIntBits(f2) + i10 + i11 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        double d2=96.43493;

        vMeth2(Test.iFld, d2, 244);
        vMeth1_check_sum += Double.doubleToLongBits(d2);
    }

    public static void vMeth() {

        int i4=44768, i5=-1, i12=0, i13=-13, i14=-1, i15=-61302, iArr1[]=new int[N];
        boolean b=false;
        double d3=33.53364;
        byte by1=93;

        FuzzerUtils.init(iArr1, 98);

        for (i4 = 12; i4 < 206; i4++) {
            if (b) break;
            vMeth1();
            i5 *= i5;
            for (i12 = 1; i12 < 8; ++i12) {
                short s=6817;
                for (i14 = 1; i14 < 2; ++i14) {
                    i15 *= (int)d3;
                    i13 = (int)Test.instanceCount;
                }
                i13 += i12;
                Test.fFld = i5;
                d3 -= i14;
                s |= (short)-14710;
                if (b) break;
            }
            try {
                i13 = (-723111612 / i13);
                iArr1[i4 + 1] = (i14 / 18951);
                i13 = (152 / i12);
            } catch (ArithmeticException a_e) {}
            by1 *= (byte)Test.iFld;
        }
        vMeth_check_sum += i4 + i5 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d3) + by1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=4893, i1=7, i2=-121, i3=-45521, i16=3, i17=-11120, i18=10, i19=-226, iArr2[]=new int[N];
        double d=-1.107647, dArr[]=new double[N];
        float f=1.226F;

        FuzzerUtils.init(iArr2, -9);
        FuzzerUtils.init(dArr, -108.69399);

        for (i = 10; i < 305; i++) {
            d -= i1;
            for (i2 = 3; i2 < 85; ++i2) {
                i3 >>= (int)(((d++) - (f--)) * (lArrFld[i - 1]--));
                switch ((i2 % 2) + 67) {
                case 67:
                    f = (++f);
                    vMeth();
                    for (i16 = 1; 2 > i16; i16++) {
                        i17 -= i17;
                        iArr2 = iArr2;
                        i1 += (i16 - i16);
                        iArr2[i - 1] = (int)0L;
                    }
                    break;
                case 68:
                }
                Test.instanceCount -= Test.instanceCount;
                Test.fFld += (((i2 * Test.instanceCount) + i1) - sFld);
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.instanceCount -= i;
                    switch ((i % 9) + 19) {
                    case 19:
                        Test.instanceCount -= i2;
                        iArr2[i18] -= i18;
                        break;
                    case 20:
                        i3 = i18;
                        i1 += i18;
                        i3 |= i3;
                        break;
                    case 21:
                    case 22:
                        i3 -= (int)Test.instanceCount;
                    case 23:
                        dArr[i - 1] += i1;
                        i3 -= (int)-6783215425753412911L;
                        i19 -= (int)Test.instanceCount;
                        break;
                    case 24:
                        Test.fFld = -252;
                        break;
                    case 25:
                        i1 >>= -4;
                        Test.instanceCount += i18;
                        break;
                    case 26:
                        d += Test.iFld;
                        break;
                    case 27:
                        Test.instanceCount -= i2;
                        break;
                    default:
                        Test.instanceCount += i18;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
