package tests.javafuzzer3248;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:35:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3304609333561419590L;
    public static short sFld=-27197;
    public static byte byFld=39;
    public static double dFld=7.61130;
    public static boolean bFld=true;
    public static volatile float fFld=40.820F;
    public static long lFld=197L;
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];
    public double dArrFld1[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -126.435F);
        FuzzerUtils.init(Test.dArrFld, 1.45099);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, long l2) {

        float f=1.419F;
        int i8=10, i9=-1, i10=206, i11=-12, i12=9455, i13=227, iArr[]=new int[N];
        double d1=-85.54998;

        FuzzerUtils.init(iArr, -9);

        f -= 56;
        Test.instanceCount = i7;
        i8 = 1;
        do {
            l2 += 2662;
            i7 >>= i8;
            for (i9 = 9; i9 > 1; i9 -= 3) {
                i7 += (int)l2;
            }
            Test.instanceCount = Test.sFld;
            iArr[i8 + 1] <<= i7;
        } while (++i8 < 186);
        for (d1 = 5; d1 < 348; d1++) {
            for (i12 = 1; i12 < 5; i12 += 3) {
                double d2=0.118912;
                i13 += (int)l2;
                Test.instanceCount = Test.sFld;
                i13 = i12;
                d2 += i10;
            }
        }
        vMeth1_check_sum += i7 + l2 + Float.floatToIntBits(f) + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12
            + i13 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l1, int i6) {

        float f1=-1.434F;
        int i14=7928, i15=7, i16=44, i17=61, i18=-75, i19=-14;
        long l3=-13L;
        double d3=-2.120928, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.42997);

        vMeth1(i6, Test.instanceCount);
        Test.instanceCount <<= i6;
        f1 = i6;
        i14 = 1;
        while (++i14 < 167) {
            for (l3 = 1; l3 < 9; l3++) {
                dArr[(int)(l3 + 1)] *= i15;
                Test.instanceCount >>= i14;
                switch ((i14 % 8) + 43) {
                case 43:
                    for (i16 = 1; 2 > i16; i16++) {
                        i6 = i16;
                        l1 = Test.instanceCount;
                        i17 *= (int)l3;
                    }
                    break;
                case 44:
                    for (i18 = 1; i18 < 2; ++i18) {
                        i15 ^= i6;
                        i19 -= i18;
                    }
                    break;
                case 45:
                    l1 -= i19;
                case 46:
                    d3 = i17;
                    break;
                case 47:
                    l1 += (l3 * l3);
                    break;
                case 48:
                    Test.instanceCount = Test.byFld;
                case 49:
                    i17 &= i6;
                    break;
                case 50:
                    i17 |= (int)64885L;
                    break;
                }
            }
        }
        long meth_res = l1 + i6 + Float.floatToIntBits(f1) + i14 + l3 + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i4, int i5) {

        int i20=22051, i21=-8, i22=59639, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 208L);
        FuzzerUtils.init(iArr1, 17771);

        i4 = iMeth(Test.instanceCount, -169);
        Test.sFld -= (short)Test.dFld;
        Test.instanceCount = i5;
        i20 = 142;
        while (--i20 > 0) {
            i4 >>= 63814;
            switch (((i20 % 6) * 5) + 69) {
            case 78:
                i5 += (-54157 + (i20 * i20));
                Test.bFld = Test.bFld;
                Test.fArrFld[i20 - 1] *= Test.instanceCount;
                break;
            case 90:
                switch ((i20 % 2) + 90) {
                case 90:
                    for (i21 = 1; i21 < 11; i21++) {
                        lArr1[i21] = (long)Test.dFld;
                        Test.fFld = i5;
                        if (Test.bFld) break;
                        i22 += i4;
                    }
                    break;
                case 91:
                    iArr1[i20 - 1] += (int)Test.fFld;
                default:
                    iArr1[i20 - 1] = i5;
                }
                break;
            case 96:
                Test.instanceCount += (19112 + (i20 * i20));
                break;
            case 71:
                Test.fFld *= i22;
                break;
            case 76:
                if (Test.bFld) break;
                break;
            case 85:
                Test.bFld = Test.bFld;
                break;
            }
        }
        vMeth_check_sum += l + i4 + i5 + i20 + i21 + i22 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-65306, i1=-10, i2=222, i3=52208, i23=0, i24=-1846, i25=-2, iArr2[]=new int[N];
        double d=-71.44916;
        long l4=-4L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -23097L);
        FuzzerUtils.init(iArr2, -38746);

        for (i = 2; i < 192; i += 2) {
            i1 = (int)((lArr[i]--) - i1);
            switch ((i % 7) + 48) {
            case 48:
                for (i2 = 264; 4 < i2; --i2) {
                    Test.sFld = (short)(((i2 * i2) + -47704) - (Test.instanceCount = (lArr[i]++)));
                    i3 -= (int)(--d);
                    vMeth(-6385137084736162614L, i3, 125);
                    Test.instanceCount = i;
                    for (l4 = 1; l4 < 2; l4++) {
                        iArr2[i2] += -29352;
                        i1 >>>= i2;
                        Test.dArrFld[(int)(l4 - 1)] += 32837;
                        Test.bFld = false;
                        Test.fFld += (((l4 * i3) + i) - i1);
                        Test.instanceCount += i23;
                        iArr2[(int)(l4)] += Test.sFld;
                        Test.dFld = Test.instanceCount;
                        Test.instanceCount = (long)Test.dFld;
                    }
                    i3 -= 21;
                }
                if (Test.bFld) {
                    Test.fArrFld[i] %= (i23 | 1);
                    Test.instanceCount += Test.lFld;
                } else if (Test.bFld) {
                    Test.lFld = i1;
                } else {
                    Test.lFld = l4;
                    iArr2[i - 1] += (int)Test.lFld;
                    i3 += (i * l4);
                }
            case 49:
                i23 *= (int)Test.lFld;
                for (i24 = 7; i24 < 264; i24++) {
                    i3 >>= i;
                    i3 = i23;
                }
            case 50:
                i25 = i25;
                break;
            case 51:
                dArrFld1 = FuzzerUtils.double2array(N, (double)-12.28401);
                break;
            case 52:
                Test.lFld = i24;
                break;
            case 53:
                iArr2[i] = i2;
            case 54:
                i3 += i;
            default:
                iArr2[i + 1] = 13;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
