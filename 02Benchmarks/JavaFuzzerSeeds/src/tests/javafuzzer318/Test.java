package tests.javafuzzer318;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:44:50 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8L;
    public boolean bFld=false;
    public static byte byFld=76;
    public static double dFld=1.91160;
    public static volatile boolean bFld1=false;
    public static long lFld=-26684L;
    public static float fFld=49.818F;
    public static int iFld=-219;
    public long lFld1=14L;
    public float fFld1=14.126F;

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i11, int i12, long l) {

        int i13=226, i14=40087, i15=-27029, i16=-114, i17=-183, iArr[]=new int[N];
        double d=111.67506;
        boolean b=false;

        FuzzerUtils.init(iArr, 254);

        i11 <<= i12;
        for (i13 = 200; i13 > 2; i13--) {
            iArr = iArr;
            d *= Test.byFld;
            i15 = 1;
            while (++i15 < 8) {
                for (i16 = 1; i16 < 1; ++i16) {
                    float f=-1.41F;
                    iArr[i15] ^= i17;
                    i17 |= i14;
                    if (b) {
                        l -= (long)f;
                        i17 += (int)d;
                    } else if (b) {
                        iArr[i13] ^= (int)l;
                    } else {
                        Test.instanceCount *= i17;
                        l <<= -21997;
                        Test.instanceCount += (i16 + i16);
                    }
                }
            }
        }
        long meth_res = i11 + i12 + l + i13 + i14 + Double.doubleToLongBits(d) + i15 + i16 + i17 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i4, int i5, int i6) {

        int i7=-105, i8=61, i9=222, i10=55520, i18=3, i19=32498, i20=-2, i21=-11, iArr1[]=new int[N];
        double d1=109.55281, d2=2.73159;
        long l1=4066605085L;
        short s=-9038;
        float f1=2.710F;

        FuzzerUtils.init(iArr1, 16501);

        for (i7 = 3; i7 < 314; ++i7) {
            i5 += i7;
            i9 = 1;
            do {
                i10 -= iMeth1(i4, i9, Test.instanceCount);
                iArr1 = iArr1;
                iArr1[i7 - 1] -= -208;
            } while ((i9 += 3) < 5);
        }
        for (i18 = 3; i18 < 337; ++i18) {
            for (d1 = 1; d1 < 5; d1++) {
                for (l1 = 2; 1 < l1; l1 -= 3) {
                    s = (short)l1;
                    i20 += i10;
                    s >>= (short)i6;
                }
                f1 += (float)(((d1 * f1) + i21) - f1);
                iArr1[(int)(d1 - 1)] -= (int)l1;
                d2 *= i4;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i18 + i19 + Double.doubleToLongBits(d1) + i20 + l1 + i21 +
            s + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i22=38434, i23=-22551, i24=-7, i25=17795, i26=4, iArr2[]=new int[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 87.43014);
        FuzzerUtils.init(lArr, 19846L);
        FuzzerUtils.init(iArr2, 17785);

        dArr[(i2 >>> 1) % N] -= Math.min((int)(lMeth(i2, 10, i2) - i2), i1);
        for (i22 = 13; i22 < 310; i22++) {
            lArr[i22] += i2;
            if (i22 != 0) {
            }
            i23 = Test.byFld;
            iArr2[i22 + 1] = i1;
            i23 %= (int)((long)(Test.dFld) | 1);
            try {
                iArr2[i22 - 1] = (i23 / i2);
                i3 = (i2 % -48657);
                i3 = (i22 % -27777);
            } catch (ArithmeticException a_e) {}
            for (i24 = 1; i24 < 6; i24++) {
                if (Test.bFld1) break;
                switch (((i25 >>> 1) % 2) + 95) {
                case 95:
                case 96:
                    i2 >>= i2;
                    break;
                }
                i26 -= i23;
                Test.lFld = i24;
                iArr2[i24 - 1] &= i1;
            }
        }
        long meth_res = i1 + i2 + i3 + i22 + i23 + i24 + i25 + i26 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-74, i27=142, i28=-4, i29=-14, i30=8, i31=-9390, i32=12, i33=52510;
        double d3=-34.18952;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-26007);

        bFld = bFld;
        sArr[(i >>> 1) % N][(i >>> 1) % N] |= (short)Math.min(iMeth(i, i, i), i);
        Test.fFld -= Test.fFld;
        for (i27 = 6; i27 < 143; ++i27) {
            i28 += i27;
        }
        if (Test.bFld1) {
            i28 += i28;
            for (i29 = 2; i29 < 186; i29++) {
                Test.fFld -= 27876;
                Test.iFld = i30;
                switch ((i29 % 2) + 23) {
                case 23:
                    Test.lFld += (i29 * i29);
                    i31 = 1;
                    do {
                        Test.byFld *= (byte)i29;
                    } while (++i31 < 136);
                    break;
                case 24:
                    for (i32 = 6; i32 < 136; i32++) {
                        Test.iFld = i30;
                    }
                    Test.iFld >>>= Test.byFld;
                    bFld = Test.bFld1;
                    break;
                }
                i33 *= i33;
                i30 += i33;
                i28 += (((i29 * i29) + i27) - i);
            }
        } else if (bFld) {
            Test.byFld <<= (byte)lFld1;
        } else {
            d3 = 1;
            while (++d3 < 291) {
                i33 += -149;
                i += (int)d3;
                Test.iFld *= 10;
                i33 = i32;
                fFld1 = 159;
                bFld = bFld;
            }
        }
        i33 = (int)Test.fFld;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
