package tests.javafuzzer1828;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:05:41 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=42L;
    public static short sFld=-5077;
    public static int iFld=-2;
    public double dFld=0.32730;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 197L);
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i4=19959, i5=-9654, i6=16, i7=5, i8=8, i9=41510, iArr2[]=new int[N];
        float f=-64.650F;
        boolean b=true;
        double d1=-2.82051, dArr[]=new double[N];
        byte by1=-14;

        FuzzerUtils.init(dArr, -66.113517);
        FuzzerUtils.init(iArr2, 9);

        for (i4 = 3; i4 < 158; i4++) {
            for (i6 = i4; 10 > i6; i6++) {
                i7 += i6;
                f += Test.instanceCount;
            }
            b = true;
            i5 *= (int)d1;
            dArr[i4 + 1] -= f;
            Test.instanceCount = 12767;
            if (b) break;
            switch (((i4 % 2) * 5) + 4) {
            case 11:
                iArr2[(i4 >>> 1) % N] *= i6;
                for (i8 = 1; i8 < 10; i8++) {
                    iArr2[i4 + 1] += i4;
                    Test.instanceCount -= i8;
                    i5 += (i8 * i8);
                }
                break;
            case 7:
                Test.sFld += (short)i4;
                break;
            default:
                by1 %= (byte)(i9 | 1);
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i8
            + i9 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth1(long l1, int i3, byte by) {

        int i10=-14, i11=-64106, i12=-162, i13=-230, iArr3[]=new int[N];
        float f1=-17.759F;
        double d2=2.121549;

        FuzzerUtils.init(iArr3, 2);

        vMeth();
        i10 = 1;
        while (++i10 < 327) {
            iArr3[i10] -= by;
            f1 -= (float)d2;
        }
        Test.instanceCount >>>= i10;
        Test.instanceCount = l1;
        i11 = 350;
        while (--i11 > 0) {
            i3 = (int)1.231F;
            for (i12 = 1; i12 < 5; ++i12) {
                Test.lArrFld[i12] -= i13;
                i13 >>= i13;
                switch ((i11 % 2) + 75) {
                case 75:
                    i3 = i13;
                    i3 = i12;
                    break;
                case 76:
                    i13 >>= -253;
                }
            }
        }
        long meth_res = l1 + i3 + by + i10 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr3);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=-62895, i1=307, i2=-55661, iArr[]=new int[N], iArr1[][]=new int[N][N];
        long l=-3789236035511334771L;
        double d=0.123032;
        byte by2=60;

        FuzzerUtils.init(iArr, -8504);
        FuzzerUtils.init(iArr1, -59079);

        for (i = 18; i < 332; ++i) {
            if ((((i >> Test.instanceCount) - iArr[i - 1]) - (--Test.sFld)) == (l--)) {
                i1 %= (int)(Math.min(Long.reverseBytes(i - 11L), ++l) | 1);
                d += (--Test.instanceCount);
            } else {
                if (i1 != 0) {
                }
                i2 = 1;
                do {
                    if (i2 != 0) {
                    }
                    if (i2 != 0) {
                    }
                    iArr1 = iArr1;
                    Test.instanceCount += i2;
                    l = Math.max(-iMeth1(l, i1, by2), 6);
                    i1 = i;
                } while (++i2 < 5);
                i1 = i1;
                try {
                    iArr1[i][i] = (i2 % i2);
                    i1 = (62388 % i1);
                    i1 = (-55 % i);
                } catch (ArithmeticException a_e) {}
            }
            i1 >>= i1;
        }
        long meth_res = i + i1 + l + Double.doubleToLongBits(d) + i2 + by2 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=-38803, i15=44, i16=6940, i17=6, i18=-17409, i19=12, i20=-155, i21=-50972, i22=5, i23=-91;
        short s=3959;
        float f2=0.166F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 1.125457);

        switch ((((iMeth() >>> 1) % 4) * 5) + 123) {
        case 137:
            Test.instanceCount >>= i14;
            for (i15 = 3; i15 < 139; i15++) {
                for (i17 = 6; 184 > i17; ++i17) {
                    Test.instanceCount *= Test.sFld;
                    i14 = i16;
                    i14 += i17;
                    for (i19 = 1; i19 < 2; ++i19) {
                        Test.instanceCount &= i15;
                    }
                }
                i20 = i16;
                i21 = 1;
                do {
                    for (i22 = 1; i22 < 1; ++i22) {
                        Test.sFld += (short)i22;
                        try {
                            i16 = (i15 % -38862);
                            i14 = (73 / Test.iFld);
                            Test.iArrFld[i22 + 1] = (-10587 % Test.iArrFld[i21]);
                        } catch (ArithmeticException a_e) {}
                        i14 <<= s;
                        dFld -= Test.instanceCount;
                        i20 -= (int)Test.instanceCount;
                    }
                } while (++i21 < 184);
                dFld *= -2.725F;
            }
            break;
        case 133:
            Test.iArrFld[(i23 >>> 1) % N] += (int)f2;
            Test.iFld *= 9;
            break;
        case 134:
            Test.lArrFld[(98 >>> 1) % N] = i20;
            break;
        case 127:
            dFld = i23;
            i20 -= (int)Test.instanceCount;
            i14 += (int)Test.instanceCount;
            break;
        default:
            Test.iArrFld[(4 >>> 1) % N] -= i15;
        }
        dFld -= Test.instanceCount;
        Test.iArrFld = Test.iArrFld;
        i20 = i15;
        dArr1[(i14 >>> 1) % N] *= f2;
        i14 <<= 9957;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
