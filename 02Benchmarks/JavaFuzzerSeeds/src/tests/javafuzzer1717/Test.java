package tests.javafuzzer1717;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:29:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public boolean bFld=false;
    public static int iFld=13;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8811);
        FuzzerUtils.init(Test.lArrFld, 36440L);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4, float f) {

        double d=-98.65955, d1=1.32682;
        int i5=5671, i6=122, i7=-5, i8=143, i9=32642;
        boolean b=false;
        byte by=111;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-3707);

        i4 = i3;
        for (d = 4; d < 166; ++d) {
            switch ((((i5 >>> 1) % 6) * 5) + 21) {
            case 24:
                for (i6 = 1; 10 > i6; ++i6) {
                    d1 = Test.instanceCount;
                    for (i8 = i6; 2 > i8; ++i8) {
                        d1 += 60231;
                        try {
                            i5 = (Test.iArrFld[i6 + 1] / -58);
                            i3 = (i6 % -59298);
                            Test.iArrFld[i6 - 1] = (i7 % 33);
                        } catch (ArithmeticException a_e) {}
                        if (b) {
                            d1 = d;
                        } else if (b) {
                            f += (((i8 * Test.instanceCount) + i6) - i9);
                            sArr[i6][i8] = (short)i5;
                            i5 = (int)Test.instanceCount;
                            i5 = i6;
                        } else if (b) {
                            i4 += i6;
                        } else {
                            f *= i8;
                        }
                    }
                }
                break;
            case 26:
                i4 >>= i8;
            case 32:
                Test.instanceCount <<= i7;
                break;
            case 46:
                i4 = (int)Test.instanceCount;
            case 42:
                Test.instanceCount -= i6;
                break;
            case 23:
                by = (byte)i9;
                break;
            default:
                i5 = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i3 + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i5 + i6 + i7 +
            Double.doubleToLongBits(d1) + i8 + i9 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {

        int i1=22946, i2=-14646, i11=2, i12=12, i13=64212;
        float f1=1.388F;
        double d2=102.66276;

        for (i1 = 16; i1 < 397; ++i1) {
            vMeth1(i2, -17696, f1);
            Test.iArrFld[i1 - 1] *= i2;
            Test.iArrFld[i1 - 1] += 12;
            switch ((i1 % 5) + 125) {
            case 125:
                for (i11 = 1; i11 < 4; i11++) {
                    i2 -= 55912;
                    i13 = 1;
                    while (++i13 < 2) {
                        if (i12 != 0) {
                            vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f1) + i11 + i12 + i13 +
                                Double.doubleToLongBits(d2);
                            return;
                        }
                        d2 = Test.instanceCount;
                        i12 = (int)8012421693929170449L;
                        i2 ^= i11;
                        Test.instanceCount -= i11;
                        i12 -= i2;
                        i2 >>= (int)Test.instanceCount;
                    }
                }
            case 126:
                i12 += (i1 - f1);
                break;
            case 127:
                Test.iArrFld = Test.iArrFld;
                break;
            case 128:
                d2 = 62793;
                break;
            case 129:
                i12 += (int)-18603L;
                break;
            default:
                Test.instanceCount = i12;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f1) + i11 + i12 + i13 + Double.doubleToLongBits(d2);
    }

    public static short sMeth() {

        int i14=147, i15=56006, i16=35, i17=10439, i18=250, i19=5, i20=45519, i21=13, i22=-14646;
        byte by1=-108;
        float f2=-2.895F;
        double d3=0.48242, d4=2.130956;

        vMeth();
        for (i14 = 6; i14 < 237; ++i14) {
            i16 = 232;
            i15 %= (int)(by1 | 1);
        }
        for (i17 = 13; i17 < 389; ++i17) {
            Test.instanceCount = i18;
            Test.instanceCount += (((i17 * i16) + Test.instanceCount) - f2);
            i18 += i14;
        }
        for (i19 = 21; i19 < 341; ++i19) {
            i16 += i16;
            for (d3 = 5; d3 > 1; d3--) {
                f2 = -12;
                for (d4 = 1; d4 < 2; ++d4) {
                    i21 >>= -235;
                    i21 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i14 + i15 + i16 + by1 + i17 + i18 + Float.floatToIntBits(f2) + i19 + i20 +
            Double.doubleToLongBits(d3) + i21 + Double.doubleToLongBits(d4) + i22;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-31360, i23=64, i24=-1, i25=154, i26=61383, i28=4, i29=-54201, i30=-7, i31=-163, i32=-18233, i33=13,
            i34=4;
        double d5=2.23404;
        float f3=-73.333F;
        long l=-23L;

        i = (int)((Test.instanceCount - (i + 363354076L)) * sMeth());
        for (d5 = 8; d5 < 146; ++d5) {
            if (bFld) {
                for (i24 = 182; i24 > d5; i24--) {
                    double d6=102.23292;
                    Test.instanceCount = (long)f3;
                    d6 = i24;
                    i26 = 1;
                    do {
                        int i27=2;
                        if (true) break;
                        i23 += (int)f3;
                        i23 += (i26 - f3);
                        if (bFld) continue;
                        Test.iArrFld[i24] += i27;
                        i += (i26 | i);
                        Test.iArrFld[(int)(d5)] += (int)d5;
                    } while (++i26 < 1);
                    i += (i24 - Test.instanceCount);
                    for (i28 = i24; i28 < 1; i28++) {
                        i30 += (i28 + i29);
                        i29 *= (int)f3;
                        Test.instanceCount >>= i24;
                    }
                    i31 = 1;
                    do {
                        Test.lArrFld[i31] <<= i29;
                        if (bFld) continue;
                    } while (++i31 < 1);
                    for (i32 = 1; i32 > 1; i32 -= 3) {
                        i25 += i32;
                        f3 = 12L;
                        try {
                            i23 = (i / -463200223);
                            Test.iArrFld[i32 + 1] = (Test.iArrFld[(int)(d5)] / i24);
                            i25 = (Test.iFld / 39322);
                        } catch (ArithmeticException a_e) {}
                        i |= i33;
                        i34 -= (int)Test.instanceCount;
                        l += i25;
                    }
                    i33 = i31;
                }
            } else {
                Test.iFld += (int)d5;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
