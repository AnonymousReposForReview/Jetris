package tests.javafuzzer2146;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:22:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4195575136671851198L;
    public static boolean bFld=true;
    public static int iFld=-69;
    public double dFld=1.16954;
    public static float fFld=-2.982F;
    public short sFld=8017;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 61823);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i4=-46, i5=24397, i6=53158, i7=-247, iArr[]=new int[N];
        byte by=-45;
        float f=-76.103F;
        short s=-25714;

        FuzzerUtils.init(iArr, 232);

        Test.instanceCount += i4;
        i5 = 1;
        do {
            double d=83.88475;
            switch ((i5 % 10) + 20) {
            case 20:
                by += (byte)i5;
                i4 = i4;
                break;
            case 21:
                i4 += 1;
                i4 += (i5 * i5);
                try {
                    i4 = (iArr[i5] % i4);
                    i4 = (iArr[i5] % -52797);
                    iArr[i5 - 1] = (i4 / 8);
                } catch (ArithmeticException a_e) {}
                i4 -= i4;
                break;
            case 22:
                Test.instanceCount += 5;
                iArr[i5] -= i5;
            case 23:
                if (false) {
                    i6 += (i5 - i7);
                    iArr[i5 - 1] -= (int)f;
                    s = (short)-37607;
                } else if (Test.bFld) {
                    d = Test.instanceCount;
                    vMeth_check_sum += i4 + i5 + by + i6 + i7 + Float.floatToIntBits(f) + s +
                        FuzzerUtils.checkSum(iArr);
                    return;
                } else if (Test.bFld) {
                    i6 = (int)f;
                    vMeth_check_sum += i4 + i5 + by + i6 + i7 + Float.floatToIntBits(f) + s +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                break;
            case 24:
                Test.instanceCount -= (long)f;
                break;
            case 25:
                i6 *= i5;
                break;
            case 26:
                i7 *= (int)Test.instanceCount;
            case 27:
                i6 += (i5 * i5);
                break;
            case 28:
            case 29:
                if (i6 != 0) {
                    vMeth_check_sum += i4 + i5 + by + i6 + i7 + Float.floatToIntBits(f) + s +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
            }
        } while (++i5 < 358);
        vMeth_check_sum += i4 + i5 + by + i6 + i7 + Float.floatToIntBits(f) + s + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i3) {


        vMeth();
        long meth_res = i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i1=45433, i2=-13, i8=138, i9=51, i10=20481, i11=-185, i12=-54797, i13=-231;
        short s1=26685;
        boolean b=true;
        double d1=0.14546;
        long lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(fArr, 87.736F);

        for (i1 = 3; i1 < 283; ++i1) {
            i2 *= (i2--);
        }
        switch (((iMeth(-242) >>> 1) % 8) + 104) {
        case 104:
            if (false) {
                Test.iArrFld1 = Test.iArrFld1;
                i2 += s1;
                for (i8 = 11; 308 > i8; i8++) {
                    if (b) break;
                    i2 -= (int)Test.instanceCount;
                    for (i10 = i8; i10 < 6; i10++) {
                        for (i12 = 1; i12 < 1; i12 += 3) {
                            float f1=1.822F;
                            switch ((((Test.iFld >>> 1) % 2) * 5) + 75) {
                            case 77:
                                f1 = Test.iFld;
                                if (Test.bFld) continue;
                                break;
                            case 84:
                                i9 += i10;
                                break;
                            }
                        }
                    }
                }
            }
            break;
        case 105:
            Test.iArrFld1[(i9 >>> 1) % N] -= i9;
            break;
        case 106:
            Test.iFld = 12;
            break;
        case 107:
            i11 += i8;
            break;
        case 108:
            Test.instanceCount = i1;
            break;
        case 109:
            i2 = -56;
            break;
        case 110:
            d1 = i9;
            break;
        case 111:
            fArr[(i10 >>> 1) % N][(i10 >>> 1) % N] -= i10;
            break;
        }
        long meth_res = i1 + i2 + s1 + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i14=-31712, i15=-13, i16=116, i17=-178, i18=9, i19=-6700, i20=242;
        byte by1=-37;
        long lArr1[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr1, -46L);
        FuzzerUtils.init(sArr, (short)-447);

        i += ((iArrFld[(-9 >>> 1) % N]--) + (i++));
        i += (int)((lMeth() + by1) * Test.iFld);
        i <<= (int)36384L;
        i14 = 311;
        do {
            for (i15 = 14; i15 < 241; i15++) {
                i *= i15;
                switch ((i15 % 9) + 72) {
                case 72:
                    i17 = 1;
                    while (++i17 < 2) {
                        Test.instanceCount <<= -8769;
                        Test.iFld *= (int)4487101382523230430L;
                        dFld -= i14;
                        Test.instanceCount = i16;
                        lArr1[i15 - 1] %= (i16 | 1);
                        Test.iArrFld1[i15] -= -8607;
                        Test.instanceCount -= -13;
                        Test.iFld -= Test.iFld;
                        i *= (int)Test.fFld;
                    }
                    break;
                case 73:
                    i18 = 1;
                    do {
                        Test.iArrFld1[i15 + 1] *= i17;
                        i += i15;
                        Test.iFld /= (int)(i16 | 1);
                    } while (++i18 < 2);
                    i >>>= -44;
                    i16 = i18;
                    if (true) break;
                case 74:
                    for (i19 = i14; i19 < 2; ++i19) {
                        i20 -= (int)Test.instanceCount;
                        sFld -= (short)Test.instanceCount;
                        Test.iArrFld1[i15 + 1] += (int)dFld;
                    }
                    sFld *= (short)Test.instanceCount;
                    i16 += i;
                    break;
                case 75:
                    sArr[i14] = sArr[i15 - 1];
                    break;
                case 76:
                    dFld = i19;
                case 77:
                    Test.bFld = Test.bFld;
                    break;
                case 78:
                    iArrFld = iArrFld;
                    break;
                case 79:
                    Test.fFld = 19563;
                case 80:
                    Test.instanceCount += (((i15 * i) + i14) - i18);
                default:
                    i += (i15 + i);
                }
            }
        } while ((i14 -= 3) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
