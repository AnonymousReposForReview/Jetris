package tests.javafuzzer436;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:51:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5849886049389237390L;
    public short sFld=-27635;
    public static int iFld=43842;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.dArrFld, -72.15785);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, float f) {

        int i6=47380, i8=-51972, i9=49749, i10=5566, iArr[]=new int[N];
        byte by=-112;
        boolean b=true;

        FuzzerUtils.init(iArr, 927);

        Test.iFld = Test.iFld;
        i6 = 1;
        do {
            Test.instanceCount -= Test.iFld;
        } while (++i6 < 269);
        for (int i7 : iArr) {
            i8 = 1;
            while (++i8 < 4) {
                if (i8 != 0) {
                    vMeth2_check_sum += l + Float.floatToIntBits(f) + i6 + i8 + by + i9 + i10 + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                Test.iFld >>>= by;
                for (i9 = 1; i9 < 1; i9++) {
                    Test.iFld -= (int)l;
                    switch ((((7 >>> 1) % 5) * 5) + 71) {
                    case 88:
                        if (true) continue;
                        i10 = (int)-205871054778383384L;
                        break;
                    case 81:
                        Test.iArrFld[i9 - 1][i8 - 1] *= Test.iFld;
                        i10 = Test.iFld;
                        b = b;
                        break;
                    case 96:
                        f += i8;
                        break;
                    case 85:
                        f *= i7;
                        break;
                    case 74:
                        Test.instanceCount -= by;
                        break;
                    default:
                        f *= 84.900F;
                    }
                }
            }
        }
        vMeth2_check_sum += l + Float.floatToIntBits(f) + i6 + i8 + by + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i5) {

        float f1=68.627F, f2=0.715F;
        int i11=23, i12=-68, i13=-11, i14=23599, i15=-52967, i16=-165, i17=-105;
        short s=28717;

        vMeth2(Test.instanceCount, f1);
        for (i11 = 3; 240 > i11; ++i11) {
            Test.iArrFld[i11][i11] -= s;
            for (f2 = i11; f2 < 7; ++f2) {
                i12 += (int)((long)f2 ^ i5);
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.iArrFld[i14] = Test.iArrFld[i11 - 1];
                    i5 >>= i12;
                    f1 = 9;
                    Test.instanceCount = i11;
                    Test.iArrFld[i14 + 1][i11] &= (int)3L;
                }
                i12 *= 2;
                for (i16 = 1; i16 > 1; i16--) {
                    i15 += (i16 - i11);
                    f1 += i16;
                }
            }
        }
        vMeth1_check_sum += i5 + Float.floatToIntBits(f1) + i11 + i12 + s + Float.floatToIntBits(f2) + i13 + i14 + i15
            + i16 + i17;
    }

    public static void vMeth(int i1) {

        int i2=56298, i3=-7, i4=156, i18=9;
        double d=0.116077;
        byte by1=-28;
        float f3=0.155F, f4=-60.103F;
        short s1=23750;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 191L);

        lArr = (lArr = lArr);
        for (i2 = 17; i2 < 364; ++i2) {
            i4 = 1;
            do {
                switch ((((i1 - 99) >>> 1) % 10) + 5) {
                case 5:
                    Test.instanceCount += i3;
                    i1 += (int)(Test.dArrFld[i4 - 1] += ((Test.instanceCount += i4) - (-1.66965 + lArr[i4 - 1])));
                    vMeth1(i2);
                case 6:
                    i3 -= (int)Test.instanceCount;
                    d = i3;
                    by1 = (byte)i3;
                    break;
                case 7:
                    for (f3 = 1; 1 < f3; f3 -= 2) {
                        d = i3;
                        f4 += f3;
                    }
                    i1 = s1;
                    i18 -= i18;
                case 8:
                case 9:
                    i3 += (i4 * Test.instanceCount);
                    break;
                case 10:
                    Test.dArrFld[i2] /= ((long)(f3) | 1);
                    break;
                case 11:
                    Test.iArrFld[i4 - 1][i4 - 1] += (int)d;
                    break;
                case 12:
                    i3 += i1;
                case 13:
                    i1 &= i4;
                    break;
                case 14:
                    Test.instanceCount = i18;
                    break;
                default:
                    i18 >>= i18;
                }
            } while (++i4 < 5);
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + by1 + Float.floatToIntBits(f3) + i18 +
            Float.floatToIntBits(f4) + s1 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=10, i19=-63909, i21=-249, i22=-186, i23=-55242, i24=-2426, i25=3, i26=-62671, i27=-234, iArr1[]=new
            int[N];
        float f5=2.497F, f6=52.194F, f7=-42.835F;
        double d1=-1.8517;
        long lArr1[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 64810);
        FuzzerUtils.init(lArr1, 6L);
        FuzzerUtils.init(byArr, (byte)94);

        i *= Test.iArrFld[(-8 >>> 1) % N][(i >>> 1) % N];
        i -= sFld;
        vMeth(Test.iFld);
        if (Test.bFld) {
            for (f5 = 7; f5 < 304; ++f5) {
                f6 %= 4;
            }
            for (int i20 : iArr1) {
                i21 = 1;
                while (++i21 < 63) {
                    lArr1[i21 - 1] *= i20;
                    i += (((i21 * i) + i20) - i20);
                    f6 += i21;
                }
            }
        }
        i19 *= i;
        lArr1[(Test.iFld >>> 1) % N] *= i19;
        for (i22 = 8; i22 < 137; i22++) {
            Test.bFld = Test.bFld;
            for (i24 = 10; i24 < 194; i24++) {
                long l1=7551876234169385036L;
                f6 += i24;
                i23 -= -1;
                for (i26 = 1; i26 < 2; ++i26) {
                    if (true) continue;
                    Test.instanceCount -= (long)1.23376;
                    Test.instanceCount = 4;
                    iArr1[i24] = (int)f5;
                }
                l1 &= Test.iFld;
                d1 = 1;
                while (++d1 < 2) {
                    byArr[(int)(d1 + 1)] = (byte)i21;
                    i += (int)(-21.832F + (d1 * d1));
                    f7 *= i25;
                    i19 += (int)(d1 + i19);
                    Test.iFld = -217;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
