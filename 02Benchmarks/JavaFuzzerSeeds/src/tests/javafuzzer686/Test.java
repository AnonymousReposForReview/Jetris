package tests.javafuzzer686;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:01:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2633937047L;
    public static boolean bFld=false;
    public static volatile short sFld=-13091;
    public float fFld=-2.458F;
    public double dFld=1.18863;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)11143);
        FuzzerUtils.init(Test.iArrFld, 91);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=21667, i8=-3, i9=53, i10=140, i11=-10, i12=-29529, iArr[]=new int[N];
        double d=28.35121, d1=0.108891;

        FuzzerUtils.init(iArr, 11);

        for (i7 = 1; i7 < 305; i7++) {
            d = -11489;
            iArr[i7 + 1] = i8;
            for (i9 = i7; i9 < 5; i9++) {
                for (i11 = 1; 1 > i11; i11++) {
                    Test.iArrFld = iArr;
                    i12 = i9;
                    switch ((((i8 >>> 1) % 7) * 5) + 126) {
                    case 141:
                        Test.iArrFld[i9 - 1] = 4;
                        i8 += (i11 * i9);
                        i10 *= i9;
                        break;
                    case 129:
                        Test.iArrFld = iArr;
                        break;
                    case 152:
                        d1 -= i10;
                        d1 += i10;
                        break;
                    case 138:
                        i10 += i8;
                        break;
                    case 148:
                        i10 = (int)Test.instanceCount;
                    case 155:
                        iArr[i7] = i9;
                        break;
                    case 154:
                        i8 <<= i11;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(short s, int i5, int i6) {

        int i13=0, i14=-42080, i15=2432, i16=-6, i17=-218;
        float f1=1.78F;
        byte by=29;

        Test.instanceCount -= 10;
        vMeth1();
        i13 = 1;
        do {
            for (i14 = 8; i14 > 1; i14 -= 2) {
                Test.bArrFld[i14][i14 - 1] = Test.bFld;
                f1 += Test.instanceCount;
                by += (byte)(((i14 * i15) + i15) - i5);
                for (i16 = i13; 3 > i16; ++i16) {
                    i6 += (i16 ^ by);
                    i5 >>>= (int)10L;
                    Test.instanceCount <<= i15;
                    i15 &= -248;
                    i15 *= i14;
                    i5 = (int)Test.instanceCount;
                }
            }
            i6 += (int)-5573L;
        } while (++i13 < 199);
        long meth_res = s + i5 + i6 + i13 + i14 + i15 + Float.floatToIntBits(f1) + by + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, long l, int i4) {

        float f=-79.815F;

        Test.sArrFld[(i4 >>> 1) % N] = (short)(Test.instanceCount = (l * Integer.reverseBytes(i3)));
        Test.iArrFld[(i4 >>> 1) % N] *= ((i3++) * -62312);
        i3 >>= (int)(-((long)(i3 - f) >> Integer.reverseBytes(i3)));
        iMeth(Test.sFld, i4, i4);
        vMeth_check_sum += i3 + l + i4 + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=-23046, i1=12, i2=13, i18=-166, i19=144, i20=-204, i21=12, i22=43360, i23=195, i24=-224, i25=33028;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3L);

        i += (int)(((-4 - (52012 - i)) - Math.max(i, i)) - ((Test.instanceCount * -242) + i));
        for (i1 = 9; i1 < 294; i1++) {
            vMeth(i1, -2573257103L, i2);
            for (i18 = 1; i18 < 88; ++i18) {
                byte by1=21;
                for (i20 = 1; i20 < 2; i20 += 3) {
                    fFld -= i19;
                    dArrFld[i18] -= i18;
                }
                if (Test.bFld) continue;
                if (true) continue;
                fFld -= Test.sFld;
                by1 *= (byte)Test.instanceCount;
                Test.instanceCount += i18;
                switch (((i1 % 1) * 5) + 21) {
                case 26:
                    lArr[i1] >>= 10;
                    for (i22 = 1; i22 < 2; i22++) {
                        i *= i20;
                    }
                    i19 += (((i18 * fFld) + i2) - i20);
                    for (i24 = i18; i24 < 2; i24 += 2) {
                        Test.instanceCount >>= i23;
                        Test.instanceCount <<= i21;
                        i23 = i19;
                        try {
                            i19 = (38 % i2);
                            i25 = (171 % i24);
                            Test.iArrFld[i1] = (Test.iArrFld[i18] % 94);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                }
                i25 += i21;
            }
            Test.iArrFld[i1 - 1] = (int)Test.instanceCount;
            Test.instanceCount += i25;
            dFld = i25;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-6);
            i >>= -64930;
            i2 = i23;
            i23 |= i24;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
