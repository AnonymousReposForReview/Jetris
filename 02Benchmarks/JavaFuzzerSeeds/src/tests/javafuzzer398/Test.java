package tests.javafuzzer398;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:16:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-895271508L;
    public static double dFld=1.55544;
    public static int iFld=-80;
    public static float fFld=0.414F;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.iArrFld1, -10);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i1=-36144, i2=-5, i3=21403, i4=-5;
        double d=-114.47025;
        byte by=49;
        float f2=-123.866F;

        for (i1 = 5; i1 < 267; i1++) {
            i2 -= (int)Test.dFld;
            if (i2 != 0) {
                vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + by + Float.floatToIntBits(f2);
                return;
            }
            i2 += (((i1 * i1) + i1) - i2);
            for (d = 1; d < 6; ++d) {
                i4 = 2;
                while ((i4 -= 3) > 0) {
                    Test.instanceCount = i1;
                    by <<= (byte)i2;
                    try {
                        i3 = (i2 / -240);
                        Test.iArrFld[i1 + 1] = (i3 / Test.iArrFld[i1 + 1]);
                        i3 = (32 % i3);
                    } catch (ArithmeticException a_e) {}
                    f2 += i3;
                    Test.iArrFld = Test.iArrFld;
                    switch ((i1 % 2) + 28) {
                    case 28:
                        Test.dFld *= i3;
                        i2 >>>= i3;
                        Test.iArrFld[i4 - 1] *= (int)f2;
                        break;
                    case 29:
                        i3 += (int)f2;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + by + Float.floatToIntBits(f2);
    }

    public static void vMeth(int i) {

        short s=-21832;

        s = (short)Test.iArrFld[(8 >>> 1) % N];
        vMeth1();
        Test.iArrFld[(i >>> 1) % N] -= (int)Test.dFld;
        vMeth_check_sum += i + s;
    }

    public static void vSmallMeth(float f, float f1) {

        int i5=151;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-114);

        vMeth(i5);
        byArr[(i5 >>> 1) % N] = (byte)i5;
        vSmallMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i6=-205, i7=18290, i8=-14, i9=39721, i10=89, i11=59009, i12=-64074, i13=24953, i14=2, i15=-169, i16=52382,
            i17=-6, i18=-219;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -56.38F);

        for (int smallinvoc=0; smallinvoc<568; smallinvoc++) vSmallMeth(-2.673F, 0.1009F);
        Test.iArrFld1[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        Test.iArrFld1[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld = Test.iFld;
        Test.instanceCount += -24526;
        for (i6 = 24; i6 < 388; i6++) {
            Test.iFld += (((i6 * Test.fFld) + i7) - i7);
            for (i8 = 2; i8 < 69; ++i8) {
                i9 -= (int)Test.fFld;
                i9 += (((i8 * Test.iFld) + i6) - i7);
                for (i10 = 1; i10 < 2; i10 += 2) {
                    Test.instanceCount = Test.instanceCount;
                    if (b) continue;
                    i12 = i11;
                    i7 = (int)Test.instanceCount;
                    i7 *= -10;
                    if (b) {
                        i12 -= (int)Test.instanceCount;
                        i7 = (int)Test.instanceCount;
                        i7 += i12;
                    } else if (b) {
                        fArr[i10 + 1] = i10;
                    }
                }
                b = false;
                i12 += i8;
            }
        }
        for (i13 = 5; 346 > i13; i13++) {
            for (i15 = 1; i15 < 74; i15++) {
                Test.iArrFld[i13 - 1] *= (int)1469041039034789150L;
                for (i17 = 2; i17 > 1; i17 -= 2) {
                    Test.instanceCount -= i14;
                    Test.instanceCount *= i8;
                    Test.instanceCount = i17;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
