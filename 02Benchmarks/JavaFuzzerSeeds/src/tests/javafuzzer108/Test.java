package tests.javafuzzer108;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static double dFld=8.96204;
    public static volatile byte byFld=21;
    public static float fFld=-91.415F;
    public boolean bFld=true;
    public static volatile double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.1007);
        FuzzerUtils.init(Test.fArrFld, 97.529F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(short s) {

        int i2=-118, i3=203;
        float f=-1.592F;

        for (i2 = 5; 232 > i2; i2++) {
            s *= (short)(++Test.dArrFld[i2 - 1]);
        }
        i3 >>= Integer.reverseBytes((int)((Test.dFld - Test.instanceCount) - f));
        vMeth_check_sum += s + i2 + i3 + Float.floatToIntBits(f);
    }

    public static double dMeth() {

        int i10=35394, i11=1, i12=7, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 92);

        Test.fArrFld[(i10 >>> 1) % N] -= ((i10 &= (i10 * i10)) - (i10 + (i10 - 133)));
        iArr1 = (iArr1 = (iArr1 = (iArr1 = iArr1)));
        for (i11 = 8; i11 < 258; i11++) {
            i10 <<= iArr1[i11 + 1];
        }
        long meth_res = i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(short s2, long l) {

        int i13=7992, i14=-6;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i13 = 7; 123 > i13; ++i13) {
            Test.fFld += (i13 * i13);
            vMeth(s2);
            if (b1) break;
            i14 += (i13 ^ l);
            Test.dArrFld[i13] *= Test.instanceCount;
            i14 += (i13 * i13);
        }
        bArr[(-124 >>> 1) % N] = b1;
        Test.instanceCount <<= 2;
        vMeth1_check_sum += s2 + l + i13 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth() {

        boolean b=false;
        float f2=68.985F;
        double d=-106.2784;
        int i7=-11, i8=2, i9=-5, i15=-4, i16=-92, iArr[][]=new int[N][N];
        short s3=11381;

        FuzzerUtils.init(iArr, -22274);

        b = true;
        Test.instanceCount += (long)f2;
        Test.instanceCount *= (-Test.instanceCount);
        for (d = 14; 285 > d; d++) {
            f2 -= (((Test.instanceCount * i7) * (i7 - Test.instanceCount)) - Test.instanceCount);
            iArr[(int)(d)][(int)(d - 1)] <<= (--iArr[(int)(d + 1)][(int)(d)]);
        }
        for (i8 = 9; i8 < 396; ++i8) {
            Test.byFld |= (byte)(i9 *= (int)dMeth());
            Test.instanceCount = i9;
            vMeth1(s3, Test.instanceCount);
            for (i15 = 1; i15 < 4; i15 += 2) {
                iArr[i15 - 1][i8 + 1] = i16;
                i9 += (i15 * i15);
                i9 &= (int)Test.instanceCount;
                f2 += (((i15 * Test.instanceCount) + i9) - i16);
            }
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i7 + i8 + i9 + s3 + i15 +
            i16 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-243, i1=56682, i4=224, i5=14, i6=-4881, i17=-108, i18=5, i19=44481, i20=32136, i21=-62, iArr2[]=new
            int[N];
        byte by=64, byArr[]=new byte[N];
        float f1=111.959F;
        short s1=-4093, sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)27169);
        FuzzerUtils.init(byArr, (byte)4);
        FuzzerUtils.init(lArr, 8982903742853696959L);
        FuzzerUtils.init(iArr2, -9);

        i = 1;
        while (++i < 379) {
            Test.instanceCount = (Test.instanceCount + ((++Test.instanceCount) + (i1--)));
            vMeth(sArr[i]);
            by = byArr[i];
            f1 += (i - i);
            for (i4 = 2; i4 < 66; ++i4) {
                i6 = 1;
                while (++i6 < 2) {
                    i1 *= (int)(((s1 * Test.instanceCount) + i6) * (Test.instanceCount++));
                }
                if (false) {
                    i5 += (int)((f1 + f1) + (Test.instanceCount = i1));
                    vMeth((short)((lArr[i4 + 1] + (++i5)) + (Test.instanceCount >> (2512431611970378326L - (48280 -
                        lMeth())))));
                } else if (bFld) {
                    for (i17 = 1; i17 < 2; i17++) {
                        i1 = i18;
                        Test.fArrFld[i17] -= Test.byFld;
                        Test.fArrFld[i17 + 1] -= i5;
                        switch (((i4 >>> 1) % 1) + 99) {
                        case 99:
                        }
                        iArr2[i17 - 1] += i;
                    }
                } else if (false) {
                    i1 *= -48218;
                }
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.dFld += i17;
                    sArr[i + 1] = (short)19203;
                    try {
                        i20 = (65 / i5);
                        iArr2[i - 1] = (i1 % 14626);
                        i1 = (i19 % 107);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = Test.byFld;
                }
                Test.fArrFld[i + 1] += i6;
                i18 += i20;
                i21 <<= Test.byFld;
                Test.instanceCount += i4;
                i21 = i6;
                i20 = (int)Test.instanceCount;
            }
            Test.instanceCount = 9;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vMeth1 lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
