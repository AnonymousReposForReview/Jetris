package tests.javafuzzer3395;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:20:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-45719L;
    public volatile short sFld=26898;
    public volatile float fFld=107.588F;
    public static float fFld1=98.539F;
    public static short sFld1=-12653;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61469);
        FuzzerUtils.init(Test.lArrFld, -21051L);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i7, int i8) {

        int i9=-3, i10=-1, i11=12;
        float f=0.472F;
        short s=28056;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)32);

        i9 = 1;
        while (++i9 < 342) {
            f = 1;
            while (++f < 5) {
                if (false) break;
                if (false) continue;
                for (i10 = 1; i10 < 1; ++i10) {
                    s = (short)i9;
                    i7 >>= i11;
                    byArr[i9 + 1] += (byte)Test.instanceCount;
                    i8 = (int)-10L;
                    Test.instanceCount &= i9;
                    i11 -= i9;
                }
            }
            Test.fFld1 += (((i9 * i7) + s) - i7);
            Test.iArrFld[i9 - 1] <<= 204;
            Test.iArrFld[(i8 >>> 1) % N] = i11;
            Test.lArrFld[i9] &= Test.instanceCount;
        }
        long meth_res = i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + s + FuzzerUtils.checkSum(byArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(double d1) {

        int i6=0, i12=-58, i13=28989, i14=-247;
        boolean b=true;
        byte by=33;

        i6 &= (int)((i6 - (Test.fFld1 - i6)) + ((--i6) * (Test.fFld1 *= Test.fFld1)));
        i6 = (((i6++) + i6) + byMeth(i6, i6));
        for (i12 = 11; i12 < 371; i12++) {
            i6 = (int)Test.instanceCount;
            b = b;
            i14 = 1;
            while (++i14 < 5) {
                by *= (byte)Test.instanceCount;
                i13 = i14;
                Test.instanceCount >>>= i6;
                switch (((i14 % 8) * 5) + 120) {
                case 136:
                    i6 -= (int)-2.80537;
                    Test.lArrFld[i12 + 1] += Test.instanceCount;
                    i6 += i6;
                    break;
                case 139:
                    b = b;
                    Test.iArrFld[i14 - 1] = (int)d1;
                    break;
                case 158:
                    d1 -= 32080;
                case 125:
                    Test.fFld1 *= Test.fFld1;
                case 135:
                    Test.sFld1 <<= (short)Test.instanceCount;
                    break;
                case 124:
                    Test.instanceCount = i13;
                    break;
                case 128:
                    Test.fFld1 *= 2;
                    break;
                case 150:
                    i13 = i13;
                default:
                    i6 += i14;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i6 + i12 + i13 + (b ? 1 : 0) + i14 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(long l) {

        int i1=6753, i2=-11, i3=25577, i4=234, i5=-6;
        double d=52.118983;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1573891557L);

        for (i1 = 16; i1 < 344; ++i1) {
            i3 = 1;
            while (++i3 < 5) {
                d = 1;
                while (--d > 0) {
                    i2 += (int)((long)d ^ Test.instanceCount);
                    i2 += (-234 + (d * d));
                    i2 += (int)(d * i2);
                }
                for (i4 = 1; 1 > i4; ++i4) {
                    switch ((i4 % 3) + 8) {
                    case 8:
                        i5 += (((i4 * i4) + i5) - i2);
                        i2 |= 50440;
                        break;
                    case 9:
                        i2 += (((i4 * fFld) + i3) - fFld);
                        Test.instanceCount = Math.min(Test.instanceCount--, lArr[i1]);
                        i2 *= iMeth(d);
                        break;
                    case 10:
                        if (true) break;
                        break;
                    }
                    i2 += i4;
                }
            }
        }
        long meth_res = l + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8;
        double d2=51.125164;

        sFld = (short)(i++);
        i /= (int)(((long)(i *= (int)dMeth(Test.instanceCount))) | 1);
        Test.lArrFld[(i >>> 1) % N] = (long)d2;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
