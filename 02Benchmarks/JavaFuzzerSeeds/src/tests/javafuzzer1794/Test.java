package tests.javafuzzer1794;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:23:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1188812336L;
    public int iFld=-73;
    public static byte byFld=-112;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i1=-120, i2=-68, i3=-2, i4=47175, i5=-12, i6=30, i7=-6660, iArr1[]=new int[N];
        double d1=72.75940;
        byte by=124;
        short s=-15825, sArr[]=new short[N];
        boolean b=false, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr1, -49);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(sArr, (short)-4270);

        Test.instanceCount = -734;
        for (i1 = 5; i1 < 132; ++i1) {
            Test.instanceCount += (i1 + Test.instanceCount);
            d1 *= by;
            iArr1[i1 - 1] *= (int)d1;
            i2 += (((i1 * i2) + Test.instanceCount) - i1);
        }
        i3 = 1;
        do {
            for (i4 = 1; i4 < 6; ++i4) {
                Test.instanceCount += Test.instanceCount;
            }
            for (i6 = 1; i6 < 6; i6++) {
                s |= (short)i7;
                bArr[i6][i3] = b;
                i2 |= i7;
            }
            sArr[i3] *= (short)i4;
            iArr1[i3] -= (int)82.37F;
        } while (++i3 < 265);
        long meth_res = i1 + i2 + Double.doubleToLongBits(d1) + by + i3 + i4 + i5 + i6 + i7 + s + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, long l, int i) {

        double d2=115.119504;
        int i8=5995, i9=-9, i10=-12, i12=40648, i13=-53147, i14=-39, iArr2[]=new int[N];
        float f1=-116.70F;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -3);

        iMeth();
        for (d2 = 13; d2 < 327; d2++) {
            i += i;
            i += (int)(d2 * d2);
        }
        f1 -= 140;
        for (i9 = 11; i9 < 199; i9++) {
            i10 = (int)1.35203;
            for (i12 = 1; i12 < 8; i12++) {
                l = 47010;
                i14 = 1;
                do {
                    i8 = i;
                    Test.instanceCount = i;
                    if (b1) break;
                    iArr2[i12 - 1] = i12;
                    l -= (long)d2;
                } while (++i14 < 2);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i + Double.doubleToLongBits(d2) + i8 +
            Float.floatToIntBits(f1) + i9 + i10 + i12 + i13 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vSmallMeth(float f) {

        double d3=16.97763;
        int i15=9;

        vMeth(d3, 4L, i15);
        i15 = i15;
        vSmallMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i15;
    }

    public void mainTest(String[] strArr1) {

        float f2=89.100F;
        int i16=9, i17=-193, i18=-189, i19=63, i20=-35, i21=5, i22=31, iArr[]=new int[N];
        long l2=12L, lArr[]=new long[N];
        boolean b2=true;
        short s1=4792;

        FuzzerUtils.init(iArr, 133);
        FuzzerUtils.init(lArr, -7L);

        iArr[(iFld >>> 1) % N] <<= (int)((iFld++) + ((lArr[(iFld >>> 1) % N] >>>= 27489L) + iFld));
        for (int smallinvoc=0; smallinvoc<888; smallinvoc++) vSmallMeth(f2);
        iFld = iFld;
        for (i16 = 7; 314 > i16; ++i16) {
            i17 -= 52262;
            iFld <<= i17;
            i17 >>= iFld;
            i17 %= (int)(i16 | 1);
            Test.instanceCount = 58L;
        }
        switch (((12 >>> 1) % 2) + 107) {
        case 107:
            for (i18 = 3; i18 < 189; i18++) {
                l2 += (i18 + iFld);
                if (b2) break;
                Test.instanceCount = iFld;
            }
            break;
        case 108:
            for (i20 = 11; i20 < 254; i20 += 3) {
                i17 += i21;
                iFld -= (int)-1778803663L;
                i22 = 1;
                do {
                    i19 += (int)l2;
                    i21 += (int)Test.instanceCount;
                    i21 -= -98;
                    Test.byFld = (byte)i20;
                } while (++i22 < 309);
                s1 = (short)f2;
                iArr[i20 + 1] &= i19;
                i19 += (i20 * i20);
            }
            i17 = i17;
            break;
        default:
            i19 = i19;
            iFld = i17;
            i19 *= i20;
        }
        i19 -= i21;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
