package tests.javafuzzer3390;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:13:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=228L;
    public static byte byFld=-40;
    public static volatile float fArrFld[]=new float[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.609F);
        FuzzerUtils.init(Test.byArrFld, (byte)-55);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(double d1) {

        int i6=190, i7=-10, i8=-58841, i9=-51555, i10=-61, i11=55812, i12=-6;
        double d2=0.60783;
        float f1=-1.526F;

        i6 -= i6;
        for (i7 = 10; i7 < 252; ++i7) {
            for (d2 = 1; d2 < 7; d2++) {
                for (i10 = 1; i10 < 2; i10 += 3) {
                    i8 = i10;
                    i9 = i8;
                    Test.byFld *= (byte)f1;
                    i11 ^= (int)0L;
                    f1 = i9;
                    i12 += (((i10 * i7) + Test.byFld) - i11);
                }
                i12 %= (int)(i10 | 1);
                switch ((int)((d2 % 5) + 41)) {
                case 41:
                    Test.byArrFld[i7 - 1] = (byte)i12;
                    if (i11 != 0) {
                    }
                    Test.instanceCount -= Test.instanceCount;
                    break;
                case 42:
                    i9 += i10;
                case 43:
                    i11 = 0;
                    break;
                case 44:
                    Test.instanceCount -= 9L;
                    break;
                case 45:
                    i11 = (int)Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i6 + i7 + i8 + Double.doubleToLongBits(d2) + i9 + i10 + i11 +
            Float.floatToIntBits(f1) + i12;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(long l1) {

        int i3=114, i4=9, i5=-46550, i13=-10, iArr[]=new int[N];
        float f=-1.494F;
        double d3=-2.71976;
        short s=-7667;

        FuzzerUtils.init(iArr, 194);

        l1 *= Math.abs(iArr[(i3 >>> 1) % N]);
        for (i4 = 5; i4 < 128; i4++) {
            i3 = (++i3);
            f = (lMeth(d3) + i5);
            l1 *= i4;
            i3 = i3;
            l1 = i3;
        }
        i13 = 1;
        do {
            i5 += (((i13 * l1) + f) - i3);
            l1 *= i5;
            try {
                iArr[i13 + 1] = (1745156139 % iArr[i13 + 1]);
                i5 = (i4 / -6650);
                i5 = (156 % i4);
            } catch (ArithmeticException a_e) {}
            Test.byFld *= (byte)d3;
            i5 |= -16840;
            i3 <<= i13;
            d3 -= s;
        } while (++i13 < 176);
        long meth_res = l1 + i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i13 + s +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1) {

        double d=19.67532;
        int i2=-52660, i14=9, i15=-119, i16=-20323, i17=41133, iArr1[]=new int[N];
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 13L);
        FuzzerUtils.init(iArr1, 61);

        for (d = 23; 371 > d; ++d) {
            if (false) {
                i1 += iMeth1(Test.instanceCount);
                i2 = i1;
                Test.instanceCount *= i2;
            } else if (b) {
                for (i14 = (int)(d); i14 < 5; ++i14) {
                    for (i16 = 1; 1 > i16; i16 += 3) {
                        i1 = i15;
                        switch ((int)(((d % 2) * 5) + 44)) {
                        case 51:
                            i2 *= 7;
                            break;
                        case 46:
                            i17 = i16;
                            break;
                        }
                        iArr1[i16 - 1] += i16;
                        Test.instanceCount = Test.instanceCount;
                        if (i1 != 0) {
                        }
                        iArr1[i14 - 1] += i15;
                    }
                }
            } else {
                i15 -= i15;
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i14 + i15 + i16 + i17 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i18=-29, i19=-88, i20=-218, i21=-68, i22=13, iArr2[][]=new int[N][N];
        short s1=-8674;
        double d4=-2.107606;
        float f2=1.1002F;
        long l2=-546320652L;

        FuzzerUtils.init(iArr2, 14);

        Test.fArrFld[(i >>> 1) % N] = (Integer.reverseBytes(i++) - iMeth(i));
        iArr2[(i >>> 1) % N][(i >>> 1) % N] = (int)Test.instanceCount;
        i -= i;
        i *= (int)Test.instanceCount;
        for (i18 = 20; i18 < 344; i18++) {
            i19 = i;
            i -= (int)Test.instanceCount;
            iArr2[i18 + 1] = iArr2[i18 + 1];
            i19 += (i18 | s1);
            d4 -= -97.324F;
            i = (int)Test.instanceCount;
            i20 = 1;
            do {
                switch ((i20 % 8) + 86) {
                case 86:
                    i = i;
                    iArr2[i20 + 1][i20 - 1] = i;
                    i ^= i18;
                    break;
                case 87:
                    if (true) continue;
                    i19 += i;
                    break;
                case 88:
                    iArr2[i18 + 1] = iArr2[i18 + 1];
                    break;
                case 89:
                    iArr2[i18 + 1][i20 + 1] += i19;
                    i -= i19;
                    i19 <<= 994;
                    break;
                case 90:
                    f2 *= i;
                    i19 = (int)l2;
                    i19 = i20;
                    break;
                case 91:
                    i += (((i20 * i20) + i19) - f2);
                    for (i21 = 1; i21 < 1; i21 += 2) {
                        i19 += i21;
                        i += (i21 * i21);
                        i += (i21 * i21);
                    }
                    break;
                case 92:
                    f2 += (((i20 * i19) + i) - i21);
                case 93:
                    i22 = (int)Test.instanceCount;
                    break;
                default:
                    i19 = s1;
                }
            } while (++i20 < 78);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
