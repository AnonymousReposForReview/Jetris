package tests.javafuzzer885;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:18:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-34189L;
    public static int iFld=81;
    public double dFld=70.5871;
    public static float fFld=-101.289F;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -28297L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(short s, double d1, int i2) {

        int i3=-204, i4=63252;

        for (i3 = 11; i3 < 289; ++i3) {
            Test.iFld += i2;
        }
        vMeth_check_sum += s + Double.doubleToLongBits(d1) + i2 + i3 + i4;
    }

    public static int iMeth(byte by) {

        short s1=-2511;
        double d2=-2.66417;

        Test.iFld >>= (int)Test.instanceCount;
        vMeth(s1, d2, Test.iFld);
        long meth_res = by + s1 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(double d, int i, int i1) {

        byte by1=-113;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -27772);

        iArr1[(i1 >>> 1) % N] = (int)((iMeth(by1) - by1) - Test.instanceCount);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + by1 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        long l=-167L;
        int i5=18, i6=-57149, i7=-28, i8=13, i9=-10061, i10=7300, iArr[]=new int[N];
        double d3=-108.93187, dArr[]=new double[N];
        byte by2=38, byArr[]=new byte[N], byArr1[]=new byte[N];
        short s2=-16378, sArr[]=new short[N];
        boolean b=false;

        FuzzerUtils.init(byArr, (byte)-16);
        FuzzerUtils.init(iArr, 198);
        FuzzerUtils.init(dArr, 2.114394);
        FuzzerUtils.init(sArr, (short)-1335);
        FuzzerUtils.init(byArr1, (byte)125);

        Test.iFld <<= ((Test.iFld--) - (byArr[(-216 >>> 1) % N] + (-iArr[(Test.iFld >>> 1) % N])));
        for (int smallinvoc=0; smallinvoc<955; smallinvoc++) vSmallMeth(dFld, 115, 54669);
        for (l = 2; l < 167; ++l) {
            for (d3 = l; d3 < 152; ++d3) {
                i6 += (int)(-4L + (d3 * d3));
                by2 -= (byte)i6;
                Test.instanceCount = i5;
                Test.lArrFld[(int)(l + 1)] *= -112;
                for (i7 = 1; i7 > 1; i7--) {
                    iArr[(int)(d3)] <<= i7;
                    i5 += i7;
                    Test.iFld += i5;
                    Test.iFld += (i7 * i7);
                    Test.instanceCount = Test.iFld;
                    Test.instanceCount += (((i7 * Test.iFld) + Test.instanceCount) - i7);
                    iArr[(int)(l + 1)] += by2;
                    i5 += (int)(59010L + (i7 * i7));
                }
            }
            i5 = i5;
            try {
                i6 = (i5 % i7);
                i6 = (i6 % -161);
                Test.iFld = (i7 % -11011);
            } catch (ArithmeticException a_e) {}
            dArr[(int)(l)] = i7;
            i5 = i8;
        }
        if (b) {
            Test.instanceCount *= 47289;
            sArr[(-62109 >>> 1) % N] -= s2;
            Test.instanceCount += Test.instanceCount;
            for (i9 = 323; 8 < i9; --i9) {
                Test.instanceCount += (i9 ^ i7);
                Test.iFld *= (int)Test.fFld;
                byArr1[i9] += (byte)Test.iFld;
                Test.fFld *= Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
