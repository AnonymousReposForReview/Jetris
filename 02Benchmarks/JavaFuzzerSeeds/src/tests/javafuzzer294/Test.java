package tests.javafuzzer294;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:24:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=21546L;
    public static int iFld=3694;
    public volatile byte byFld=112;
    public static short sArrFld[][]=new short[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)9674);
        FuzzerUtils.init(Test.iArrFld, -28282);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f2=-74.232F;
        int i4=-6, i5=14, i7=18620, i8=158, i9=57, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, -52);

        f2 += 11208;
        Test.iFld = 34154;
        switch (((Test.iFld >>> 1) % 1) + 2) {
        case 2:
            Test.iFld = Test.iFld;
            break;
        }
        iArr[(Test.iFld >>> 1) % N] -= Test.iFld;
        for (i4 = 12; 380 > i4; i4++) {
            b = false;
        }
        Test.sArrFld[(i5 >>> 1) % N][(i5 >>> 1) % N] = (short)Test.instanceCount;
        iArr[(i4 >>> 1) % N] = (int)-11L;
        for (int i6 : iArr) {
            i5 -= Test.iFld;
        }
        i7 = 1;
        do {
            for (i8 = 11; i8 > 1; --i8) {
                Test.instanceCount -= Test.instanceCount;
                iArr = iArr;
            }
        } while (++i7 < 145);
        vMeth_check_sum += Float.floatToIntBits(f2) + i4 + i5 + (b ? 1 : 0) + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(long l, float f1) {

        int i10=11, i11=120, i12=-124, i13=11527;
        double d=-119.85599;

        vMeth();
        Test.iFld = (int)l;
        Test.iFld -= Test.iFld;
        Test.iFld = 143;
        for (i10 = 6; i10 < 212; i10++) {
            if (i11 != 0) {
            }
            i12 = 1;
            do {
                i11 += (int)(35310L + (i12 * i12));
                Test.iFld += (-79 + (i12 * i12));
                for (d = 1; d > 1; d -= 2) {
                    Test.iFld += (int)d;
                    Test.iArrFld[i12 - 1] *= (int)f1;
                    i13 |= i10;
                    f1 = f1;
                    i13 += i10;
                }
            } while (++i12 < 8);
        }
        long meth_res = l + Float.floatToIntBits(f1) + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(byte by) {

        int i=8874, i1=7, i2=-19337, i3=145;
        boolean b1=true, bArr[]=new boolean[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -2.770F);
        FuzzerUtils.init(lArr, 14L);
        FuzzerUtils.init(bArr, true);

        try {
            for (float f : fArr) {
                for (i = 1; i < 4; ++i) {
                    i1 *= (int)(Test.iFld - ((Test.instanceCount + i1) ^ -22739));
                    by += (byte)(((i * Test.instanceCount) + i) - Test.instanceCount);
                    for (i2 = 2; i2 > 1; i2--) {
                        double d1=114.79237;
                        switch ((i2 % 8) + 63) {
                        case 63:
                            Test.iFld += (i2 * i2);
                            i1 -= Test.iFld;
                            break;
                        case 64:
                            Test.instanceCount += (long)(fMeth(Test.instanceCount, f) + -104.47813);
                            if (b1) continue;
                            d1 *= Test.iFld;
                            Test.iArrFld[i - 1] += 5;
                            break;
                        case 65:
                            lArr[i] = (long)d1;
                            break;
                        case 66:
                            Test.instanceCount += (((i2 * Test.instanceCount) + f) - i1);
                            break;
                        case 67:
                            f -= i1;
                        case 68:
                            i3 += (i2 * Test.iFld);
                            break;
                        case 69:
                            lArr[i] <<= -8276516078426683215L;
                            break;
                        case 70:
                            if (Test.iFld != 0) {
                            }
                            break;
                        }
                    }
                }
            }
        }
        catch (NullPointerException exc2) {
            Test.iArrFld = Test.iArrFld;
        }
        catch (UserDefinedExceptionTest exc3) {
            bArr = bArr;
        }
        finally {
            Test.iFld = i2;
        }
        long meth_res = by + i + i1 + i2 + i3 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {


        iMeth(byFld);
        Test.iFld += Test.iFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
