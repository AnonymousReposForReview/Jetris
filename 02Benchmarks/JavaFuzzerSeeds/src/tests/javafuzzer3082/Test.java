package tests.javafuzzer3082;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:32:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static int iFld=11;
    public static short sFld=29371;
    public static boolean bFld=true;
    public byte byFld=-81;
    public static boolean bFld1=false;
    public int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1637198178L);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=9;
        float f=5.212F;

        i7 = 1;
        do {
            Test.iFld += (i7 - Test.iFld);
            Test.iFld = (int)f;
            Test.sFld -= (short)i7;
        } while (++i7 < 242);
        vMeth1_check_sum += i7 + Float.floatToIntBits(f);
    }

    public static void vMeth(double d1) {

        double d2=98.6545;
        int i3=-193, i5=-3, i6=-213, i8=-5, i9=10, iArr[][]=new int[N][N], iArr1[]=new int[N];
        float f1=0.749F;

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(iArr1, -1);

        d2 = 1;
        while (++d2 < 191) {
            iArr = (iArr = FuzzerUtils.int2array(N, (int)39839));
            try {
                Test.iFld = (Test.iFld % Test.iFld);
                Test.iFld = (Test.iFld % Test.iFld);
                Test.iFld = (Test.iFld / 134);
            } catch (ArithmeticException a_e) {}
        }
        i3 = 1;
        do {
            byte by1=100;
            if (Test.bFld) {
                for (i5 = 8; i5 > 1; --i5) {
                    vMeth1();
                    for (i8 = 1; i8 < 2; ++i8) {
                        Test.instanceCount += i8;
                        i6 += i8;
                        f1 += (241 + (i8 * i8));
                        Test.instanceCount = Test.iFld;
                        i6 = -14;
                        f1 *= i9;
                        Test.instanceCount = i6;
                    }
                }
            } else {
                by1 += (byte)(((i3 * i6) + Test.instanceCount) - i6);
            }
        } while (++i3 < 208);
        vMeth_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i3 + i5 + i6 + i8 + i9 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(int i1, byte by, int i2) {

        double d3=2.61636;
        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 6);

        Test.instanceCount ^= i2;
        vMeth(d3);
        i2 += -40;
        i1 <<= i1;
        iArr2 = iArr2;
        long meth_res = i1 + by + i2 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        long l=3224770640L;
        int i=14, i10=-9534, i11=-7, i12=-14, i13=6, i14=141, i15=11, i16=-136, i17=-170;
        boolean b=true;
        double d=-96.9241;
        float f2=-2.492F;

        for (l = 9; l < 311; l++) {
            if ((b = (Math.abs(i) <= (-d))) || bMeth(-61550, byFld, Test.iFld)) break;
            Test.iFld = 54520;
            for (i10 = 3; i10 < 83; ++i10) {
                for (i12 = 2; i12 > l; i12--) {
                    b = Test.bFld;
                    i11 -= (int)l;
                    i11 = (int)f2;
                    Test.iFld >>= (int)-2721529030301732113L;
                }
                i11 *= i13;
                i14 = 1;
                while (++i14 < 2) {
                    f2 = i12;
                }
                switch ((int)((l % 5) + 126)) {
                case 126:
                    iArrFld[(int)(l)] -= (int)f2;
                case 127:
                    for (i15 = 1; i15 < 2; i15++) {
                        i13 >>>= i;
                        b = Test.bFld;
                        i11 += 9028;
                        i13 -= (int)f2;
                        Test.iFld <<= 62934;
                        iArrFld[i10 - 1] *= i;
                        Test.instanceCount += i15;
                        Test.iFld -= i11;
                        i -= (int)Test.instanceCount;
                    }
                    i += (((i10 * Test.iFld) + f2) - i);
                    switch ((int)(((l % 5) * 5) + 30)) {
                    case 35:
                        Test.bFld1 = b;
                        if (b) continue;
                    case 41:
                        i13 *= i12;
                        Test.instanceCount >>= byFld;
                        break;
                    case 43:
                        i16 += (((i10 * i10) + i16) - i10);
                        break;
                    case 38:
                        i16 = i11;
                    case 31:
                        Test.lArrFld[(int)(l)][(int)(l)] -= (long)d;
                    default:
                        Test.iFld += (i10 * i10);
                    }
                    break;
                case 128:
                    if (true) continue;
                    break;
                case 129:
                case 130:
                    i17 += (int)f2;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
