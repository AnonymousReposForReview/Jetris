package tests.javafuzzer950;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:58:16 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5L;
    public static short sFld=6465;
    public static int iFld=7;
    public static float fFld=1.461F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9184);
        FuzzerUtils.init(Test.lArrFld, 58475L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, int i7, int i8) {

        long l1=338391566253517297L;
        int i9=2, i10=-15475;
        boolean b=false;
        float f=-2.76F;
        byte by=27;

        for (l1 = 17; l1 < 393; ++l1) {
            double d=1.33655;
            l += (long)d;
            b = b;
            switch ((int)((l1 % 2) + 61)) {
            case 61:
                i9 *= (int)Test.instanceCount;
                switch ((int)((l1 % 2) + 59)) {
                case 59:
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-43887);
                    i8 /= (int)(i7 | 1);
                    i10 = 4;
                    while (--i10 > 0) {
                        i8 -= (int)l1;
                        i9 += (((i10 * i8) + i8) - i10);
                        l = -17928;
                        i8 += (i10 ^ i10);
                        f = (float)d;
                        i8 += (((i10 * i9) + i10) - by);
                    }
                case 60:
                    f += (-83 + (l1 * l1));
                    break;
                }
                break;
            case 62:
                Test.sFld *= (short)i8;
                break;
            default:
                i8 += (int)(((l1 * f) + i8) - i8);
            }
        }
        long meth_res = l + i7 + i8 + l1 + i9 + (b ? 1 : 0) + i10 + Float.floatToIntBits(f) + by;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(int i3, int i4, int i5) {

        int i6=33, i11=51125, i12=104, i13=-2, i14=-10, i15=173, i16=45165, i17=-5;
        float f1=2.943F;
        double d1=-99.120935;

        i6 = 1;
        while (++i6 < 394) {
            fMeth(Test.instanceCount, 156, i3);
            i3 += (i6 - i4);
            Test.instanceCount += i6;
        }
        for (i11 = 2; i11 < 392; i11++) {
            i12 += i5;
        }
        i13 = 1;
        while (++i13 < 174) {
            f1 *= Test.instanceCount;
            for (i14 = i13; 9 > i14; i14++) {
                i3 <<= -94;
                Test.iArrFld = Test.iArrFld;
            }
            for (i16 = 1; i16 < 9; ++i16) {
                Test.instanceCount = i13;
            }
            i5 += i5;
        }
        i12 *= (int)d1;
        long meth_res = i3 + i4 + i5 + i6 + i11 + i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(d1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i=-50, i1=161, i2=-28862, i18=-1, i19=0, i20=41, i21=-107, i22=-1;
        float f2=-47.1015F;
        long lArr[]=new long[N], lArr1[]=new long[N];

        FuzzerUtils.init(lArr, -10L);
        FuzzerUtils.init(lArr1, 1L);

        Test.instanceCount += (i - (++i));
        lArr = (lArr = (lArr = (lArr = lArr1)));
        i = (int)(lArr1[(i >>> 1) % N] * (--lArr1[(i >>> 1) % N]));
        for (i1 = 4; i1 < 134; ++i1) {
            i2 = (int)(lMeth(i2, i2, 11) + i2);
            for (i18 = 1; i18 < 12; ++i18) {
                Test.iArrFld[i1] -= i;
                switch ((((i2 >>> 1) % 2) * 5) + 62) {
                case 66:
                    for (i20 = 1; i20 < 2; ++i20) {
                        f2 *= Test.instanceCount;
                        i2 = -127;
                        Test.instanceCount += (long)96.126598;
                    }
                    i22 = (int)-4439127183992993424L;
                    i22 -= i1;
                    break;
                case 65:
                    try {
                        i21 = (154 / i22);
                        Test.iArrFld[i18] = (i21 % Test.iArrFld[i1 + 1]);
                        i19 = (i2 / Test.iArrFld[i1 + 1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
            }
        }
        long meth_res = i + i1 + i2 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f2) + i22 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i23=-33491, i24=-11, i25=-1, i26=6194, i27=40452;
        float f3=-114.948F;
        double d2=0.13328, dArr[]=new double[N];
        byte by1=24;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(dArr, 81.8167);
        FuzzerUtils.init(sArr, (short)-16744);

        iMeth();
        Test.iArrFld[(232 >>> 1) % N] ^= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] = -17;
        for (i23 = 200; i23 > 6; i23--) {
            for (f3 = 2; 129 > f3; f3++) {
                for (i26 = 1; i26 < 2; i26++) {
                    dArr[(int)(f3)] *= f3;
                    Test.sFld = (short)i23;
                    i24 += (i26 + Test.instanceCount);
                    Test.lArrFld[(i23 >>> 1) % N] *= (long)-74.325F;
                    Test.fFld -= 252;
                    switch ((i26 % 2) + 104) {
                    case 104:
                    case 105:
                        i27 *= (int)Test.instanceCount;
                        d2 = d2;
                        Test.instanceCount = (long)f3;
                        break;
                    default:
                        switch (((i26 % 4) * 5) + 86) {
                        case 99:
                            Test.instanceCount >>>= i23;
                            switch ((i26 % 3) + 84) {
                            case 84:
                                i27 -= (int)d2;
                                Test.lArrFld[i23] += i25;
                                if (Test.bFld) continue;
                                break;
                            case 85:
                                Test.instanceCount = (long)-24.261F;
                                Test.instanceCount ^= i24;
                                i24 -= i25;
                            case 86:
                                Test.iFld <<= (int)3884913656414681757L;
                                Test.fFld += Test.sFld;
                                break;
                            default:
                                if (Test.bFld) break;
                                Test.iFld += by1;
                                i24 = i26;
                            }
                            i24 = -13631;
                            break;
                        case 96:
                            sArr[i23 - 1] = sArr[(int)(f3 - 1)];
                            break;
                        case 103:
                            Test.iArrFld[i23] >>= i26;
                            break;
                        case 100:
                            Test.iFld -= (int)Test.fFld;
                            break;
                        }
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
