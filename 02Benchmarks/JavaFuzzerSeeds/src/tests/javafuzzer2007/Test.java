package tests.javafuzzer2007;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:25:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static int iFld=0;
    public static float fFld=56.652F;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.sArrFld, (short)32439);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(double d) {


        d *= Test.instanceCount;
        long meth_res = Double.doubleToLongBits(d);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(int i1, int i2) {

        int i3=32934, i4=-8, i5=10, i6=-145, i7=20525;
        float f=-110.588F, f1=-1.805F;
        double d1=0.122678;
        byte by1=-58;

        for (i3 = 211; i3 > 3; --i3) {
            for (i5 = 1; i5 < 8; i5++) {
                i1 += i5;
                Test.iArrFld[i5] += (int)(Long.reverseBytes((long)(f + i5)) * dMeth(d1));
                f = Test.instanceCount;
                Test.iArrFld[i5 + 1] = (int)Test.instanceCount;
                Test.iArrFld[i5 + 1] = i4;
                i7 = 1;
                do {
                    d1 = Test.iFld;
                    i1 -= i7;
                    by1 += (byte)(i7 | (long)f1);
                    Test.iFld = (int)f1;
                    Test.iArrFld[i7 + 1] += Test.iFld;
                    Test.instanceCount = Test.instanceCount;
                    i2 ^= i2;
                } while (++i7 < 2);
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i7 +
            by1 + Float.floatToIntBits(f1);
    }

    public static void vMeth(long l, int i) {

        int i8=-183, i9=11, i10=-9, i11=-10, i12=-46905, i13=-61345, i14=49477;
        float f2=113.911F;
        byte by2=-61;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        vMeth1(-14, Test.iFld);
        i8 = 1;
        while (++i8 < 182) {
            for (i9 = 9; i9 > 1; i9 -= 2) {
                for (i11 = 1; i11 < 3; ++i11) {
                    Test.instanceCount %= ((long)(f2) | 1);
                    i = i12;
                }
                lArr[i9 - 1] -= by2;
                Test.instanceCount += i;
                i12 = (int)-221L;
                b = b;
            }
            for (i13 = 1; i13 < 9; i13++) {
                switch (((i13 % 4) * 5) + 81) {
                case 101:
                    Test.iArrFld[i13 - 1] = i;
                    i12 += (i13 - l);
                    by2 %= (byte)(i9 | 1);
                    break;
                case 82:
                    if (b) continue;
                    break;
                case 83:
                    Test.instanceCount += (i13 * i13);
                case 89:
                    Test.instanceCount *= i9;
                    break;
                }
            }
        }
        vMeth_check_sum += l + i + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + by2 + (b ? 1 : 0) + i13 + i14
            + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=90;
        int i15=45022, i16=0, i17=8, i18=-8, i19=139, i20=-50817, i21=-14, i22=-17289, i23=-1;
        float f3=2.204F;
        short s=-20011;
        boolean b1=false;

        Test.iFld += (by - (Test.iFld + (Test.iFld *= Test.iFld)));
        vMeth(Test.instanceCount, -20647);
        for (i15 = 15; i15 < 333; i15++) {
            Test.iFld += i15;
            if (false) {
                i17 = 1;
                while (++i17 < 79) {
                    f3 += i17;
                    Test.sArrFld[i17] += (short)Test.iFld;
                    Test.iFld <<= Test.iFld;
                    for (i18 = i17; 1 > i18; ++i18) {
                        Test.iFld <<= (int)Test.instanceCount;
                        Test.fFld -= -51;
                        Test.iArrFld[i17 - 1] <<= (int)-3116491705443519367L;
                        try {
                            i19 = (64 / i17);
                            i16 = (i16 % Test.iArrFld[i15 + 1]);
                            Test.iFld = (i15 / -96);
                        } catch (ArithmeticException a_e) {}
                        switch ((i15 % 1) + 120) {
                        case 120:
                            i19 *= (int)Test.instanceCount;
                        }
                        i19 = Test.iFld;
                        i16 = (int)f3;
                        i19 -= s;
                        i19 -= -23;
                    }
                    Test.instanceCount = i18;
                    for (i20 = 1; i20 > 1; --i20) {
                        i21 = 753;
                    }
                    if (b1) continue;
                    i21 = -31240;
                    Test.instanceCount *= s;
                }
                Test.iFld += -8207;
                i22 = 1;
                while (++i22 < 79) {
                    i16 += i23;
                    i16 += (int)Test.instanceCount;
                }
            } else if (true) {
                i16 = i16;
            } else {
                i21 = (int)-2.60907;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
