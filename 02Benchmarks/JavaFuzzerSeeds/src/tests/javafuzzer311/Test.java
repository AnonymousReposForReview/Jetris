package tests.javafuzzer311;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:40:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=18833L;
    public byte byFld=94;
    public static float fFld=87.96F;
    public static int iFld=-103;
    public static byte byFld1=21;
    public static int iFld1=-10576;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.fArrFld, 75.656F);
        FuzzerUtils.init(Test.lArrFld, 2740798587L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        boolean b=false;
        double d=2.93503;
        int i4=-2, i5=-32575, i6=123, i7=-132, i8=164, i9=-50560;
        byte by=95;

        b = b;
        Test.instanceCount >>= Test.iFld;
        d *= Test.iFld;
        for (i4 = 9; i4 < 175; ++i4) {
            Test.instanceCount <<= Test.instanceCount;
            Test.iArrFld[i4] <<= i4;
            Test.iArrFld[i4] = Test.iFld;
            Test.iFld += (((i4 * i5) + Test.instanceCount) - i4);
            for (i6 = 10; i6 > 1; i6--) {
                for (i8 = 2; i8 > 1; --i8) {
                    switch ((i8 % 4) + 91) {
                    case 91:
                        i5 += (i8 * i8);
                        Test.instanceCount += (long)d;
                    case 92:
                        Test.iFld -= Test.iFld;
                        Test.instanceCount = (long)d;
                        break;
                    case 93:
                        i9 = by;
                        break;
                    case 94:
                        i7 += (((i8 * Test.instanceCount) + i4) - Test.instanceCount);
                        break;
                    default:
                        i7 = i7;
                    }
                }
            }
        }
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i3, float f, float f1) {

        double d1=-90.17109, dArr[]=new double[N];
        int i10=35194, i11=1;
        short s=601;

        FuzzerUtils.init(dArr, 101.121259);

        Test.iArrFld[(0 >>> 1) % N] = (int)(Test.fArrFld[(i3 >>> 1) % N]++);
        Test.lArrFld = (Test.lArrFld = Test.lArrFld);
        i3 -= (int)((i3++) + 1.999F);
        Test.fArrFld[(-7 >>> 1) % N] -= lMeth();
        Test.iFld = i3;
        Test.instanceCount >>= Test.iFld;
        try {
            Test.fFld = Test.instanceCount;
            Test.iFld = Test.iFld;
            i3 = Test.iFld;
        }
        catch (UserDefinedExceptionTest exc1) {
            d1 += i3;
            for (double d2 : dArr) {
                for (i10 = 1; i10 < 4; i10++) {
                    Test.instanceCount += 10;
                    i3 >>= i11;
                }
            }
        }
        finally {
            Test.iFld = s;
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i10
            + i11 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i) {

        int i1=5133, i2=-30698, i12=178, i13=152, i14=-225, i15=31485, i16=1, i17=-15862;
        boolean b1=false;

        for (i1 = 196; i1 > 2; --i1) {
            Test.fFld = (++i);
        }
        vMeth1(i2, -59.399F, Test.fFld);
        for (i12 = 4; i12 < 236; ++i12) {
            for (i14 = 7; 1 < i14; i14--) {
                Test.instanceCount = -8;
                Test.iFld = i14;
                for (i16 = 1; i16 < 2; i16++) {
                    Test.instanceCount = -2507;
                    Test.instanceCount >>= i13;
                    Test.instanceCount += i1;
                    Test.byFld1 -= (byte)Test.instanceCount;
                    i13 <<= i13;
                    i17 += (((i16 * i1) + Test.iFld1) - i16);
                    if (b1) break;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i12 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i18=33077, i19=-206, i20=-60, i21=4, i22=2, i23=-18757, i24=5, i25=-106, iArr[]=new int[N];
        float f2=-95.783F;
        short s1=23230;

        FuzzerUtils.init(iArr, 211);

        byFld += (byte)iArr[(41 >>> 1) % N];
        vMeth(Test.iFld1);
        Test.iFld1 += (int)Test.fFld;
        Test.instanceCount -= -58343;
        for (i18 = 3; 363 > i18; i18++) {
            Test.iArrFld[i18] += (int)Test.instanceCount;
            Test.fFld -= 4L;
            for (f2 = 3; f2 < 70; ++f2) {
                iArr[(int)(f2 - 1)] -= (int)Test.fFld;
                Test.iFld >>>= (int)Test.instanceCount;
            }
            i21 = 70;
            while (--i21 > 0) {
                Test.fFld *= Test.fFld;
                Test.iFld += (i21 | i18);
                Test.iArrFld[i18] *= 32992;
                iArr = iArr;
                iArr[i21 - 1] += s1;
                Test.instanceCount -= 80;
                Test.iArrFld[i21 - 1] *= i21;
                i19 *= (int)Test.instanceCount;
                Test.iArrFld[i18 + 1] = i20;
            }
            Test.instanceCount = Test.iFld1;
            i20 |= i21;
            for (i22 = 1; i22 < 70; ++i22) {
                i20 = i18;
                Test.instanceCount = s1;
                Test.instanceCount = (long)f2;
            }
        }
        Test.instanceCount = Test.iFld;
        for (i24 = 18; i24 < 294; ++i24) {
            try {
                i25 = (-1247227248 % i24);
                iArr[i24 - 1] = (59 / i20);
                Test.iArrFld[i24] = (Test.iArrFld[i24] % -1979612253);
            } catch (ArithmeticException a_e) {}
            sArrFld[i24] = (short)Test.instanceCount;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
