package tests.javafuzzer34;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:26:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(int i, int i1) {

        double d=2.17381;

        i = (int)(Test.instanceCount - (--i1));
        i -= (int)d;
        vSmallMeth_check_sum += i + i1 + Double.doubleToLongBits(d);
    }

    public static int iMeth1() {

        int i4=13, i5=-8, i6=-5, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, 0);

        Test.instanceCount &= i4;
        for (i5 = 173; i5 > 4; --i5) {
            iArr1[i5][i5] = (int)Test.instanceCount;
            vSmallMeth(i5, i4);
        }
        Test.instanceCount >>>= Test.instanceCount;
        long meth_res = i4 + i5 + i6 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i3=0, i7=-131, i8=9, i9=-22839, i10=175, i11=32;
        float f=21.797F;
        short s=-26019;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 14L);

        lArr[(i3 >>> 1) % N] *= (i3 * Test.instanceCount);
        i3 <<= iMeth1();
        f -= -2988804322L;
        i7 = 1;
        while (++i7 < 187) {
            for (i8 = i7; i8 < 9; ++i8) {
                i3 = i7;
                switch (((i7 % 2) * 5) + 109) {
                case 115:
                    i3 -= (int)Test.instanceCount;
                    f = l;
                    break;
                case 116:
                    s = (short)34091;
                    for (i10 = 1; i10 < 1; i10++) {
                        if (i11 != 0) {
                        }
                        if (b) continue;
                        l += (49588 + (i10 * i10));
                        i11 >>>= i8;
                    }
                }
            }
        }
        long meth_res = l + i3 + Float.floatToIntBits(f) + i7 + i8 + i9 + s + i10 + i11 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i2=-6, iArr[]=new int[N];
        double d1=65.127529;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(lArr1, 3261680208L);

        for (int smallinvoc=0; smallinvoc<734; smallinvoc++) vSmallMeth(i2, iArr[(i2 >>> 1) % N]--);
        iArr[(i2 >>> 1) % N] -= iMeth(Test.instanceCount);
        for (int i12 : iArr) {
            try {
                i12 = (-32904 % i12);
                i2 = (i12 / i12);
                iArr[(i12 >>> 1) % N] = (255 / i12);
            } catch (ArithmeticException a_e) {}
            i2 = (int)Test.instanceCount;
            lArr1[(i12 >>> 1) % N] -= i2;
            d1 += -1.439F;
            iArr = iArr;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth1 iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
