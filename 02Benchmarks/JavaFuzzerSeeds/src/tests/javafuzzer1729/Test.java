package tests.javafuzzer1729;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:38:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5830550683663119790L;
    public static double dFld=-121.130251;
    public static boolean bFld=true;
    public static float fFld=76.661F;
    public static int iFld=229;
    public static short sArrFld[]=new short[N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)24171);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, 16.110756);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l2, int i4) {

        boolean b=true;
        float f2=2.391F;

        b = b;
        f2 = (float)Test.dFld;
        vMeth2_check_sum += l2 + i4 + (b ? 1 : 0) + Float.floatToIntBits(f2);
    }

    public static void vMeth1(int i3, float f1, long l1) {

        int i5=-56, i6=-61472, i7=43901, i8=-4, i9=499, i10=33018, iArr[]=new int[N];
        short s=10487;

        FuzzerUtils.init(iArr, -35839);

        vMeth2(-182L, 26);
        iArr[(i3 >>> 1) % N] <<= i3;
        for (i5 = 15; i5 < 252; i5++) {
            for (i7 = 1; i7 < 7; ++i7) {
                i8 >>= (int)Test.instanceCount;
                for (i9 = 1; 2 > i9; ++i9) {
                    Test.sArrFld = Test.sArrFld;
                    f1 -= i6;
                    f1 *= f1;
                    if (true) {
                        Test.bArrFld[i9][i9] = Test.bFld;
                        i8 += (i9 | i5);
                        i8 = 49927;
                    }
                    s += (short)(((i9 * i5) + i6) - i8);
                    i10 <<= 5;
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f1) + l1 + i5 + i6 + i7 + i8 + i9 + i10 + s +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i1, int i2) {

        int i11=-245, i12=-28, i13=-4193, i14=-1, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 7);

        vMeth1(i2, Test.fFld, l);
        i1 = i2;
        iArr1[(i2 >>> 1) % N] %= (int)((long)(Test.fFld) | 1);
        for (i11 = 2; i11 < 261; ++i11) {
            for (i13 = 1; i13 < 6; i13++) {
                i12 += (i13 ^ i12);
                Test.dArrFld[i13 + 1] = i1;
                if (Test.bFld) break;
                Test.dArrFld[i13] += i11;
                i12 += i2;
                i2 -= i14;
                i2 = i1;
                try {
                    iArr1[i13] = (-48913 % iArr1[i13 + 1]);
                    iArr1[i11 - 1] = (196127785 / i2);
                    i2 = (i11 / i12);
                } catch (ArithmeticException a_e) {}
                i2 += (i13 - i13);
            }
            Test.instanceCount = i14;
        }
        vMeth_check_sum += l + i1 + i2 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=21, i15=44940, i16=-60, i17=-11, i18=9, i19=-14, i20=0, i21=-4, i22=31, iArr2[]=new int[N];
        double d=112.67985;
        float f=0.174F, f3=1.391F, fArr[]=new float[N];
        short s1=-10983;
        boolean b1=true;
        byte by=23;

        FuzzerUtils.init(fArr, 0.109F);
        FuzzerUtils.init(iArr2, -2);

        i += (int)(d *= Math.min((int)(f * Test.instanceCount), i));
        fArr[(i >>> 1) % N] += (float)(((d - i) * i) - (--i));
        vMeth(Test.instanceCount, i, i);
        for (i15 = 11; i15 < 331; ++i15) {
            i16 += s1;
            Test.instanceCount = Test.instanceCount;
            if (b1) {
                f3 = 1;
                do {
                    i16 *= i;
                    for (i17 = 1; i17 < 1; i17 += 2) {
                        i18 <<= i17;
                    }
                    i16 += -12079;
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld += i15;
                    Test.instanceCount = Test.instanceCount;
                } while (++f3 < 79);
                Test.dArrFld[i15] *= Test.instanceCount;
            } else if (b1) {
                try {
                    iArr2[i15] = (i15 % i);
                    i18 = (iArr2[i15] % i15);
                    i16 = (i16 / i16);
                } catch (ArithmeticException a_e) {}
                i18 += (int)(67.883F + (i15 * i15));
                for (i19 = 1; i19 < 79; i19 += 3) {
                    try {
                        Test.iFld = (i16 % 60971);
                        iArr2[i15 + 1] = (i20 / i);
                        i18 = (-31959 / i);
                    } catch (ArithmeticException a_e) {}
                    Test.bFld = Test.bFld;
                    for (i21 = 4; i21 > i19; i21 -= 2) {
                        Test.instanceCount = i18;
                        switch (((i15 % 5) * 5) + 59) {
                        case 67:
                            s1 = (short)i22;
                        case 64:
                        case 65:
                            Test.bFld = b1;
                            break;
                        case 66:
                            Test.instanceCount *= -4L;
                            break;
                        case 60:
                            by -= (byte)Test.instanceCount;
                            i22 = (int)d;
                            break;
                        default:
                            i16 *= s1;
                        }
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
