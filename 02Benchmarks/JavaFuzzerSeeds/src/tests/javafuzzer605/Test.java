package tests.javafuzzer605;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:28:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9017348871733826509L;
    public volatile float fFld=-2.838F;
    public static short sFld=32627;
    public boolean bFld=false;
    public volatile int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5) {

        int i6=-115, i7=122, i8=0, iArr[]=new int[N];
        float f=0.120F, f1=-1.294F, fArr[]=new float[N];
        double d=1.53670;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 11791);
        FuzzerUtils.init(fArr, -46.363F);
        FuzzerUtils.init(lArr, 950910481L);

        i6 = 1;
        while (++i6 < 353) {
            f = 5;
            while ((f -= 2) > 0) {
                f1 = f1;
                iArr[i6 - 1] = (int)Test.instanceCount;
                fArr[i6] /= (i6 | 1);
                i5 >>= 0;
                i5 += i6;
                i5 <<= i5;
                i5 <<= 18;
            }
            for (i7 = 1; i7 < 5; i7++) {
                iArr[i6] = (int)d;
            }
            iArr[i6 - 1] = -21;
            iArr[i6] += -34434;
            i5 -= -78;
            i8 = i8;
        }
        vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i7 + i8 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public boolean bMeth(int i3, short s, int i4) {

        int i9=4, i10=-12616, i11=-166, i12=132, i13=19900;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)14728);

        vMeth(i4);
        for (i9 = 16; i9 < 308; ++i9) {
            for (i11 = 1; i11 < 6; i11++) {
                i3 += (((i11 * i3) + i12) - i12);
                switch ((((i9 >>> 1) % 5) * 5) + 74) {
                case 94:
                    i13 = 1;
                    while (++i13 < 2) {
                        i10 += (((i13 * i9) + Test.instanceCount) - i9);
                        iArrFld[i13] *= s;
                        fFld += Test.instanceCount;
                        try {
                            i3 = (-167 % iArrFld[i9 - 1]);
                            i12 = (19665 % i12);
                            i12 = (i3 % i12);
                        } catch (ArithmeticException a_e) {}
                        i4 <<= 40;
                        if (b) continue;
                    }
                    i3 -= (int)Test.instanceCount;
                    i3 -= i4;
                case 80:
                    sArr[i11] <<= (short)Test.instanceCount;
                case 89:
                    i3 += (i11 - i13);
                    break;
                case 93:
                    try {
                        i12 = (i12 / i11);
                        iArrFld[i11] = (iArrFld[i9 - 1] / -47);
                        i10 = (i3 / i3);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 84:
                    Test.instanceCount = (long)fFld;
                    break;
                default:
                    i10 += (i11 * i11);
                }
            }
        }
        long meth_res = i3 + s + i4 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public long lMeth(int i1, long l, int i2) {


        bMeth(i2, Test.sFld, i2);
        long meth_res = i1 + l + i2;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-221, i14=-193, i15=-13669, i16=21242, i17=-11632, i18=4;
        boolean b1=false;
        double d1=9.51519;
        long l3=65L, lArr1[][]=new long[N][N];
        byte by=-126;
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr1, -3973593641624599968L);
        FuzzerUtils.init(fArr1, -13.969F);

        i = (int)Math.abs(lMeth(i, Test.instanceCount, i));
        fFld += Test.instanceCount;
        fFld -= Test.instanceCount;
        i -= (int)Test.instanceCount;
        for (i14 = 12; i14 < 311; i14++) {
            lArr1[i14] = lArr1[i14 + 1];
            Test.instanceCount &= i;
            iArrFld = iArrFld;
            b1 = bFld;
            i15 = -7;
            if (true) break;
            if (bFld) {
                Test.instanceCount = Test.instanceCount;
                i = (int)fFld;
                lArr1[i14][i14] *= -193;
                d1 = 1;
                while (++d1 < 84) {
                    for (l3 = 1; l3 < 1; l3++) {
                        i15 *= Test.sFld;
                        i15 *= i15;
                        i16 -= -60575;
                        i16 <<= i16;
                        Test.instanceCount = i14;
                        Test.instanceCount += (long)fFld;
                        Test.instanceCount -= i16;
                    }
                    for (i17 = 1; i17 > 1; --i17) {
                        int i19=-33246;
                        fArr1 = FuzzerUtils.float1array(N, (float)-33.112F);
                        i15 = i19;
                        Test.instanceCount <<= i18;
                    }
                }
            } else {
                i >>>= i;
                i = by;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
