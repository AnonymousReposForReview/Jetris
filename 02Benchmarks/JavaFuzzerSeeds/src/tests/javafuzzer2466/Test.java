package tests.javafuzzer2466;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:02:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-159L;
    public double dFld=0.55982;
    public int iFld=-234;
    public static float fFld=2.518F;
    public static volatile byte byFld=111;
    public static long lFld=-9052231305725693973L;
    public boolean bArrFld[]=new boolean[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l) {

        int i10=-82, i11=-80, i12=-12, i13=-8, i14=38771, i15=2, i16=65, iArr1[]=new int[N];
        boolean b=true;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 2353559396L);
        FuzzerUtils.init(dArr, 57.81426);
        FuzzerUtils.init(iArr1, 57210);

        for (i10 = 13; i10 < 314; i10++) {
            i11 += (i10 * Test.lFld);
            i11 = i11;
            i11 -= i11;
            i11 = (int)Test.instanceCount;
            Test.fFld += (((i10 * i10) + Test.instanceCount) - i10);
        }
        if (b) {
            Test.fFld = i11;
            i12 = 1;
            do {
                i11 += (8 + (i12 * i12));
                for (i13 = 1; i13 < 6; i13++) {
                    lArr[i13 + 1] *= i12;
                    for (i15 = 1; i15 < 2; i15++) {
                        dArr[i15] -= l;
                        iArr1[i12] *= -4764;
                    }
                }
            } while (++i12 < 270);
        } else if (b) {
            iArr1[(62391 >>> 1) % N] -= 27535;
        }
        long meth_res = l + i10 + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i9=39957, i17=-245, i18=-13, i19=170, iArr2[]=new int[N];
        long l1=-4033745126L;
        double d=-81.74462, d1=1.35686;
        short s1=-23664;

        FuzzerUtils.init(iArr2, -183);

        i9 += (int)dMeth(Test.lFld);
        for (l1 = 1; l1 < 121; l1 += 2) {
            Test.fFld -= i17;
            i17 += (int)(l1 * l1);
            Test.fFld = -5L;
            switch ((int)(((l1 % 6) * 5) + 90)) {
            case 104:
                i17 = 0;
                for (d = 1; d < 26; ++d) {
                    i19 = 1;
                    do {
                        i18 -= i17;
                        i17 = i18;
                        Test.instanceCount = i17;
                        i9 = (int)Test.instanceCount;
                        i17 = -13;
                        iArr2[(int)(d)] <<= i17;
                    } while (++i19 < 2);
                }
                break;
            case 97:
                d1 -= l1;
                break;
            case 107:
                Test.instanceCount += (-28 + (l1 * l1));
                break;
            case 114:
                d1 = l1;
            case 95:
                i18 = (int)2.559F;
                break;
            case 100:
                d1 -= s1;
            default:
                i9 >>= i19;
            }
        }
        vMeth_check_sum += i9 + l1 + i17 + Double.doubleToLongBits(d) + i18 + i19 + Double.doubleToLongBits(d1) + s1 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i4=1, i5=-10, i6=47155, i7=10, i8=-7, i20=25910, i21=29876;
        short s=-29259;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 49643L);

        i4 = 1;
        while (++i4 < 221) {
            Test.instanceCount += (((i4 * i2) + Test.instanceCount) - i5);
            i6 = 1;
            do {
                for (i7 = 1; i7 < 1; i7++) {
                    Test.byFld += (byte)(((i7 * Test.instanceCount) + s) - Test.instanceCount);
                    i3 = i5;
                    vMeth();
                    b1 = false;
                    Test.lFld += i2;
                    Test.fFld = Test.byFld;
                }
            } while (++i6 < 7);
            for (i20 = 1; i20 < 7; i20++) {
                lArr1[i4 + 1] = i3;
                b1 = b1;
                i8 -= (int)Test.lFld;
                i3 += (((i20 * i20) + Test.instanceCount) - Test.fFld);
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + s + (b1 ? 1 : 0) + i20 + i21 +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-55, i22=99, i23=30695, i24=-2, i25=-152, i26=-1, i27=4, i28=28736, i29=-51624, i30=191, i31=-185,
            iArr[]=new int[N], iArr3[]=new int[N];
        short s2=-1637;
        boolean b2=false;
        float f=2.662F, fArr[][]=new float[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 0.745F);
        FuzzerUtils.init(iArr, 250);
        FuzzerUtils.init(lArr2, 4128494960L);
        FuzzerUtils.init(iArr3, 12);

        dFld = (iFld + ((iFld + Test.instanceCount) * (Test.fFld * Test.fFld)));
        i = 1;
        do {
            iFld *= (int)((Math.min(Test.instanceCount, Test.instanceCount) & (i >> -103)) - ((21859 * (iFld - i)) *
                (fArr[i][i - 1]++)));
        } while (++i < 225);
        iArr[(iFld >>> 1) % N] = (int)(((iFld++) % (i | 1)) + ((--iArr[(iFld >>> 1) % N]) * (i >> Test.instanceCount)));
        iArr[(i >>> 1) % N] -= (iMeth(i, i22, iFld) * i);
        for (i23 = 5; i23 < 126; ++i23) {
            i24 = i23;
            iFld = i23;
        }
        s2 += (short)i23;
        for (i25 = 16; i25 < 396; ++i25) {
            bArrFld[i25] = b2;
        }
        for (f = 5; f < 331; ++f) {
            switch ((int)(((f % 10) * 5) + 64)) {
            case 83:
            case 78:
                try {
                    i26 = (i24 % 12492);
                    i26 = (-13147 / iArr[(int)(f - 1)]);
                    i22 = (i25 % iArr[(int)(f - 1)]);
                } catch (ArithmeticException a_e) {}
                iArr[(int)(f)] >>= (int)Test.instanceCount;
                i27 &= i22;
                iFld += (int)(((f * i23) + i25) - i24);
                break;
            case 113:
                i22 = i23;
                Test.lFld -= i22;
            case 91:
                for (i28 = 1; i28 < 77; i28++) {
                    i26 += (((i28 * i30) + i23) - Test.lFld);
                    lArr2[i28 + 1] = i;
                    i31 = 1;
                    do {
                        try {
                            i24 = (i27 % 50376);
                            i24 = (iArr3[i31 - 1] / i29);
                            i30 = (-18100 / i30);
                        } catch (ArithmeticException a_e) {}
                        iArr3[(int)(f - 1)] = i;
                        i26 += i31;
                        i27 -= s2;
                    } while (++i31 < 2);
                    lArr2 = FuzzerUtils.long1array(N, (long)3570713609L);
                    lArr2[i28 + 1] = i31;
                    iArr[i28 + 1] -= i24;
                }
                break;
            case 106:
                dFld = Test.instanceCount;
                break;
            case 77:
                Test.fFld = (float)-60.87075;
            case 99:
                i27 -= i28;
            case 110:
                lArr2[(int)(f + 1)] += (long)Test.fFld;
                break;
            case 97:
                iArr3[(int)(f - 1)] -= i23;
                break;
            case 100:
                Test.byFld -= (byte)i28;
                break;
            default:
                Test.instanceCount *= i30;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
