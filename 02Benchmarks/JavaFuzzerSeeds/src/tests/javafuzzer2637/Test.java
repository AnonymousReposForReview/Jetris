package tests.javafuzzer2637;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:44:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3742927467436371126L;
    public static boolean bFld=false;
    public static double dFld=-65.120776;
    public static byte byFld=-23;
    public static short sFld=-19261;
    public static volatile float fFld=108.610F;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4781371816465864042L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=58954, i4=-214, i5=-25, i6=9, i7=-8, i8=42779, i9=-13;
        byte by=-56;
        float fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, 114.597F);
        FuzzerUtils.init(bArr, false);

        for (i3 = 193; 7 < i3; i3--) {
            Test.instanceCount = Test.instanceCount;
            for (i5 = 1; i5 < 9; i5++) {
                i7 = 1;
                while (++i7 < 2) {
                    by = (byte)i5;
                    i2 += (i7 ^ i3);
                    if (i3 != 0) {
                        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + by + i8 + i9 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                }
                Test.instanceCount -= i4;
                for (i8 = 1; i8 < 2; i8++) {
                    double d=1.98680;
                    Test.bFld = false;
                    fArr[i3] += i4;
                    Test.lArrFld[i5] = 7;
                    bArr[i5 + 1] = true;
                    i4 += (((i8 * i4) + Test.instanceCount) - i2);
                    d += i4;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + by + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static float fMeth() {

        int i10=-7, i11=8897, i12=-53221, i13=-171, i14=12, i15=-58084, i16=5440, i17=13, i18=12, i19=-5, iArr[]=new
            int[N];

        FuzzerUtils.init(iArr, -110);

        vMeth1(i10);
        for (i11 = 15; i11 < 347; i11 += 2) {
            i12 += (int)Test.dFld;
            iArr[i11 + 1] += i11;
            Test.instanceCount += (long)Test.dFld;
        }
        for (i13 = 6; 204 > i13; i13++) {
            i14 *= (int)Test.dFld;
            for (i15 = 1; i15 < 8; i15++) {
                for (i17 = 1; i17 < 2; i17++) {
                    iArr[i17] = (int)Test.instanceCount;
                    i10 = (int)Test.instanceCount;
                    Test.byFld += (byte)(((i17 * i19) + Test.instanceCount) - i17);
                    i16 -= i17;
                    iArr[i15 - 1] *= (int)64.459F;
                    i18 -= (int)-39.123245;
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        float f=0.475F, fArr1[]=new float[N];
        int i20=-35867, i21=201, i22=-184, i23=-40;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 218L);
        FuzzerUtils.init(fArr1, -8.694F);

        lArr[(i1 >>> 1) % N] <<= i1;
        fMeth();
        i1 = (int)l;
        try {
            fArr1[(i1 >>> 1) % N] -= (float)Test.dFld;
        }
        catch (ArrayIndexOutOfBoundsException exc3) {
            Test.sFld += (short)f;
            i1 -= i;
            i1 = i1;
            for (i20 = 4; 277 > i20; i20++) {
                l = i;
            }
        }
        finally {
            try {
                for (i22 = 356; i22 > 5; i22 -= 2) {
                    f = Test.instanceCount;
                    l += 2021;
                    Test.lArrFld[i22] -= l;
                }
            }
            catch (UserDefinedExceptionTest exc4) {
                i21 = i20;
            }
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f) + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i24=-185, i25=8, i26=239, i27=-3, i28=-83, i29=5492, i30=-117, i31=29371, iArr1[]=new int[N];
        float f1=-92.235F, fArr2[]=new float[N];

        FuzzerUtils.init(iArr1, 39248);
        FuzzerUtils.init(fArr2, -1.614F);

        vMeth(Test.instanceCount, i24, i24);
        i24 -= -60;
        iArr1[(i24 >>> 1) % N] = 114;
        for (i25 = 10; i25 < 235; ++i25) {
            i26 |= i24;
            i24 += (((i25 * Test.sFld) + i26) - i25);
            switch (((i26 >>> 1) % 1) + 92) {
            case 92:
                if (false) break;
                for (i27 = 112; i27 > 6; --i27) {
                    i26 += i27;
                    i24 += (i27 * i27);
                    for (i29 = 2; i29 > 1; i29--) {
                        Test.instanceCount = Test.instanceCount;
                        i26 = (int)Test.fFld;
                        i30 *= i30;
                    }
                    fArr2[i27 + 1] = Test.instanceCount;
                    Test.sFld += (short)(i27 * Test.instanceCount);
                    i28 = i24;
                }
                i28 += i27;
                break;
            default:
                Test.dFld += i25;
                Test.dFld += -2344883027260984882L;
            }
            i24 += i25;
            iArr1[i25 - 1] *= (int)6L;
            Test.instanceCount -= Test.instanceCount;
            for (f1 = 7; f1 < 112; ++f1) {
                Test.instanceCount -= i29;
                i31 += (int)(((f1 * i30) + i30) - i25);
            }
            i28 <<= i30;
            i28 += (int)(-1738584955138788453L + (i25 * i25));
        }
        Test.instanceCount *= (long)f1;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
