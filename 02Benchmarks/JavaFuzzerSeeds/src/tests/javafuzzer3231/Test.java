package tests.javafuzzer3231;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:22:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8939L;
    public float fFld=-2.784F;
    public static int iFld=4789;
    public static byte byFld=-122;
    public static short sFld=-13189;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -244);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i6=-52, i7=6, i8=-23232;
        boolean b=false;
        float f1=-56.853F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3845837413L);

        Test.iFld = Test.iFld;
        i6 = 228;
        while (--i6 > 0) {
            lArr[(Test.iFld >>> 1) % N] *= Test.instanceCount;
        }
        Test.iFld -= i6;
        for (i7 = 15; 305 > i7; i7++) {
            if (b) break;
            i8 = i8;
            i8 += Test.iFld;
            i8 = Test.iFld;
            Test.iFld -= Test.byFld;
            Test.iFld = (int)f1;
        }
        Test.iFld *= (int)Test.instanceCount;
        Test.bArrFld[(-28271 >>> 1) % N] = b;
        long meth_res = i6 + i7 + i8 + (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(byte by, long l, float f) {

        int i5=214, i9=-10531, i10=-13148, i11=-7652, i12=-2519, i13=69;
        double d1=-50.107418;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, -462626996L);
        FuzzerUtils.init(fArr, 0.992F);

        Test.iArrFld[(59 >>> 1) % N] += i5;
        switch (((i5 >>> 1) % 7) + 14) {
        case 14:
            l = (long)(by - (-(-7 - (25322 + Math.abs(f)))));
            i5 *= (int)lMeth();
        case 15:
        case 16:
            l = l;
        case 17:
            for (i9 = 7; i9 < 126; ++i9) {
                f *= -392;
                d1 *= -5214;
                for (i11 = 1; i11 < 13; ++i11) {
                    Test.iFld += 7918;
                    if (i12 != 0) {
                        vMeth_check_sum += by + l + Float.floatToIntBits(f) + i5 + i9 + i10 +
                            Double.doubleToLongBits(d1) + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr1) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    f *= 14;
                    i13 = 1;
                    while (++i13 < 2) {
                        Test.iArrFld[i9 - 1] = i9;
                        lArr1 = lArr1;
                    }
                }
            }
            break;
        case 18:
            Test.iFld >>= i9;
        case 19:
            fArr[(i13 >>> 1) % N] = i12;
            break;
        case 20:
            Test.iArrFld[(i5 >>> 1) % N] /= 22451;
        default:
            i5 = (int)l;
        }
        vMeth_check_sum += by + l + Float.floatToIntBits(f) + i5 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 +
            i13 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth(int i3, int i4) {

        double d=79.84493;
        int i14=122, i15=-9, i16=-185, i17=12, i18=-14746, i19=12141;
        short s=28531;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 29.90F);

        i4 = (int)(Test.instanceCount--);
        fFld += (float)(((d * Test.instanceCount) - (i4 ^ i4)) * ((Test.iArrFld[(-42586 >>> 1) % N] = i4) - (i4 - i3)));
        vMeth(Test.byFld, Test.instanceCount, 114.257F);
        for (i14 = 1; i14 < 261; i14++) {
            for (i16 = 1; i16 < 6; i16++) {
                Test.iArrFld = Test.iArrFld;
            }
            Test.iFld -= 59;
            Test.iArrFld[i14 - 1] = i3;
            i15 += i16;
            for (i18 = 1; 6 > i18; i18++) {
                i17 = (int)-50L;
                try {
                    i3 = (Test.iArrFld[i14 + 1] / -221);
                    Test.iArrFld[i18] = (i16 / -33718);
                    i3 = (i4 % i15);
                } catch (ArithmeticException a_e) {}
            }
            i4 += (i14 ^ Test.instanceCount);
            i17 += (((i14 * Test.iFld) + s) - Test.iFld);
        }
        fArr1[(i17 >>> 1) % N] = i19;
        long meth_res = i3 + i4 + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + i18 + i19 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-114, i1=2022, i2=38, i20=9724, i21=10528, i23=-103, i24=12, i25=16726, i26=2;
        double d2=-1.116628;
        long l1=82L;
        float f2=-1.269F;

        for (i = 194; 9 < i; i--) {
            i2 = 1;
            do {
                Test.iArrFld[i2] = (int)(iMeth(i, Test.iFld) << -18846L);
                Test.iFld = -18855;
                for (i20 = 1; i20 < 1; i20++) {
                    boolean b1=true;
                    if (b1) break;
                    Test.sFld >>>= (short)i2;
                    d2 *= i;
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld -= i;
                    i21 >>= (int)Test.instanceCount;
                    Test.iArrFld[i2 - 1] = i;
                }
                i1 -= i1;
            } while (++i2 < 136);
            i21 += (i * Test.instanceCount);
            d2 *= Test.instanceCount;
            i23 = 136;
            do {
                Test.iArrFld[i - 1] = (int)Test.instanceCount;
                i21 = i21;
                Test.bFld = true;
                for (i24 = 1; i24 < 1; ++i24) {
                    i21 += (i24 ^ Test.iFld);
                    Test.instanceCount *= (long)fFld;
                    Test.iArrFld[i24 - 1] += -119;
                    i21 += (i24 - i1);
                    Test.iArrFld[i23] -= i20;
                    Test.instanceCount += i24;
                }
                Test.iArrFld[i + 1] *= (int)-91.13F;
                for (l1 = 1; l1 < 1; l1++) {
                    f2 *= Test.iFld;
                }
                i1 += (int)Test.instanceCount;
            } while (--i23 > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
