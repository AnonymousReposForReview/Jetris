package tests.javafuzzer391;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:09:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=240574566L;
    public int iFld=144;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(float f1) {


        f1 *= (f1++);
        vSmallMeth_check_sum += Float.floatToIntBits(f1);
    }

    public static int iMeth1() {

        int i13=58;
        float f3=-16.592F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.73F);

        fArr[(i13 >>> 1) % N] = f3;
        long meth_res = i13 + Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i10, double d2, short s) {

        int i11=20046, i12=-252, i14=62155, i15=-146, i16=4180, i17=-65110, i18=-29966;
        float f2=-25.945F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 8L);

        for (i11 = 2; i11 < 284; i11++) {
            f2 -= ((s++) - ((f2 - i10) + (-236 + iMeth1())));
            i10 = (int)Test.instanceCount;
            i12 += (((i11 * i11) + Test.instanceCount) - i14);
            for (i15 = 1; 6 > i15; i15 += 2) {
                lArr1[i15 + 1] = -3383;
                i10 += i12;
                switch ((i15 % 2) + 46) {
                case 46:
                    for (i17 = 1; 3 > i17; i17++) {
                        Test.iArrFld[i15 + 1] = (int)3534L;
                        Test.instanceCount >>= Test.instanceCount;
                        i12 += (int)(-151L + (i17 * i17));
                        i16 -= i11;
                        d2 = Test.instanceCount;
                        d2 *= i17;
                    }
                    break;
                case 47:
                    i14 += (i15 + i14);
                    break;
                }
            }
        }
        vMeth_check_sum += i10 + Double.doubleToLongBits(d2) + s + i11 + i12 + Float.floatToIntBits(f2) + i14 + i15 +
            i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth() {

        int i7=-47338, i8=225, i9=20738, i19=-19237, i20=-198, i21=-52, i22=56, i23=57565;
        double d1=2.12001, dArr[]=new double[N];
        short s1=24138;
        float f4=-1.628F;
        boolean b=true;

        FuzzerUtils.init(dArr, 0.27228);

        dArr[(i7 >>> 1) % N] -= ((i7 * (i7 + -4)) - i7);
        Test.instanceCount = ((i7 - Math.max(-54631L, -53759L)) >> (++i7));
        vSmallMeth((float)((-d1) + i7));
        for (i8 = 9; i8 < 210; ++i8) {
            vMeth(67, d1, s1);
            Test.instanceCount += (i8 * i8);
            i7 += s1;
            Test.instanceCount *= (long)f4;
            i7 -= i8;
        }
        for (i19 = 7; i19 < 126; i19++) {
            if (b) {
                i21 = 1;
                while (++i21 < 13) {
                    for (i22 = 1; i22 > 1; --i22) {
                        Test.instanceCount *= i9;
                        i9 -= i21;
                    }
                }
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d1) + i8 + i9 + s1 + Float.floatToIntBits(f4) + i19 + i20 + i21 +
            i22 + i23 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-32322, i1=-12, i2=-117, i3=-7, i4=-139, i5=-43431, i6=-45895, i24=0, i25=-38909, i26=61560, i27=57509,
            i28=251;
        float f=1.642F;
        double d=-1.34206;
        long l=13L, lArr[]=new long[N];
        short s2=-20881;

        FuzzerUtils.init(lArr, 65424L);

        Test.iArrFld[(1574 >>> 1) % N] = (int)((-(-(i - f))) + d);
        i += (int)(--lArr[(i >>> 1) % N]);
        for (i1 = 12; 243 > i1; i1++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(((i - i) * Math.max(i1, i)) * 250);
            for (i3 = 5; 109 > i3; i3++) {
                i4 = (int)(-Float.intBitsToFloat((int)(i + Test.instanceCount)));
                i4 *= (int)(iFld + (Math.max(i, i4) - Test.instanceCount));
                i4 = (int)((i4 * (i + -73.438F)) - ((-127 + (iFld - iFld)) + -227));
                for (i5 = i1; 2 > i5; i5++) {
                    vSmallMeth(iMeth() + i6);
                    i4 += (int)(-134L + (i5 * i5));
                }
                for (l = 1; l < 2; l++) {
                    if (bFld) {
                        f = Test.instanceCount;
                    }
                    i6 = (int)Test.instanceCount;
                    i4 = (int)l;
                }
                i4 = 82;
                lArr[i3 + 1] -= -46;
            }
            for (i25 = 4; i25 < 109; ++i25) {
                Test.instanceCount += 6767;
                for (i27 = 1; i27 < 2; i27++) {
                    Test.instanceCount = i28;
                    if (bFld) continue;
                    i26 = 0;
                    i4 *= (int)f;
                    Test.instanceCount <<= s2;
                    Test.instanceCount = i;
                    lArr[i1 + 1] -= i28;
                    i28 ^= (int)Test.instanceCount;
                }
                Test.instanceCount += (((i25 * l) + i3) - i1);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
