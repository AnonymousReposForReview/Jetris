package tests.javafuzzer3058;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:21:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-11653L;
    public static volatile byte byFld=-9;
    public static float fFld=0.390F;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 63833L);
        FuzzerUtils.init(Test.fArrFld, 2.420F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9, int i10, int i11) {

        int i12=-11, i13=-14, i14=-27706, i15=-177, i16=9, i17=5, iArr1[]=new int[N];
        boolean b=false;
        short s2=-17624;
        float f4=2.384F;
        byte by2=13;
        double d=2.130458;

        FuzzerUtils.init(iArr1, 8);

        for (i12 = 14; i12 < 328; ++i12) {
            iArr1[i12] += (int)197L;
            for (i14 = i12; i14 < 5; ++i14) {
                try {
                    i9 = (i12 % 1454890245);
                    iArr1[i14] = (i12 / 27165);
                    i9 = (41469 / i13);
                } catch (ArithmeticException a_e) {}
                iArr1[i14] += -4;
                for (i16 = 1; i16 < 1; i16++) {
                    i17 >>= i10;
                    i9 += i11;
                    switch ((i16 % 9) + 71) {
                    case 71:
                        b = b;
                        Test.instanceCount *= i16;
                        s2 -= (short)f4;
                    case 72:
                        iArr1[i14] = by2;
                        f4 -= i14;
                        d += i14;
                        break;
                    case 73:
                        i15 = -5441;
                    case 74:
                        f4 += (((i16 * i11) + i16) - by2);
                        break;
                    case 75:
                        f4 += i16;
                        break;
                    case 76:
                        Test.instanceCount += (((i16 * f4) + f4) - i12);
                    case 77:
                    case 78:
                        Test.instanceCount |= i9;
                        break;
                    case 79:
                        i15 += 53401;
                        break;
                    }
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + s2 +
            Float.floatToIntBits(f4) + by2 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f3, int i8, byte by1) {

        long l2=28978L;
        int i19=-34936, i20=-13, i21=-8, i22=-14, i23=-102, i24=50411, iArr2[]=new int[N];
        short s3=2039;

        FuzzerUtils.init(iArr2, 201);

        f3 += ((iMeth1(i8, 157, i8) ^ i8) >> l2);
        for (int i18 : iArr2) {
            i8 = i18;
            i8 = i18;
            f3 *= i8;
            for (i19 = 1; i19 < 4; ++i19) {
                Test.instanceCount += i19;
            }
            for (i21 = 1; 4 > i21; i21++) {
                i18 = (int)7L;
                i8 += (((i21 * Test.instanceCount) + f3) - i20);
            }
            i8 = (int)Test.instanceCount;
            Test.lArrFld[(-177 >>> 1) % N] -= s3;
            for (i23 = 1; i23 < 4; i23++) {
                i20 -= i21;
            }
        }
        i20 <<= -107;
        long meth_res = Float.floatToIntBits(f3) + i8 + by1 + l2 + i19 + i20 + i21 + i22 + s3 + i23 + i24 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(short s1, int i2) {

        int i3=-76, i4=7563, i5=1, i6=-30, i7=1;
        long l=2675174165352863387L;

        for (i3 = 11; i3 < 317; ++i3) {
            i4 += (((i3 * i4) + i4) - i4);
            Test.instanceCount = (((i3 - i3) + i4) - ((Test.instanceCount * i3) + i2));
            if (i2 != 0) {
                vMeth_check_sum += s1 + i2 + i3 + i4 + i5 + i6 + l + i7;
                return;
            }
            for (i5 = 1; 5 > i5; ++i5) {
                for (l = 1; l < 2; l++) {
                    float f2=-1.775F;
                    iArrFld[(int)(l - 1)] += i4;
                    f2 += i2;
                    i6 -= iMeth(40.476F, i4, Test.byFld);
                }
                Test.fFld += (i5 * i5);
                iArrFld[i5] = i4;
                i4 >>>= i5;
                if (true) break;
                if (Test.bFld) continue;
                if (Test.bFld) break;
            }
        }
        vMeth_check_sum += s1 + i2 + i3 + i4 + i5 + i6 + l + i7;
    }

    public void mainTest(String[] strArr1) {

        int i=-85, i1=-164, i25=-2, i26=-13, i27=50324, i28=-7, i29=55491, i30=61827, i31=-10, iArr[][]=new int[N][N];
        short s=-18073;
        float f=-2.654F;
        byte by=-57;
        double d1=-116.123811, d2=0.101766;
        long l4=-7L;

        FuzzerUtils.init(iArr, -200);

        for (i = 169; i > 7; i--) {
            s -= (short)(f++);
            i1 <<= (int)(Test.lArrFld[i - 1]--);
            by -= (byte)(((i1 + i) + -26494) + 89L);
            by = (byte)((Test.instanceCount++) - i1);
            by -= (byte)iArr[i - 1][i];
            i1 += (((i * by) + i1) - by);
            vMeth((short)(9593), i);
            i1 += (((i * i) + s) - f);
            d1 -= i;
        }
        for (l4 = 6; l4 < 316; ++l4) {
            Test.instanceCount += i26;
        }
        Test.instanceCount = Test.byFld;
        Test.instanceCount += i1;
        for (i27 = 6; 121 > i27; ++i27) {
            for (i29 = 8; i29 < 218; i29++) {
                i26 += (((i29 * i28) + i26) - i1);
                iArr[i29][i27] >>= (int)Test.instanceCount;
                iArr[i27][i27] -= i28;
                switch ((i27 % 5) + 66) {
                case 66:
                    Test.byFld = by;
                    break;
                case 67:
                    for (d2 = i27; d2 < 2; ++d2) {
                        i28 ^= i25;
                        switch (((-174 >>> 1) % 4) + 27) {
                        case 27:
                        case 28:
                            Test.bFld = Test.bFld;
                            Test.instanceCount -= (long)-2.125873;
                            s *= (short)i27;
                        case 29:
                            i31 <<= i25;
                            if (Test.bFld) break;
                            Test.lArrFld[(int)(d2 - 1)] = i31;
                            break;
                        case 30:
                            iArrFld[i29 + 1] >>= s;
                        }
                    }
                    break;
                case 68:
                    iArrFld[i27 - 1] -= i27;
                    break;
                case 69:
                    iArr[i27] = iArrFld1[i27 + 1];
                    break;
                case 70:
                    Test.instanceCount += (((i29 * s) + i29) - i27);
                    break;
                default:
                    i1 = (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
