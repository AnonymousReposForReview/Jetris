package tests.javafuzzer2036;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:44:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=553879289728236319L;
    public static int iFld=-100;
    public static short sFld=30046;
    public static byte byFld=96;
    public static boolean bFld=false;
    public static float fFld=53.549F;
    public static double dFld=120.108336;
    public int iFld1=-231;
    public long lArrFld[][]=new long[N][N];

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l1) {

        int i1=-102, i2=-96, i3=0, i4=4, i5=6, iArr[]=new int[N];
        double d=-2.122553;
        float f1=-12.742F;
        boolean b=false;

        FuzzerUtils.init(iArr, -7);

        i1 = 1;
        do {
            i2 = 6;
            do {
                Test.iFld -= (int)d;
                f1 += (i2 + i1);
                Test.iFld *= (int)f1;
                for (i3 = 1; i3 < 3; i3++) {
                    b = false;
                    i4 = (int)d;
                }
                i5 = 1;
                do {
                    Test.iFld = (int)Test.instanceCount;
                    Test.instanceCount <<= 13967L;
                    Test.iFld += (int)Test.instanceCount;
                    iArr[i1 - 1] = (int)l1;
                    Test.instanceCount *= 6;
                } while (++i5 < 3);
                Test.sFld |= Test.sFld;
            } while ((i2 -= 3) > 0);
        } while (++i1 < 295);
        long meth_res = l1 + i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i3 + i4 + (b ? 1 : 0) +
            i5 + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(long l) {

        float f=0.490F, fArr[]=new float[N];
        int i6=-27174, i7=43000, i8=7, i9=-11, i10=-76, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2L);
        FuzzerUtils.init(iArr1, -16084);
        FuzzerUtils.init(fArr, -2.130F);

        f *= (float)dMeth(l);
        lArr[(Test.iFld >>> 1) % N] += (long)f;
        i6 = 1;
        while (++i6 < 218) {
            Test.byFld += (byte)i6;
            if (Test.iFld != 0) {
            }
            Test.iFld >>>= -15250;
            for (i7 = 1; i7 < 7; i7 += 3) {
                for (i9 = 1; i9 < 4; ++i9) {
                    Test.instanceCount = i7;
                    iArr1[i9 + 1] += -3;
                    Test.instanceCount *= -54;
                    i10 += (i9 ^ i8);
                }
                i8 = (int)Test.instanceCount;
                if (Test.bFld) continue;
                fArr[i6 - 1] = Test.byFld;
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i) {

        int i11=-64667, i12=-37, i13=-14, i14=55487, i15=-112, i16=-2, iArr2[]=new int[N];
        double d1=0.45944;

        FuzzerUtils.init(iArr2, -36253);

        i = iMeth(Test.instanceCount);
        i = Test.iFld;
        for (i11 = 10; i11 < 343; ++i11) {
            iArr2[i11] -= Test.iFld;
            for (i13 = 1; i13 < 5; i13++) {
                for (i15 = 1; i15 < 2; ++i15) {
                    iArr2[i15 - 1] <<= (int)Test.instanceCount;
                    Test.fFld = Test.instanceCount;
                    d1 += i14;
                    Test.iFld = Test.iFld;
                    Test.iFld += i15;
                    i12 += i15;
                    i14 = Test.iFld;
                }
                iArr2[i11] = i16;
                i12 += i13;
            }
        }
        long meth_res = i + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i17=-11299, i18=-20972, i19=14337, i20=174, i21=-8948, i22=156, i23=-24157, i24=-59985, i25=8059, i26=35,
            i27=-54, iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr3, -13);

        try {
            bMeth(Test.iFld);
        }
        catch (ArrayIndexOutOfBoundsException exc2) {
            Test.dFld = Test.instanceCount;
            for (i17 = 10; i17 < 223; ++i17) {
                iArr3[i17 - 1][i17 - 1] = Test.iFld;
            }
        }
        catch (NullPointerException exc3) {
            for (i19 = 6; i19 < 154; ++i19) {
                Test.fFld -= i17;
                Test.dFld *= Test.iFld;
                for (i21 = i19; i21 < 169; i21++) {
                    Test.fFld += (((i21 * i20) + i19) - Test.instanceCount);
                    i22 = 83;
                    for (i23 = 1; 1 > i23; i23++) {
                        i18 -= Test.sFld;
                        iArr3[i21][i23] = i20;
                        i22 /= (int)(i22 | 1);
                        i24 += (i23 - i17);
                    }
                    i18 &= (int)Test.instanceCount;
                    Test.sFld += (short)(i21 * i21);
                    if (Test.bFld) break;
                    i20 += (i21 * i21);
                }
                i22 = (int)Test.instanceCount;
                i24 -= (int)Test.dFld;
                Test.instanceCount *= i18;
                lArrFld[i19] = lArrFld[i19 - 1];
                i25 += i22;
                iFld1 = i23;
                for (i26 = 5; i26 < 169; ++i26) {
                    Test.iFld += (((i26 * i26) + Test.byFld) - Test.instanceCount);
                    iFld1 = -226;
                }
            }
            i25 <<= i20;
        }
        finally {
            Test.iFld <<= i18;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
