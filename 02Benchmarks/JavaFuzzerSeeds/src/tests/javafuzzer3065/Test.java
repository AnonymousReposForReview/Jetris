package tests.javafuzzer3065;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:22:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-248L;
    public static double dFld=-2.31065;
    public static int iFld=-169;
    public static boolean bFld=true;
    public static short sFld=15788;
    public static byte byFld=125;
    public short sArrFld[]=new short[N];
    public static boolean bArrFld[]=new boolean[N];
    public static volatile double dArrFld[]=new double[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.dArrFld, 88.26529);
        FuzzerUtils.init(Test.fArrFld, 31.128F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by1, long l) {

        int i4=-31, i5=0, i6=-138, i7=-35511, i8=27508, i9=4722, iArr[]=new int[N];
        float f=123.68F;
        short s=6691;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(lArr, -7L);

        for (i4 = 1; i4 < 343; i4++) {
            switch (((i4 % 2) * 5) + 61) {
            case 64:
                f = i4;
                Test.dFld -= Test.iFld;
                Test.iFld %= (int)1.483F;
                try {
                    Test.iFld = (iArr[i4 - 1] / i5);
                    iArr[i4] = (i4 % 16448128);
                    i5 = (i5 / -112);
                } catch (ArithmeticException a_e) {}
                break;
            case 62:
                s = (short)i5;
                for (i6 = 1; i6 < 5; ++i6) {
                    f = Test.iFld;
                    f += i4;
                    switch (((i6 >>> 1) % 5) + 96) {
                    case 96:
                        for (i8 = 1; 2 > i8; ++i8) {
                            i7 *= Test.iFld;
                            Test.iFld += i8;
                            lArr[i8] += i5;
                        }
                        break;
                    case 97:
                        if (i7 != 0) {
                        }
                        break;
                    case 98:
                        f = i6;
                        break;
                    case 99:
                        Test.bArrFld[i6] = Test.bFld;
                    case 100:
                        l >>>= i9;
                        break;
                    default:
                        iArr[i4] *= i8;
                    }
                }
            }
        }
        long meth_res = by1 + l + i4 + i5 + Float.floatToIntBits(f) + s + i6 + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(byte by, int i2, int i3) {

        int i11=-43, i12=10, i13=-56, i14=-59407, i15=-2, i16=2, iArr1[]=new int[N];
        float f1=101.367F;

        FuzzerUtils.init(iArr1, 66);

        by *= (byte)((~iMeth(by, Test.instanceCount)) + 34553);
        for (int i10 : iArr1) {
            Test.iFld *= i3;
            for (i11 = 1; i11 < 4; ++i11) {
                i10 += i11;
            }
            Test.bFld = Test.bFld;
            for (i13 = 4; i13 > 1; --i13) {
                Test.dArrFld[i13 - 1] = -166;
                Test.instanceCount = Test.instanceCount;
                Test.dFld -= i11;
                for (i15 = 1; i15 < 2; i15++) {
                    Test.iFld += i14;
                    f1 += i14;
                    Test.dFld += Test.instanceCount;
                }
                if (i10 != 0) {
                    vMeth1_check_sum += by + i2 + i3 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
            }
        }
        vMeth1_check_sum += by + i2 + i3 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        byte by2=39;
        double d1=76.93238;
        int i17=-13, i18=-28594, i19=109, i20=124;
        float f2=-120.364F;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-23860);

        Test.instanceCount -= Test.iFld;
        Test.iFld *= ((-(Test.iFld + Test.iFld)) - Test.iFld);
        Test.iFld *= (int)Float.intBitsToFloat((Test.iFld - Test.iFld) - Test.iFld);
        Test.bFld = (Test.bFld & Test.bFld);
        vMeth1(by2, Test.iFld, Test.iFld);
        for (d1 = 12; d1 < 275; ++d1) {
            Test.iFld <<= Test.sFld;
            Test.iFld >>= 73;
            Test.iFld += (int)f2;
            for (i18 = 1; i18 < 6; i18++) {
                i19 = i18;
                i19 <<= (int)Test.instanceCount;
                i20 = 2;
                while ((i20 -= 3) > 0) {
                    i19 += (-9 + (i20 * i20));
                    sArr[i18][i18] = (short)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += by2 + Double.doubleToLongBits(d1) + i17 + Float.floatToIntBits(f2) + i18 + i19 + i20 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-40, i1=37443, i21=36, i22=14, i23=-52831, i24=-3, i25=0, i26=240, i27=-53378, i28=14, iArr2[]=new
            int[N], iArr3[]=new int[N];
        double d=2.100733;
        float f3=-2.849F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(fArr, -2.753F);
        FuzzerUtils.init(iArr3, -13014);
        FuzzerUtils.init(lArr1, -12L);

        Test.instanceCount = (long)(sArrFld[(i >>> 1) % N] += (short)((i - Test.dFld) + (i - i)));
        for (d = 23; d < 369; ++d) {
            vMeth();
            Test.fArrFld[(int)(d)] = Test.fArrFld[(int)(d)];
            for (i21 = 4; 73 > i21; ++i21) {
                Test.instanceCount <<= 38395L;
                i = i;
            }
            i22 <<= Test.iFld;
            iArr2[(int)(d + 1)] *= (int)f3;
            for (i23 = 2; i23 < 73; ++i23) {
                switch ((i23 % 8) + 21) {
                case 21:
                    Test.fArrFld[i23][i23] = i;
                case 22:
                    for (i25 = 1; i25 < 2; ++i25) {
                        Test.iFld = (int)f3;
                    }
                    break;
                case 23:
                    i += (((i23 * Test.instanceCount) + Test.instanceCount) - i26);
                    for (i27 = 1; 2 > i27; ++i27) {
                        Test.byFld += Test.byFld;
                        i = 177;
                        Test.instanceCount = 10570;
                        fArr[i27 - 1] *= -60212L;
                        Test.instanceCount += Test.instanceCount;
                        f3 -= i21;
                        Test.sFld = Test.byFld;
                        f3 += Test.instanceCount;
                        try {
                            i26 = (i21 / iArr2[(int)(d)]);
                            i24 = (177 % i);
                            iArr3[(int)(d)] = (iArr2[i27] % iArr3[i27]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = (long)d;
                    }
                    break;
                case 24:
                    if (Test.bFld) break;
                    Test.instanceCount = Test.iFld;
                    lArr1[(int)(d)] += i23;
                    i24 = i23;
                    break;
                case 25:
                    f3 -= i;
                    break;
                case 26:
                    try {
                        i = (-222 / iArr3[(int)(d)]);
                        i22 = (iArr3[(int)(d)] % iArr3[i23]);
                        i22 = (-4994926 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 27:
                    Test.instanceCount -= i26;
                    break;
                case 28:
                    Test.sFld += (short)i27;
                    break;
                default:
                    i1 += (i23 * i23);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
