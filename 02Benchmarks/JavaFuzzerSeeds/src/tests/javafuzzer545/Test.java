package tests.javafuzzer545;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:26:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=-45168;
    public boolean bFld=true;
    public double dFld=19.33815;
    public volatile short sFld=15497;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 271033209L);
        FuzzerUtils.init(Test.iArrFld, 13);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, boolean b, int i2) {

        int i3=-4, i4=-166, i5=-14, i6=16577;
        byte by1=-30;
        double d=2.79368;
        short s=3949;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 26540L);

        i2 = (int)Test.instanceCount;
        i3 = 178;
        while (--i3 > 0) {
            for (i4 = 1; 9 > i4; ++i4) {
                by1 -= (byte)Test.iFld;
                i5 += i2;
                Test.bArrFld[i4] = b;
                i6 = 1;
                while (++i6 < 2) {
                    d -= Test.instanceCount;
                    Test.instanceCount = (long)8.787F;
                    Test.iFld <<= i2;
                    s *= (short)i5;
                    f1 *= -1.903F;
                    lArr = lArr;
                }
                Test.iFld += i4;
                Test.instanceCount = (long)f1;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + i2 + i3 + i4 + i5 + by1 + i6 +
            Double.doubleToLongBits(d) + s + FuzzerUtils.checkSum(lArr);
    }

    public static byte byMeth(int i) {

        float f2=2.801F, f3=-29.550F;
        boolean b1=false;
        int i7=-138, i8=39, i9=-109, i10=-56835, iArr[]=new int[N], iArr1[]=new int[N];
        double d1=2.69230;
        short s1=20561;

        FuzzerUtils.init(iArr, -237);
        FuzzerUtils.init(iArr1, -209);

        for (int i1 : iArr) {
            vMeth1(f2, b1, i1);
            iArr[(-125 >>> 1) % N] = i;
            Test.iFld *= i1;
            f2 = Test.iFld;
            for (i7 = 1; i7 < 4; ++i7) {
                iArr = iArr;
                Test.instanceCount += Test.iFld;
            }
            Test.iFld &= i1;
            for (d1 = 1; 4 > d1; d1++) {
                iArr1[(int)(d1 + 1)] += (int)Test.instanceCount;
                for (f3 = 1; f3 < 2; ++f3) {
                    Test.iFld += (int)((long)f3 ^ s1);
                    i9 >>= i8;
                    b1 = b1;
                }
            }
        }
        long meth_res = i + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i7 + i8 + Double.doubleToLongBits(d1) + i9 +
            Float.floatToIntBits(f3) + i10 + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth() {

        float f=40.30F;
        byte by=74;
        double d2=0.57738;
        int i11=243, i12=-232, i13=-49201, i14=9, i15=-8, iArr2[]=new int[N];
        short s2=-11677;

        FuzzerUtils.init(iArr2, -14);

        f += Float.intBitsToFloat((Test.iFld - by) / (byMeth(Test.iFld) | 1));
        Test.instanceCount = Test.iFld;
        d2 = Test.iFld;
        i11 = 1;
        do {
            switch (((i11 % 9) * 5) + 74) {
            case 80:
                iArr2 = iArr2;
                for (i12 = 1; i12 < 7; ++i12) {
                    for (i14 = 1; i14 < 2; ++i14) {
                        iArr2[i11] /= (int)(i14 | 1);
                        i13 -= i15;
                    }
                    f -= -2;
                    Test.iFld -= 65;
                    Test.iFld += (183 + (i12 * i12));
                    f = i15;
                    try {
                        i15 = (iArr2[i12] / 247);
                        iArr2[i12 - 1] = (i14 % -7188);
                        iArr2[i12] = (-105 % i14);
                    } catch (ArithmeticException a_e) {}
                }
                break;
            case 89:
                iArr2[i11] = -11793;
                break;
            case 87:
                Test.instanceCount <<= i13;
                break;
            case 92:
            case 118:
                Test.lArrFld = Test.lArrFld;
                break;
            case 97:
                s2 = (short)Test.instanceCount;
            case 119:
                s2 += (short)i11;
                break;
            case 84:
                d2 *= i14;
                break;
            case 109:
                iArr2[i11 - 1] += (int)d2;
                break;
            }
        } while (++i11 < 240);
        vMeth_check_sum += Float.floatToIntBits(f) + by + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15 +
            s2 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i18=-7, i19=-14, i20=-30033, i21=0, i22=-231, i23=0;
        float f4=-1.756F;
        byte by2=114;

        vMeth();
        for (int i17 : Test.iArrFld) {
            bFld = bFld;
            for (i18 = 2; 63 > i18; i18++) {
                if (bFld) {
                    switch (((i19 >>> 1) % 2) + 12) {
                    case 12:
                        for (i20 = 2; i20 > 1; i20 -= 2) {
                            if (bFld) {
                                switch ((i20 % 7) + 89) {
                                case 89:
                                    i17 = (int)Test.instanceCount;
                                    break;
                                case 90:
                                    i17 *= i19;
                                    switch ((i22 >>> 1) % 8) {
                                    case 0:
                                        Test.iFld *= (int)f4;
                                        Test.instanceCount += (((i20 * Test.iFld) + i19) - i17);
                                        break;
                                    case 1:
                                        dFld *= i22;
                                        break;
                                    case 2:
                                        Test.bArrFld[i20] = true;
                                        i19 >>= 111;
                                        break;
                                    case 3:
                                        Test.iFld += (i20 ^ i17);
                                        f4 *= Test.instanceCount;
                                        Test.iFld = (int)Test.instanceCount;
                                        break;
                                    case 4:
                                    case 5:
                                        i22 -= i18;
                                        switch (((i20 % 2) * 5) + 72) {
                                        case 75:
                                            by2 = (byte)i17;
                                            break;
                                        case 81:
                                            Test.instanceCount *= -8189484593748917903L;
                                            Test.iArrFld[i20] = (int)f4;
                                            fArrFld[i20 + 1] += Test.iFld;
                                            dFld -= Test.iFld;
                                            break;
                                        default:
                                            sFld = (short)i23;
                                            i17 -= 12045;
                                            fArrFld[i20] *= i19;
                                        }
                                        break;
                                    case 6:
                                        f4 = 1L;
                                    case 7:
                                        i21 = i19;
                                        break;
                                    default:
                                        i21 >>>= i21;
                                    }
                                    break;
                                case 91:
                                    i22 -= (int)-39.878F;
                                    break;
                                case 92:
                                    Test.iArrFld[i20 + 1] *= i17;
                                case 93:
                                    Test.iArrFld[i20 + 1] <<= i20;
                                    break;
                                case 94:
                                    if (bFld) continue;
                                case 95:
                                    f4 = f4;
                                    break;
                                }
                            }
                        }
                        break;
                    case 13:
                        Test.iFld = i21;
                        break;
                    default:
                        i19 = Test.iFld;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
