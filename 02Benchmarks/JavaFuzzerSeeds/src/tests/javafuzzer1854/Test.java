package tests.javafuzzer1854;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:35:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4088137042322723891L;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6770057250347450633L);
        FuzzerUtils.init(Test.iArrFld, 218);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l2, int i3) {

        int i4=-6, i5=62532, i6=62943, iArr[]=new int[N];
        float f1=2.30F;
        double d=-35.58836;

        FuzzerUtils.init(iArr, -10);

        iArr[(i3 >>> 1) % N] *= (int)l2;
        i3 = i3;
        i4 = 1;
        while (++i4 < 211) {
            iArr[i4 + 1] -= (int)Test.instanceCount;
            Test.instanceCount = (long)f1;
            Test.instanceCount = l2;
            for (i5 = i4; i5 < 8; i5++) {
                i6 = i5;
                i6 += (((i5 * l2) + i4) - i3);
                i6 += i5;
                f1 += -1.735F;
                f1 += (i5 * Test.instanceCount);
                d *= i6;
                iArr[i5 - 1] -= (int)Test.instanceCount;
                Test.instanceCount += (-85 + (i5 * i5));
            }
        }
        long meth_res = l2 + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i2, long l1) {

        byte by=64;
        float f=45.739F, f2=-121.937F, fArr[][]=new float[N][N];
        boolean b1=true;
        int i7=11, i8=-8, i9=-4, i10=7, i11=5;

        FuzzerUtils.init(fArr, 0.65F);

        i2 = (int)Float.intBitsToFloat((int)((134 - (--by)) - (fArr[(i2 >>> 1) % N][(i2 >>> 1) % N]++)));
        f = (float)((f += (float)(1.77723 * i2)) * f);
        b1 = b1;
        i2 >>= (int)Math.max(Test.instanceCount *= (i2 >>> -11), l1--);
        fArr[(i2 >>> 1) % N][(57631 >>> 1) % N] = lMeth(Test.instanceCount, 251);
        for (i7 = 2; 146 > i7; i7++) {
            i2 = (int)Test.instanceCount;
            if (b1) {
                i8 <<= i8;
                for (i9 = 1; i9 < 11; ++i9) {
                    i11 = 1;
                    while (++i11 < 2) {
                        i2 += (i11 + by);
                        Test.instanceCount = 101;
                        i8 += -4021;
                        if (b1) continue;
                    }
                }
            } else if (b1) {
                Test.lArrFld[i7] <<= l1;
            } else {
                Test.lArrFld[(i11 >>> 1) % N] -= (long)f2;
            }
        }
        vMeth1_check_sum += i2 + l1 + by + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + i11 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, long l, boolean b) {

        int i12=-46174, i13=7, i14=202;
        byte by1=74;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth1(-109, l);
        Test.iArrFld[(i1 >>> 1) % N] *= (int)78.23382;
        i1 = (int)Test.instanceCount;
        for (i12 = 2; i12 < 235; ++i12) {
            if (b) continue;
            switch (((i12 >>> 1) % 1) + 38) {
            case 38:
                i1 += (((i12 * i13) + i13) - i12);
                break;
            }
            i13 *= i13;
            i14 = 1;
            do {
                i1 |= i12;
                if (i14 != 0) {
                    vMeth_check_sum += i1 + l + (b ? 1 : 0) + i12 + i13 + i14 + by1 + FuzzerUtils.checkSum(bArr);
                    return;
                }
                by1 >>= (byte)230;
                i13 += 60509;
                bArr[i14 - 1] = b;
                i1 += (int)l;
            } while ((i14 += 3) < 7);
        }
        vMeth_check_sum += i1 + l + (b ? 1 : 0) + i12 + i13 + i14 + by1 + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        short s=-20021;
        int i=14307, i15=-125, i16=-10, i17=-3602, i18=12, i19=10, i20=48290, i22=-246;
        float f3=46.615F;
        double d2=115.26609;

        s = (short)(i ^= (i++));
        Test.lArrFld[(i >>> 1) % N] -= (long)(dArrFld[(-2471 >>> 1) % N]--);
        vMeth(i, Test.instanceCount, Test.bFld);
        for (i15 = 343; i15 > 4; i15--) {
            i16 += (i15 * i15);
            for (i17 = i15; i17 < 74; i17 += 3) {
                f3 += i17;
                i18 += (((i17 * i17) + i17) - i15);
                for (i19 = 1; 1 > i19; ++i19) {
                    int i21=155;
                    double d1=0.92369;
                    f3 = -3;
                    Test.iArrFld = Test.iArrFld;
                    i16 += i15;
                    i16 += i16;
                    Test.instanceCount += i16;
                    Test.instanceCount += i21;
                    switch ((i15 % 2) + 17) {
                    case 17:
                        d1 += d1;
                        break;
                    case 18:
                        Test.iArrFld[i17 + 1] = i15;
                        i18 += (i19 ^ i21);
                        i20 = (int)Test.instanceCount;
                        break;
                    default:
                        i = i18;
                    }
                    Test.iArrFld[i17 + 1] = i21;
                }
                i16 |= i18;
                i22 = 1;
                do {
                    d2 *= -3249059375L;
                    d2 -= -59009;
                    i18 += (((i22 * i) + i22) - i18);
                    d2 = i16;
                    Test.iArrFld = Test.iArrFld;
                    Test.lArrFld = Test.lArrFld;
                } while (++i22 < 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
