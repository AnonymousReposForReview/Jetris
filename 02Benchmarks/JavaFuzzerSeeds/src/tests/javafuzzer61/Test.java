package tests.javafuzzer61;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:38:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=89096841L;
    public static byte byFld=76;
    public short sFld=28511;
    public boolean bFld=false;
    public float fFld=-23.353F;
    public static int iFld=-61220;
    public static int iFld1=-105;
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth2(int i9) {

        float f1=-101.835F, fArr[]=new float[N];
        int i10=-4, i11=-37389, i12=-46429, i13=-6698, i14=-102;

        FuzzerUtils.init(fArr, -103.73F);

        sFld = (short)-41;
        i9 = i9;
        Test.instanceCount = i9;
        i9 &= (int)Test.instanceCount;
        i9 = i9;
        for (f1 = 5; f1 < 165; ++f1) {
            for (i11 = 1; i11 < 10; i11 += 2) {
                for (i13 = 1; i13 < 3; ++i13) {
                    Test.instanceCount = i14;
                    i12 += (i13 ^ i14);
                    i10 += i13;
                    lArrFld[(int)(f1)] += i13;
                    bFld = bFld;
                    fArr[i13] -= Test.instanceCount;
                    sFld -= (short)i14;
                }
            }
        }
        vMeth2_check_sum += i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth1(int i7) {

        int i8=15399, i15=14, i16=42551, i17=-177;
        double d1=0.97048;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)14000);

        i8 = 1;
        do {
            i7 += (int)(8497336939403371146L + (i8 * i8));
            vMeth2(i8);
            i7 >>= i7;
            switch ((i8 % 5) + 90) {
            case 90:
                for (i15 = 1; i15 < 5; ++i15) {
                    d1 += Test.instanceCount;
                    i7 = i8;
                    i17 = 1;
                    while ((i17 += 3) < 2) {
                        try {
                            iArrFld[i17 - 1][i15] = (i15 / 49393);
                            i16 = (44673 % i17);
                            i7 = (i17 % iArrFld[i17][i15]);
                        } catch (ArithmeticException a_e) {}
                        i7 += (i17 * i17);
                        sArr[i8] *= (short)i17;
                        i16 += i7;
                    }
                }
                i7 >>= i16;
                Test.instanceCount += sFld;
                break;
            case 91:
                i16 = i8;
                break;
            case 92:
                Test.instanceCount <<= 46677L;
                break;
            case 93:
                fFld -= i15;
            case 94:
                iArrFld[i8][i8] &= -2;
            }
        } while (++i8 < 360);
        vMeth1_check_sum += i7 + i8 + i15 + i16 + Double.doubleToLongBits(d1) + i17 + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(int i, long l, double d) {

        float f=63.24F;
        int i1=28008, i2=247, i3=-74, i4=-30174, i5=7423, i6=9, iArr[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr, -12);

        for (f = 12; f < 209; f++) {
            switch ((int)((f % 6) + 59)) {
            case 59:
                i1 += (int)(f * i);
                for (i2 = 8; f < i2; i2 -= 3) {
                    l = Test.instanceCount;
                    for (i4 = 1; i4 < 1; ++i4) {
                        l += (i4 ^ i1);
                        Test.byFld >>= (byte)(iArr[i4 + 1][i2]++);
                        iArr[(int)(f)][i2 - 1] = (int)((-(-(i2 - i))) * ((Test.instanceCount = -2986176893L) -
                            (Test.byFld + i)));
                        switch ((int)((f % 2) + 21)) {
                        case 21:
                            i1 -= (int)(((i = i3) - (i6 + -2.118369)) + ((Test.byFld / (i3 | 1)) - (Test.byFld + i2)));
                            if (b ^ (Test.byFld >= ((i5 * i1) * (i6 * i)))) {
                                d -= l;
                                if (i4 != 0) {
                                    vMeth_check_sum += i + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
                                        i1 + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                                    return;
                                }
                                i3 -= i;
                            }
                        case 22:
                            if (b) continue;
                            break;
                        }
                    }
                }
                break;
            case 60:
                i -= (int)(i3 + (i2 - (-15963 - (i2 + f))));
                break;
            case 61:
                vMeth1(40024);
                break;
            case 62:
            case 63:
                i1 -= i1;
            case 64:
                i6 += (int)(f * Test.instanceCount);
                break;
            }
        }
        vMeth_check_sum += i + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + i6 +
            (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d2=-24.10311, d3=0.44723;
        int i18=-12, i19=-2;
        float fArr1[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr1, 110.152F);
        FuzzerUtils.init(bArr, true);

        vMeth(Test.iFld, Test.instanceCount, d2);
        for (long l1 : lArrFld) {
            Test.iFld *= Test.iFld;
            Test.byFld <<= (byte)Test.iFld;
            try {
                Test.iFld = (Test.iFld % 11107);
                Test.iFld = (-12279 / Test.iFld);
                Test.iFld = (Test.iFld / -30);
            } catch (ArithmeticException a_e) {}
            for (d3 = 3; d3 < 63; ++d3) {
                Test.iFld = 15040;
                i18 += (int)(d3 + Test.iFld);
                try {
                    Test.iFld = (-4700 % iArrFld[(int)(d3 + 1)][(int)(d3)]);
                    i18 = (-5 / Test.iFld);
                    i19 = (-39671 % i18);
                } catch (ArithmeticException a_e) {}
                d2 = fFld;
                try {
                    i19 = (Test.iFld / i18);
                    i19 = (i18 / 39117);
                    iArrFld[(int)(d3)][(int)(d3 + 1)] = (35171 % iArrFld[(int)(d3)][(int)(d3)]);
                } catch (ArithmeticException a_e) {}
                fArr1[(int)(d3 + 1)] -= l1;
                i19 = (int)81.67402;
                if (bFld) continue;
                switch ((int)((d3 % 8) + 120)) {
                case 120:
                    Test.iFld += (int)(((d3 * i19) + i19) - Test.byFld);
                    sFld = (short)Test.iFld;
                    sFld = (short)Test.iFld1;
                    fFld += (float)d3;
                case 121:
                    bArr[(int)(d3 + 1)] = true;
                    lArrFld = FuzzerUtils.long1array(N, (long)-205L);
                case 122:
                    iArrFld[(int)(d3)][(i18 >>> 1) % N] -= (int)fFld;
                    l1 += (long)d3;
                case 123:
                    i19 += Test.iFld;
                    Test.byFld -= (byte)i19;
                    break;
                case 124:
                    i19 *= 102;
                    break;
                case 125:
                    iArrFld[(int)(d3)][(int)(d3 - 1)] = 25012;
                    Test.iFld = sFld;
                    Test.instanceCount += (long)d3;
                    break;
                case 126:
                    Test.iFld1 += (int)(((d3 * l1) + Test.instanceCount) - Test.instanceCount);
                    break;
                case 127:
                    i18 += (int)(((d3 * Test.iFld) + Test.instanceCount) - l1);
                    break;
                default:
                    fFld *= Test.iFld;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
