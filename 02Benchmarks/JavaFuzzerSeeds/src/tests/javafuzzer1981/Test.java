package tests.javafuzzer1981;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=69L;
    public static volatile short sFld=-11976;
    public static byte byFld=-72;
    public static int iFld=-16273;
    public static boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-65503, i8=20780, i9=0, i10=0, i11=42230, iArr[]=new int[N];
        float f=0.61F;
        double d1=24.29171;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -46);
        FuzzerUtils.init(lArr, -2666425826L);

        for (i7 = 398; i7 > 17; i7--) {
            f /= ((long)(d1) | 1);
            i8 += i7;
            f = i8;
            Test.byFld >>>= (byte)-61873;
            iArr[i7 + 1] >>>= (int)-8545L;
            i9 = 1;
            while (++i9 < 4) {
                for (i10 = 1; i10 < 1; ++i10) {
                    Test.sFld -= (short)Test.instanceCount;
                    i8 += (int)(13229L + (i10 * i10));
                    d1 = d1;
                    Test.instanceCount -= 14;
                    lArr = lArr;
                    lArr[i10] += i8;
                    i11 = i7;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i3, int i4) {

        int i5=-75, i6=191, i12=-11, i13=11, i14=58430, i15=-10, i16=-46, iArr1[]=new int[N];
        double d=-7.56580;
        float f1=-2.332F;

        FuzzerUtils.init(iArr1, -8);

        for (i5 = 12; i5 < 398; i5++) {
            d = (Test.sFld + (++i6));
            vMeth1();
            for (i12 = 1; i12 < 4; i12++) {
                for (f1 = 1; f1 < 2; f1++) {
                    iArr1[i12 + 1] = 22732;
                }
                Test.iFld = -208;
                Test.byFld >>= (byte)i5;
                Test.bFld = Test.bFld;
                for (i15 = 1; i15 < 2; i15++) {
                    i4 = i5;
                    Test.instanceCount += i15;
                    i16 = (int)f1;
                    i14 += i15;
                }
                if (true) break;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i12 + i13 + Float.floatToIntBits(f1) + i14 +
            i15 + i16 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i1) {

        int i2=7, i17=6, i18=-37526, i19=55030, i20=133, iArr2[][]=new int[N][N];
        float f2=1.512F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)123);
        FuzzerUtils.init(iArr2, -45684);
        FuzzerUtils.init(fArr, -90.698F);

        i2 >>= 6077;
        i2 += iMeth(i1, Test.iFld);
        for (i17 = 1; i17 < 253; i17++) {
            if (i2 != 0) {
                vMeth_check_sum += l + i1 + i2 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
                    FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
            for (i19 = 6; i19 > 1; i19 -= 2) {
                byArr[i17 - 1] -= (byte)f2;
                f2 = i17;
                Test.iFld *= i19;
                if (false) break;
                iArr2[i17 - 1][i19 + 1] = i20;
                i1 += (i19 + i18);
                i2 = i18;
                i2 >>= i19;
                l += i19;
            }
            fArr[i17 - 1] = i18;
        }
        vMeth_check_sum += l + i1 + i2 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(byArr)
            + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-165;

        i = (int)(-((Test.instanceCount - i) + i));
        vMeth(Test.instanceCount, i);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
