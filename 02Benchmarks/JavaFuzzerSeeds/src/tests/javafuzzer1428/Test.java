package tests.javafuzzer1428;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:14:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static int iFld=-8;
    public static float fFld=43.75F;
    public volatile double dFld=32.36742;
    public static double dArrFld[]=new double[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 26.2838);
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d1, int i8, long l1) {

        int i9=-60880, i10=-4, i11=254, i12=12, i13=32701, iArr[]=new int[N];
        byte by=65;
        boolean b=false;

        FuzzerUtils.init(iArr, -42);

        i9 = 1;
        do {
            d1 = i9;
            for (i10 = i9; i10 < 11; i10++) {
                for (i12 = 1; i12 < 1; ++i12) {
                    switch (((i12 % 3) * 5) + 74) {
                    case 89:
                        i8 = i12;
                        Test.dArrFld[i12] += i10;
                        iArr[i9] = i9;
                    case 80:
                        by = (byte)d1;
                        iArr[i10] = (int)Test.instanceCount;
                        Test.instanceCount += -100;
                        break;
                    case 76:
                        i13 = i11;
                        i11 = (int)Test.instanceCount;
                        i13 = (int)-12670L;
                        break;
                    }
                    if (b) continue;
                }
            }
        } while (++i9 < 138);
        long meth_res = Double.doubleToLongBits(d1) + i8 + l1 + i9 + i10 + i11 + i12 + i13 + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i3) {

        int i4=19216, i5=-20, i6=13, i7=37, i14=75, i15=23253;
        double d=-2.30344;
        short s=-6378;
        float f=-2.364F;
        byte by1=-118;

        for (i4 = 1; i4 < 292; i4++) {
            i5 += (int)(-(Math.min(l, l) * Integer.reverseBytes(i5)));
        }
        for (i6 = 4; i6 < 273; i6++) {
            d = 1;
            do {
                i3 <<= (iMeth(d, i4, Test.instanceCount) * i3);
                i3 -= i3;
                s -= (short)i5;
                for (i14 = 1; i14 < 1; ++i14) {
                    i5 += i5;
                    if (i15 != 0) {
                        vMeth1_check_sum += l + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + s + i14 + i15 +
                            Float.floatToIntBits(f) + by1;
                        return;
                    }
                    i7 = i6;
                    l += (i14 | (long)f);
                    Test.iArrFld[i6 - 1] = Test.iFld;
                }
                if (i7 != 0) {
                    vMeth1_check_sum += l + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + s + i14 + i15 +
                        Float.floatToIntBits(f) + by1;
                    return;
                }
            } while (++d < 6);
            l = by1;
        }
        vMeth1_check_sum += l + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + s + i14 + i15 +
            Float.floatToIntBits(f) + by1;
    }

    public static void vMeth() {

        int i16=89, i17=-13, i18=35211, i19=-9, i20=-166, i21=-49;
        short s1=-18428, s2=20052;
        float f1=2.762F;

        vMeth1(Test.instanceCount, Test.iFld);
        for (i16 = 6; i16 < 209; i16++) {
            for (i18 = 1; i18 < 8; i18++) {
                for (i20 = 1; i20 < 2; ++i20) {
                    Test.iArrFld = Test.iArrFld;
                    Test.dArrFld[i18 - 1] = i21;
                    s1 = (short)Test.instanceCount;
                    i17 += i17;
                }
                i17 = -22483;
                f1 *= i19;
                s1 = (short)i21;
                i21 += i18;
                i17 -= i21;
                f1 -= s2;
                i17 *= Test.iFld;
            }
        }
        vMeth_check_sum += i16 + i17 + i18 + i19 + i20 + i21 + s1 + Float.floatToIntBits(f1) + s2;
    }

    public void mainTest(String[] strArr1) {

        int i=106, i1=-153, i2=148, i22=12, i23=-74, i25=51519, i26=2, i27=222, i28=-228, i29=-43, i30=33, i31=241,
            i32=-14, i33=-134, i34=22498, i35=-11, iArr1[]=new int[N];
        short s3=30733;
        byte by2=-5;

        FuzzerUtils.init(iArr1, -1);

        i += (++i);
        for (i1 = 1; i1 < 148; i1++) {
            vMeth();
            i2 += (int)(3354933383L + (i1 * i1));
        }
        Test.fFld += -14;
        s3 ^= s3;
        i ^= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] = 20870;
        for (i22 = 14; i22 < 261; i22++) {
            i += i;
            i23 += (((i22 * Test.instanceCount) + i23) - Test.instanceCount);
            i = i1;
            i *= (int)Test.instanceCount;
            i23 *= i22;
            Test.fFld -= by2;
            i -= 39540;
        }
        i23 *= (int)dFld;
        for (i25 = 8; i25 < 235; i25++) {
            by2 = (byte)i23;
            iArr1[i25 - 1] = i22;
            iArr1[(Test.iFld >>> 1) % N] = Test.iFld;
            by2 ^= (byte)2;
        }
        for (i27 = 10; 354 > i27; i27 += 2) {
            for (i29 = 7; i29 < 146; ++i29) {
                for (i31 = 1; i31 < 2; ++i31) {
                    i28 += (int)Test.instanceCount;
                }
                for (i33 = 1; i33 < 2; i33++) {
                    Test.instanceCount = i35;
                    i2 -= i;
                    Test.fFld -= Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
