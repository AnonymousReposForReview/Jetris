package tests.javafuzzer3458;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:36:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3131443980L;
    public static volatile float fFld=0.615F;
    public static byte byFld=110;
    public double dFld=-118.126637;
    public short sFld=-8006;
    public volatile float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12012);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i12, int i13) {

        int i14=-9, i15=37652, i16=-23364, i17=-38979, i18=4;
        float f=0.136F;
        double d1=-1.98635, dArr[]=new double[N];
        byte by1=22;
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 81.70586);
        FuzzerUtils.init(lArr1, 63975L);

        for (i14 = 17; i14 < 332; ++i14) {
            dArr[i14] -= f;
        }
        Test.instanceCount ^= i15;
        d1 = 1;
        do {
            for (i16 = 1; i16 < 9; ++i16) {
                Test.instanceCount += i12;
                i17 = i14;
                Test.instanceCount -= 14375;
                Test.instanceCount = i17;
                Test.instanceCount += (i16 * i16);
                lArr1[(5 >>> 1) % N] = Test.instanceCount;
            }
            i15 = i12;
            i18 = 1;
            do {
                f -= i12;
                i13 -= by1;
            } while (++i18 < 9);
        } while (++d1 < 171);
        long meth_res = i12 + i13 + i14 + i15 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i16 + i17 + i18
            + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i6, long l) {

        int i7=28706, i8=0, i9=32, i10=-4, i11=137, iArr[]=new int[N];
        double d=2.81476;
        long l1=32355L;
        short s=-4982;
        byte by=-86;

        FuzzerUtils.init(iArr, 101);

        for (i7 = 2; i7 < 155; i7++) {
            i9 = 1;
            while (++i9 < 10) {
                for (i10 = 1; 1 > i10; ++i10) {
                    i11 = (int)(d = -14801);
                    if ((i6--) <= (l1 + 9L)) continue;
                    i6 = (int)1.88F;
                    i11 += i10;
                    Test.instanceCount = ((s + (by + l)) - (l++));
                    i11 = (int)(((i6 * i8) * (++Test.instanceCount)) + i6);
                    iArr[i9 - 1] *= (int)(iMeth1(i7, -45261) + Test.instanceCount);
                }
                iArr[i7 - 1] *= (int)1.971F;
                i8 += i9;
                d *= i6;
                i11 += -82;
            }
            try {
                iArr[i7 + 1] = (i7 / i9);
                i6 = (i11 % i8);
                iArr[i7] = (i11 / -13);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = i6 + l + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + l1 + s + by +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=-3, i2=-24204, i3=-9603, i4=-13, i5=8, i19=15566, i20=-37, iArr1[][]=new int[N][N];
        double d2=124.114962;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5504183996605405552L);
        FuzzerUtils.init(iArr1, -61743);

        i1 = (int)(Float.intBitsToFloat(++i1) * (Math.min(-196, i1) + (++i1)));
        lArr[(i1 >>> 1) % N] += i1;
        i2 = 295;
        while ((i2 -= 2) > 0) {
            switch (((((i3 * i2) >>> 1) % 2) * 5) + 68) {
            case 75:
                Test.instanceCount -= (++Test.instanceCount);
                for (i4 = 11; i4 > 1; i4 -= 2) {
                    i1 = iMeth(i5, Test.instanceCount);
                    i3 = i2;
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i19 + i20 + Double.doubleToLongBits(d2) +
                            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    iArr1[i4][i4] = i3;
                    for (i19 = 3; i19 > 1; --i19) {
                        Test.instanceCount += (((i19 * i3) + Test.fFld) - i20);
                        if (i19 != 0) {
                            vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i19 + i20 + Double.doubleToLongBits(d2) +
                                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        Test.instanceCount -= (long)d2;
                        Test.instanceCount += (i19 * i19);
                    }
                }
                break;
            case 74:
                iArr1[i2 + 1][i2 - 1] = Test.byFld;
                break;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i19 + i20 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=4, i21=2, i22=235, i23=-39, i24=35, i25=4, i26=-77, i27=-3, i28=-47383, i29=-13, i30=173;
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 3638L);

        i = (int)(-Test.instanceCount);
        vMeth();
        for (i21 = 370; 10 < i21; i21--) {
            Test.fFld -= i22;
            i += (((i21 * i21) + i) - i);
            fArrFld[i21][i21] += Test.fFld;
            for (i23 = 2; i23 < 70; i23++) {
                if (b) break;
                switch (((i23 % 2) * 5) + 86) {
                case 88:
                    Test.instanceCount = i23;
                    if (b) continue;
                    dFld += Test.instanceCount;
                    break;
                case 89:
                    Test.iArrFld[i23] = (int)Test.instanceCount;
                    lArr2[i21] += Test.instanceCount;
                default:
                    for (i25 = 1; i25 < 2; i25++) {
                        i24 ^= sFld;
                    }
                    i22 = i24;
                    try {
                        i = (-145 % i);
                        Test.iArrFld[i21 - 1] = (-91 / i21);
                        i26 = (-127 / i22);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += i23;
                }
                Test.instanceCount = i26;
                Test.instanceCount += (i23 * i23);
                i22 <<= i23;
            }
            for (i27 = 2; i27 < 70; i27++) {
                i26 += i27;
                for (i29 = 1; i29 < 2; i29++) {
                    i30 -= (int)Test.fFld;
                    i = i26;
                    i24 -= i23;
                    try {
                        i = (i21 / Test.iArrFld[i21 - 1]);
                        i30 = (40 % i21);
                        i26 = (i29 % Test.iArrFld[i27]);
                    } catch (ArithmeticException a_e) {}
                }
                i = (int)Test.instanceCount;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
