package tests.javafuzzer1237;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:53:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6510911330411113303L;
    public byte byFld=99;
    public static boolean bFld=true;
    public static double dFld=-40.124859;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 7);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i8) {

        float f1=-10.304F, f2=2.849F;
        int i9=50955;
        double d2=-2.32222;

        i8 = i8;
        i8 = (int)f1;
        Test.instanceCount *= i8;
        i8 *= (int)1.28581;
        Test.iArrFld1[(i8 >>> 1) % N] = i8;
        f1 *= i8;
        for (f2 = 3; 276 > f2; f2++) {
            d2 -= Test.instanceCount;
            i9 += (int)((long)f2 | i8);
        }
        long meth_res = i8 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i9 + Double.doubleToLongBits(d2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i5) {

        double d1=0.67044;
        int i6=185, i7=-163, i10=-8, i11=16501;
        float f=-2.773F;

        for (d1 = 6; d1 < 341; d1++) {
            i6 += (int)((-(Test.iArrFld1[(int)(d1 + 1)]--)) - ((d1 - i5) + (i5 * 17864)));
            i5 >>= Test.iArrFld1[(int)(d1 + 1)];
            Test.bFld = true;
            for (f = 5; f > 1; --f) {
                i6 >>= Short.reverseBytes(sMeth(i7));
                switch ((((i6 >>> 1) % 2) * 5) + 8) {
                case 11:
                    if (Test.bFld) {
                        for (i10 = 1; i10 < 2; i10++) {
                            Test.bFld = false;
                            i6 += -3;
                            i7 = 54212;
                            i5 &= (int)Test.instanceCount;
                            Test.dFld -= f;
                            Test.iArrFld1[(int)(f + 1)] %= (int)(i11 | 1);
                        }
                    } else if (Test.bFld) {
                        i11 -= (int)f;
                    } else {
                        if (Test.bFld) break;
                    }
                case 13:
                    i11 = i10;
                    break;
                }
            }
        }
        vMeth_check_sum += i5 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f) + i7 + i10 + i11;
    }

    public int iMeth(int i) {

        int i1=21245, i2=-48522, i3=-131, i4=82, i12=37462, i13=44582, i14=210, i15=94;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-24);

        for (i1 = 16; i1 < 323; i1++) {
            i2 = ((++i) ^ (i2++));
        }
        for (i3 = 7; 199 > i3; ++i3) {
            double d=-1.113685;
            byFld += (byte)i3;
            iArrFld[i3 - 1] = (int)(((Test.instanceCount + d) - i2) - Test.instanceCount);
            vMeth(i1);
            byFld &= (byte)Test.instanceCount;
            for (i12 = 1; i12 < 8; i12++) {
                i2 = i1;
                for (i14 = 1; i14 < 2; i14++) {
                    Test.instanceCount = i;
                    i2 = (int)Test.instanceCount;
                }
                i13 += (i12 | i1);
                i4 = i;
                byArr[i3 + 1][i12 + 1] <<= (byte)i14;
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-5702182023475364435L;
        int i16=2, i17=-242, i18=22559, i19=-241, i20=35956, i21=64104, i22=-14266, iArr[]=new int[N];
        float f3=24.335F, f4=-92.184F;
        double d3=-115.94765;
        short s=-20083;

        FuzzerUtils.init(iArr, -14);

        l = iArr[(188 >>> 1) % N];
        l *= Math.abs(iMeth(i16));
        for (i17 = 7; i17 < 295; i17++) {
            i18 = i18;
            for (i19 = 1; i19 < 87; i19++) {
                f3 = 1;
                while (++f3 < 2) {
                    l = l;
                    i18 += (int)f3;
                    l += (long)f3;
                }
                i20 = i16;
                d3 = 1;
                while (++d3 < 2) {
                    i20 += (int)(d3 * d3);
                    i21 *= i16;
                    i20 >>= s;
                    i16 >>= i17;
                    iArr[i17 - 1] = s;
                }
                l = l;
                i22 = 1;
                while (++i22 < 2) {
                    i20 += (((i22 * i20) + i21) - i20);
                    i20 += i22;
                    Test.bFld = false;
                    i21 = 13288;
                    iArr[i17 - 1] = i18;
                    i18 += (i22 * f3);
                    f4 += (((i22 * i18) + f3) - l);
                    Test.dFld *= i18;
                    switch (((i17 % 6) * 5) + 114) {
                    case 118:
                        i18 *= -4;
                    case 124:
                        Test.bFld = Test.bFld;
                        i16 = -6;
                    case 141:
                        i20 = (int)f3;
                        break;
                    case 121:
                        Test.iArrFld1[(i19 >>> 1) % N] *= (int)l;
                    case 133:
                        Test.dFld = i16;
                        break;
                    case 115:
                        if (false) continue;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
