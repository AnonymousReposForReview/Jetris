package tests.javafuzzer1401;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:46:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-251L;
    public static float fFld=0.952F;
    public static long lFld=849321048118790064L;
    public static short sFld=25115;
    public double dFld=-45.53458;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 22081);
        FuzzerUtils.init(Test.lArrFld, 28510L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2) {

        double d=1.125824, dArr[]=new double[N];
        int i3=-47985, i4=-3, i5=-110, i6=-7, i7=-56248, i8=73, iArr[][]=new int[N][N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 1.588F);
        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(lArr, -155L);
        FuzzerUtils.init(dArr, 1.19336);

        i2 += (int)d;
        Test.instanceCount <<= Test.instanceCount;
        i2 -= i2;
        fArr[(i2 >>> 1) % N] += Test.instanceCount;
        Test.instanceCount >>>= Test.instanceCount;
        for (i3 = 8; i3 < 164; i3++) {
            i4 = i3;
            Test.instanceCount -= i4;
            Test.instanceCount -= -12;
            for (i5 = 10; i5 > 1; i5 -= 3) {
                iArr = FuzzerUtils.int2array(N, (int)-12);
                for (i7 = 1; i7 < 4; ++i7) {
                    lArr[i7] *= i3;
                    dArr[i3] = Test.fFld;
                    Test.fFld *= -54;
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1) {

        short s1=-25171;
        int i9=-98, i10=-8, i11=8, i12=-5, i13=-6, i14=-28200, i15=-48173, i16=-5;
        double d1=0.99969;
        boolean b1=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.15F);

        Test.fFld *= (((Test.fFld - s1) * i1) * lMeth(i1));
        for (i9 = 10; 197 > i9; ++i9) {
            d1 -= Test.fFld;
        }
        i10 <<= i1;
        for (i11 = 364; i11 > 21; i11 -= 3) {
            Test.instanceCount = i12;
        }
        for (i13 = 22; i13 < 360; ++i13) {
            switch (((i13 % 2) * 5) + 49) {
            case 56:
                fArr1 = fArr1;
                if (b1) break;
                if (i13 != 0) {
                }
                break;
            case 52:
                switch (((i1 >>> 1) % 3) + 68) {
                case 68:
                    i15 = 1;
                    do {
                        i1 *= i15;
                        i16 = (int)Test.lFld;
                    } while (++i15 < 5);
                    break;
                case 69:
                    if (b1) break;
                    break;
                case 70:
                    Test.iArrFld[i13] *= (int)-18L;
                    break;
                default:
                    i16 += (i13 - i10);
                }
                break;
            }
        }
        long meth_res = i1 + s1 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + (b1 ? 1 : 0) + i15 +
            i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, short s, int i) {

        int i17=126, i18=-57382, i19=-59193, i20=-92, i21=-33003;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.19033);

        Test.instanceCount = ((++i) + iMeth(8));
        Test.fFld = i;
        i17 = 1;
        do {
            for (i18 = 1; i18 < 5; i18++) {
                i >>>= (int)1441658548L;
                switch ((i17 % 2) + 2) {
                case 2:
                    Test.instanceCount += i;
                    i19 -= -16704;
                    break;
                case 3:
                    Test.iArrFld[i18] += i17;
                default:
                    Test.fFld += (i18 * i17);
                    for (i20 = 1; 2 > i20; i20++) {
                        Test.fFld -= i19;
                        i = i;
                        i <<= i;
                        dArr1[i20 - 1] = i;
                    }
                }
            }
        } while (++i17 < 331);
        vMeth_check_sum += (b ? 1 : 0) + s + i + i17 + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i22=-14, i23=-39874, i24=-7, i25=9, i26=251, i27=-103, i28=-166, i29=-9, i30=-241, i31=-38718, i32=-58846,
            i33=231, i34=162;
        boolean b2=true;
        byte by=-108;

        vMeth(false, Test.sFld, i22);
        Test.iArrFld[(i22 >>> 1) % N] >>= i22;
        for (i23 = 19; i23 < 366; i23++) {
            i24 -= -5;
            for (i25 = 4; i25 < 73; i25++) {
                i22 += (int)dFld;
            }
            for (i27 = 73; i27 > 1; --i27) {
                for (i29 = 1; i29 < 2; ++i29) {
                    i26 += (i29 | i24);
                    Test.iArrFld[i27] >>>= (int)Test.lFld;
                    if (b2) break;
                }
                switch ((i27 % 7) + 30) {
                case 30:
                    if (b2) break;
                    i31 = 1;
                    do {
                        Test.lFld -= 65529;
                        Test.fFld -= Test.lFld;
                        Test.sFld += (short)(((i31 * i23) + i27) - Test.lFld);
                        b2 = false;
                        i30 <<= i31;
                        Test.lArrFld[i31] += i31;
                        if (b2) continue;
                    } while (++i31 < 2);
                    dFld -= i23;
                    i28 = (int)dFld;
                    break;
                case 31:
                    for (i32 = i27; i32 < 2; i32++) {
                        Test.iArrFld = Test.iArrFld;
                        switch (((i27 % 2) * 5) + 3) {
                        case 11:
                            i22 += (((i32 * i32) + i28) - by);
                        case 4:
                            Test.instanceCount += (i32 + i22);
                            i28 += i32;
                            try {
                                i28 = (127 % i25);
                                i26 = (i28 / i25);
                                i22 = (i23 / i29);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            Test.lFld -= i34;
                        }
                    }
                    break;
                case 32:
                    Test.fFld = -56;
                case 33:
                    Test.instanceCount >>= i31;
                case 34:
                    i24 -= (int)dFld;
                    break;
                case 35:
                    i26 <<= i27;
                case 36:
                    i30 = i32;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
