package tests.javafuzzer460;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:07:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=43327L;
    public long lFld=-18089L;
    public static float fFld=1.250F;
    public static volatile byte byFld=-99;
    public static boolean bFld=false;
    public static short sFld=-8365;
    public double dFld=1.32270;
    public static int iFld=-9726;

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=29361, i7=-7, i8=-139, i9=49569, i10=-33169, i11=-53171, i12=61513, i13=2, i14=12, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 5);
        FuzzerUtils.init(fArr, 2.605F);

        Test.instanceCount = -1346807340L;
        i6 = i6;
        for (i7 = 5; i7 < 207; i7++) {
            for (i9 = 1; i9 < 8; i9++) {
                i10 >>= Test.byFld;
                i8 <<= i7;
                for (i11 = 2; i11 > 1; i11 -= 2) {
                    i10 |= 64370;
                }
                i10 = (int)Test.instanceCount;
                iArr1[i9] -= (int)4288157817L;
            }
            iArr1[i7] += i7;
            for (i13 = 1; i13 < 8; ++i13) {
                fArr[i7] = i12;
                iArr1[i13] >>>= i7;
            }
            Test.bFld = Test.bFld;
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static double dMeth(double d) {

        int i15=-12, i16=-54040, i17=-33684, i18=8, i19=-211, i20=5, i21=13, i22=-8, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 16791);

        vMeth();
        for (i15 = 6; i15 < 132; i15++) {
            iArr2[i15 + 1] -= i16;
        }
        i16 *= (int)Test.instanceCount;
        for (i17 = 334; 10 < i17; i17 -= 3) {
            i16 <<= 10861;
            for (i19 = 1; i19 < 14; i19++) {
                i20 <<= i15;
                Test.instanceCount = (long)Test.fFld;
                if (Test.bFld) continue;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.instanceCount += (((i21 * i20) + i17) - Test.instanceCount);
                }
                i20 = i15;
            }
            iArr2[i17 - 1] = i18;
            if (Test.bFld) break;
        }
        long meth_res = Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i4=16, i5=10, i23=-34054, i24=8, i25=7, i26=-43516, i27=32834, iArr[]=new int[N];
        double d1=-44.114510;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 5072);
        FuzzerUtils.init(lArr, 4028985595221447258L);

        for (i4 = 20; i4 < 344; i4++) {
            iArr[i4 - 1] += (int)(((--i2) + (Test.instanceCount - Test.instanceCount)) - (--Test.fFld));
            dMeth(-1.63068);
            for (i23 = 1; i23 < 5; i23++) {
                for (d1 = i4; d1 < 2; d1++) {
                    lArr[(int)(d1)] <<= i23;
                }
                i2 &= (int)Test.instanceCount;
                Test.instanceCount = i1;
                i5 += (int)Test.instanceCount;
                Test.sFld *= Test.byFld;
                for (i26 = 1; i26 < 2; i26++) {
                    i3 += (int)Test.instanceCount;
                    if (i3 != 0) {
                    }
                    i24 += (i26 * i26);
                    i5 += (((i26 * Test.fFld) + i27) - i27);
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i23 + i24 + Double.doubleToLongBits(d1) + i25 + i26 + i27 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=21, i28=47, i29=-35386, i30=3, i31=-5, i32=-51539, i33=-241, i34=7001, i35=-1, iArr3[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr3, 5);
        FuzzerUtils.init(dArr, -1.94369);

        lFld >>= (i--);
        if (true) {
            i = iMeth(8, -14093, i);
        } else if (Test.bFld) {
            for (i28 = 362; i28 > 8; i28--) {
                for (i30 = 3; i30 < 71; i30++) {
                    Test.bFld = Test.bFld;
                    iArr3 = iArr3;
                }
                switch (((i28 >>> 1) % 9) + 54) {
                case 54:
                    i31 >>= (int)lFld;
                    i29 = i;
                case 55:
                    for (i32 = 2; 71 > i32; ++i32) {
                        Test.fFld = i31;
                        i29 -= i31;
                        iArr3[i28] *= (int)lFld;
                        i += i33;
                    }
                    switch ((((i28 >>> 1) % 1) * 5) + 2) {
                    case 7:
                        i34 = 1;
                        while (++i34 < 71) {
                            i31 >>>= i31;
                            switch ((i34 % 1) + 75) {
                            case 75:
                                lFld += (i34 + Test.instanceCount);
                                i31 /= -55715;
                            default:
                                dFld += Test.fFld;
                                lFld <<= -2;
                                i35 = 1;
                                do {
                                    iArr3[i35 + 1] += (int)6.704F;
                                    switch (((i28 % 10) * 5) + 56) {
                                    case 69:
                                        i29 += (i35 + Test.fFld);
                                        break;
                                    case 64:
                                        dFld *= Test.instanceCount;
                                        Test.fFld += i35;
                                        break;
                                    case 87:
                                        i31 += (i35 * i35);
                                        break;
                                    case 101:
                                        Test.iFld ^= i30;
                                    case 67:
                                        Test.iFld ^= i33;
                                        break;
                                    case 73:
                                        Test.iFld *= i28;
                                        break;
                                    case 75:
                                        iArr3[i35] &= i31;
                                        break;
                                    case 68:
                                        Test.instanceCount += 5770470129038885859L;
                                        break;
                                    case 104:
                                        Test.iFld += i35;
                                    case 86:
                                        Test.bFld = false;
                                        break;
                                    default:
                                        Test.iFld += (int)(0.224F + (i35 * i35));
                                    }
                                } while (++i35 < 1);
                            }
                        }
                        break;
                    }
                    break;
                case 56:
                    dArr = dArr;
                    break;
                case 57:
                    i31 ^= i31;
                    break;
                case 58:
                    i33 -= 9;
                    break;
                case 59:
                    i -= i30;
                    break;
                case 60:
                    Test.fFld *= i29;
                    break;
                case 61:
                    i -= i28;
                    break;
                case 62:
                    lFld *= 203L;
                    break;
                }
            }
        } else {
            Test.bFld = Test.bFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
