package tests.javafuzzer2826;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:01:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1201935723537289507L;
    public static int iFld=233;
    public static volatile short sFld=4597;
    public static int iFld1=-187;
    public static boolean bFld=true;
    public static float fFld=-40.975F;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -80.570F);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l2, short s, int i3) {

        int i4=-9, i5=123, i6=-62, i7=-13, i8=-8;
        float f1=12.435F;

        l2 /= (l2 | 1);
        Test.instanceCount = i3;
        for (i4 = 4; i4 < 380; i4++) {
            Test.iFld *= (int)1.274F;
            i3 += i4;
            l2 += (i4 * i5);
            f1 = Test.iFld;
            l2 ^= i3;
            switch (((i5 >>> 1) % 2) + 20) {
            case 20:
                for (i6 = 1; i6 < 4; ++i6) {
                    l2 -= i5;
                    i7 -= i4;
                    Test.iArrFld[i4 - 1] |= (int)Test.instanceCount;
                    if (Test.iFld != 0) {
                    }
                    i8 *= i6;
                }
            case 21:
                i5 = i7;
                break;
            }
        }
        long meth_res = l2 + s + i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i9=-3, i10=-43, i11=-8, i12=-4, i13=-20805, i14=-119;
        float f2=0.175F;
        byte by=-80;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6372671797106845921L);

        Test.fArrFld[(Test.iFld >>> 1) % N] = iMeth1(Test.instanceCount, Test.sFld, 1);
        Test.fArrFld = Test.fArrFld;
        Test.iFld <<= Test.iFld1;
        Test.iFld = Test.iFld1;
        for (i9 = 3; i9 < 186; ++i9) {
            Test.iFld += (((i9 * f2) + i10) - i10);
            for (i11 = i9; i11 < 9; i11++) {
                switch (((i11 % 4) * 5) + 27) {
                case 36:
                case 42:
                    for (i13 = 1; i13 < 1; i13++) {
                        switch ((i13 % 10) + 60) {
                        case 60:
                            Test.fArrFld[i11 + 1] *= Test.instanceCount;
                            Test.iArrFld[i13 + 1] -= (int)Test.instanceCount;
                            break;
                        case 61:
                            Test.iFld = Test.iFld1;
                            i14 += i10;
                            Test.instanceCount += i13;
                        case 62:
                        case 63:
                            f2 -= i10;
                        case 64:
                            by += (byte)(8L + (i13 * i13));
                            break;
                        case 65:
                            Test.bFld = Test.bFld;
                            break;
                        case 66:
                            Test.instanceCount += (((i13 * f2) + i10) - Test.iFld);
                        case 67:
                            Test.instanceCount = i13;
                        case 68:
                            Test.instanceCount += i11;
                        case 69:
                            Test.sFld += (short)Test.instanceCount;
                            break;
                        default:
                            lArr[i11 + 1] += Test.instanceCount;
                        }
                    }
                    break;
                case 30:
                    Test.iArrFld[i9] *= i9;
                case 35:
                    if (i9 != 0) {
                        vMeth_check_sum += i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + by +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                }
            }
        }
        vMeth_check_sum += i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + by +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(boolean b, float f) {

        long l=-3L, l1=-10L;
        int i=-67, i1=-57807, i2=-178, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(fArr, -105.175F);

        Test.sFld += (short)(iArr1[(Test.iFld >>> 1) % N] -= (Test.iFld++));
        l = 1;
        do {
            Test.iFld = (int)(((fArr[(int)(l + 1)]--) + (Test.iFld * 1.128139)) % ((Test.instanceCount ^= (Test.iFld *
                Test.iFld)) | 1));
            for (l1 = 5; l1 > l; l1 -= 3) {
                Test.iFld += (int)(l1 * l1);
                Test.sFld += (short)(l1 - Test.iFld);
                for (i1 = 1; i1 < 1; i1++) {
                    vMeth();
                    i = i;
                    Test.iFld1 += (int)-5834675728157737760L;
                    if (Test.bFld) {
                        Test.instanceCount *= Test.sFld;
                    } else if (b) {
                        Test.iFld >>= Test.iFld;
                        if (Test.bFld) continue;
                        Test.instanceCount += i1;
                    } else {
                        Test.instanceCount = l;
                    }
                }
            }
        } while (++l < 330);
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f) + l + l1 + i + i1 + i2 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 6);

        iArr[(Test.iFld >>> 1) % N] >>= iMeth(true, Test.fFld);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
