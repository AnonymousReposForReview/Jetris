package tests.javafuzzer3214;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:06:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static volatile short sFld=-17285;
    public volatile int iFld=-137;
    public volatile float fFld=-96.922F;
    public float fFld1=-38.8F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -209);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d1, int i3) {

        float f=0.917F;
        int i4=-90, i5=-12973, i6=-47702, i7=-92, i8=-2, i9=-194, i10=129;

        i3 <<= Test.sFld;
        i3 -= (int)f;
        i3 <<= -7389;
        i4 = 1;
        do {
            for (i5 = 1; i5 < 7; i5++) {
                i6 >>= i3;
                i3 |= (int)Test.instanceCount;
            }
            for (i7 = 1; i7 < 7; i7++) {
                Test.iArrFld[i7 + 1] >>>= 47120;
                i3 %= (int)(i5 | 1);
                i3 += (i7 * i7);
                for (i9 = 1; 2 > i9; ++i9) {
                    if (false) continue;
                    f = f;
                    d1 = -64.72482;
                }
            }
        } while (++i4 < 223);
        long meth_res = Double.doubleToLongBits(d1) + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + i9 + i10;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, boolean b) {

        int i2=-5, i11=-192, i12=76, i13=-221, i14=-1, i15=-1, i16=4, i17=-162;
        double d2=-15.126891;

        Test.iArrFld[(i2 >>> 1) % N] = iMeth(d2, i2);
        Test.instanceCount <<= 60319L;
        for (i11 = 18; i11 < 290; ++i11) {
            for (i13 = 6; i13 > 1; i13 -= 2) {
                i2 -= (int)-10L;
            }
            i15 = 6;
            do {
                i16 = 1;
                while (++i16 < 1) {
                    i2 -= (int)Test.instanceCount;
                    i12 -= 8;
                    d2 += i14;
                    try {
                        i12 = (i2 / i11);
                        i14 = (84 / i16);
                        i17 = (i16 % i16);
                    } catch (ArithmeticException a_e) {}
                    i12 = -6218;
                }
                i14 -= i14;
                if (true) break;
                i14 += (((i15 * l) + i15) - i11);
            } while (--i15 > 0);
        }
        vMeth1_check_sum += l + (b ? 1 : 0) + i2 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15 + i16 +
            i17;
    }

    public void vMeth(int i1) {

        boolean b1=false;
        int i18=-14, i19=7, i20=27181, i21=225;
        float f1=0.56F, f2=73.765F;
        long l1=-1574735473L;
        double d3=-1.11708;

        vMeth1(Test.instanceCount, b1);
        for (i18 = 7; i18 < 359; ++i18) {
            for (i20 = 1; i20 < 5; i20++) {
                i21 = i20;
                f1 = 1;
                while ((f1 += 3) < 2) {
                    Test.iArrFld[i20] ^= (int)Test.instanceCount;
                    Test.iArrFld[i20 - 1] = (int)1.9685;
                    switch ((int)(((f1 % 6) * 5) + 126)) {
                    case 141:
                        Test.iArrFld[i18 - 1] = (int)-135L;
                        break;
                    case 147:
                        i1 -= (int)l1;
                        break;
                    case 146:
                        try {
                            i19 = (i21 % i20);
                            i21 = (i21 / 7460);
                            i1 = (i18 % 582323637);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 135:
                        switch ((int)((f1 % 8) + 48)) {
                        case 48:
                            f2 = i1;
                            i1 -= i21;
                            if (i18 != 0) {
                                vMeth_check_sum += i1 + (b1 ? 1 : 0) + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1)
                                    + l1 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d3);
                                return;
                            }
                        case 49:
                            i19 = i18;
                            break;
                        case 50:
                            f2 = i1;
                            break;
                        case 51:
                            d3 *= -21330;
                            break;
                        case 52:
                        case 53:
                            l1 += (long)f1;
                            break;
                        case 54:
                            f2 *= iFld;
                            break;
                        case 55:
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)69);
                        default:
                            f2 += i18;
                        }
                        break;
                    case 137:
                        iFld += (int)(f1 * f1);
                    case 134:
                        l1 += (long)(((f1 * l1) + i19) - Test.instanceCount);
                        break;
                    default:
                        i21 -= (int)f2;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + (b1 ? 1 : 0) + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) + l1 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(d3);
    }

    public void mainTest(String[] strArr1) {

        double d=1.49828, d4=-2.93730;
        int i=-8, i22=10, i23=-61838, i24=56783, i25=-16221, i26=-14, i27=48922;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.12F);

        for (d = 13; d < 311; d++) {
            vMeth(-30750);
            for (i22 = 5; i22 < 84; ++i22) {
                switch (((i22 >>> 1) % 4) + 60) {
                case 60:
                    iFld >>= i22;
                    i23 <<= i;
                case 61:
                    i23 += i22;
                    break;
                case 62:
                    iFld += (((i22 * i) + iFld) - Test.instanceCount);
                case 63:
                    i23 &= iFld;
                    lArrFld[(int)(d)] -= iFld;
                    break;
                }
                lArrFld[(int)(d)] ^= -198;
            }
            iFld ^= (int)Test.instanceCount;
            for (d4 = 84; d4 > 4; d4 -= 3) {
                i24 -= i24;
                fFld -= i24;
                Test.instanceCount = Test.instanceCount;
                i += (int)d4;
            }
            for (i25 = 1; i25 < 84; ++i25) {
                i24 = i24;
                fArr[(int)(d + 1)] = i22;
                i24 += (i25 | (long)fFld1);
                Test.instanceCount = -13;
                fArr[i25 + 1] = Test.instanceCount;
                i27 = 2;
                while ((i27 -= 3) > 0) {
                    Test.sFld -= (short)173;
                    i = (int)Test.instanceCount;
                    i24 <<= (int)Test.instanceCount;
                    i = (int)fFld1;
                    i = i26;
                    i *= (int)-2.766F;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
