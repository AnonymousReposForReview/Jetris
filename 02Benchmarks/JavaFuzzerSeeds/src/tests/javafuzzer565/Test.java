package tests.javafuzzer565;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:59:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2012970226537437950L;
    public static float fFld=43.670F;
    public byte byArrFld[]=new byte[N];

    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static long lMeth(int i) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -26701);

        i -= iArr[(-77 >>> 1) % N];
        long meth_res = i + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i13=-8, i14=11, i15=-134, i16=-12, i17=-195, iArr1[]=new int[N];
        byte by1=75;
        short s=-30121;
        float f1=107.440F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 12.551F);
        FuzzerUtils.init(iArr1, -108);

        for (i13 = 9; i13 < 228; i13++) {
            by1 %= (byte)(i13 | 1);
            for (i15 = i13; i15 < 7; ++i15) {
                switch ((i13 % 10) + 89) {
                case 89:
                    i14 += (((i15 * Test.instanceCount) + i15) - i13);
                    fArr[i13 + 1] = i13;
                    i14 -= (int)-172L;
                    if (i14 != 0) {
                        vMeth_check_sum += i13 + i14 + by1 + i15 + i16 + s + i17 + Float.floatToIntBits(f1) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                case 90:
                    i16 = i14;
                case 91:
                    i16 = (int)Test.instanceCount;
                    Test.instanceCount *= i15;
                    i16 -= i14;
                    s = (short)i13;
                    break;
                case 92:
                    try {
                        iArr1[i15 + 1] = (i16 / -6238);
                        i14 = (i15 / -37715);
                        i14 = (i15 % -1173466702);
                    } catch (ArithmeticException a_e) {}
                    by1 += (byte)i14;
                case 93:
                    i17 &= i15;
                    break;
                case 94:
                    i17 -= i16;
                case 95:
                    f1 += (((i15 * Test.instanceCount) + i17) - Test.instanceCount);
                    break;
                case 96:
                    Test.instanceCount = (long)1.94F;
                    break;
                case 97:
                    i16 += (i15 - i16);
                    break;
                case 98:
                    i14 = (int)-6716L;
                    break;
                default:
                    i17 += (int)-29940L;
                }
            }
        }
        vMeth_check_sum += i13 + i14 + by1 + i15 + i16 + s + i17 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i8, int i9, int i10) {

        int i11=190, i12=-100, i18=3, i19=-147, i20=-12, i21=12, i22=137, i23=-9, iArr2[]=new int[N];
        boolean b1=true;
        byte by2=116;

        FuzzerUtils.init(iArr2, 45692);

        for (i11 = 199; 5 < i11; --i11) {
            if (i8 != 0) {
            }
            vMeth();
            iArr2[i11 + 1] = (int)Test.instanceCount;
            Test.instanceCount = -55;
            for (i18 = 1; i18 < 8; ++i18) {
                Test.instanceCount = i8;
                b1 = b1;
                for (i20 = 1; 2 > i20; i20++) {
                    iArr2[i18 - 1] += (int)Test.fFld;
                }
                for (i22 = 1; 2 > i22; i22++) {
                    Test.fFld -= by2;
                }
                i10 += 5816;
                if (true) continue;
                iArr2[i11 + 1] <<= (int)Test.instanceCount;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i18 + i19 + (b1 ? 1 : 0) + i20 + i21 + i22 + i23 + by2 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i5, int i6, int i7) {

        int i24=3, i25=-7, i26=-5, i27=-11, i28=3, iArr3[]=new int[N];
        double d1=-16.114239;
        float f2=7.51F;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr3, 9017);
        FuzzerUtils.init(bArr, true);

        iMeth(i6, i7, i5);
        i24 = 1;
        while (++i24 < 168) {
            for (i25 = i24; i25 < 9; ++i25) {
                for (d1 = 1; d1 > 1; --d1) {
                    if (i6 != 0) {
                        return ((int)(i5 + i6 + i7 + i24 + i25 + i26 + Double.doubleToLongBits(d1) + i27 + i28 +
                            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr))) % 2 >
                            0;
                    }
                    switch (((i24 % 5) * 5) + 62) {
                    case 79:
                        i6 += (int)Test.instanceCount;
                        iArr3[(int)(d1)] |= (int)Test.instanceCount;
                        break;
                    case 68:
                        i28 &= i25;
                    case 64:
                        f2 -= (float)d1;
                        Test.instanceCount += (long)(((d1 * i27) + Test.fFld) - Test.instanceCount);
                        break;
                    case 65:
                        i28 += 58145;
                        i5 = (int)Test.instanceCount;
                        bArr[i24][i25 + 1] = false;
                        break;
                    case 72:
                        iArr3 = iArr3;
                    }
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i24 + i25 + i26 + Double.doubleToLongBits(d1) + i27 + i28 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i1=2069, i2=0, i3=2, i4=-3, i30=10, i31=-12, iArr4[]=new int[N];
        float f=73.463F;
        byte by=21;
        boolean b=false;
        double d2=0.17250;
        short s1=12781, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)13861);
        FuzzerUtils.init(iArr4, 47508);

        Test.instanceCount += lMeth(i1--);
        i1 -= (--i1);
        for (i2 = 18; i2 < 349; i2 += 2) {
            double d=0.82821;
            if (b || (!((Test.instanceCount = i1) != (++d)))) {
                i3 %= (int)(sArr[i2] | 1);
                for (f = 4; f < 152; ++f) {
                    i4 += (int)(((f * i2) + f) - by);
                }
                i1 += (i2 + f);
            } else if (bMeth(-51132, -4, i2)) {
                i4 = (int)((i1--) + 13269L);
            } else if (b) {
                i1 += i2;
            } else {
                Test.instanceCount = i4;
                i4 = i4;
                byArrFld[i2] -= (byte)i3;
                Test.instanceCount >>>= i3;
            }
            b = b;
            i4 &= i1;
            d2 = 1;
            do {
                for (i30 = 1; i30 < 1; ++i30) {
                    i1 += (int)f;
                    i1 = 24;
                    Test.fFld = i1;
                }
                i3 >>= (int)Test.instanceCount;
                iArr4 = iArr4;
                Test.fFld -= i2;
                i3 = (int)f;
                i3 -= (int)Test.instanceCount;
                s1 = (short)i30;
                Test.fFld -= Test.instanceCount;
                i1 = by;
                i31 += i30;
            } while (++d2 < 152);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
