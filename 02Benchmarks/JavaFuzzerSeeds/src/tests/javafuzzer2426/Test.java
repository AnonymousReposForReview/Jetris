package tests.javafuzzer2426;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:23:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-199L;
    public static boolean bFld=true;
    public static volatile double dFld=22.93844;
    public static float fFld=97.995F;
    public short sFld=16934;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 175);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, int i5) {

        double d1=-2.40718;
        int i6=-91, i7=127, i8=4528, i9=3, i10=11803, i11=-221, i12=-44, i13=-38585, i14=43261, i15=8;
        byte by1=-71;
        float f1=41.757F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 13L);

        d1 *= i5;
        for (i6 = 6; i6 < 386; i6++) {
            for (i8 = 4; i8 > 1; i8--) {
                Test.instanceCount += (((i8 * i5) + by1) - i9);
                i9 += (int)(-1537741932358496879L + (i8 * i8));
            }
        }
        lArr[(-11210 >>> 1) % N] = i8;
        i10 = 240;
        while (--i10 > 0) {
            if (true) continue;
            for (i11 = 1; 7 > i11; ++i11) {
                f1 = f1;
                i7 = i8;
            }
            i13 = 1;
            while (++i13 < 7) {
                for (i14 = 1; i14 < 1; i14++) {
                    i9 += (-5 + (i14 * i14));
                    i12 += (((i14 * i8) + i5) - i12);
                }
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + by1 + i10 + i11 + i12
            + Float.floatToIntBits(f1) + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(byte by, int i4) {

        float f=69.855F;
        int i16=-27050, i17=6, i18=5681, i19=-3, i20=5, i21=-40829;
        short s=-25513;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 88.69261);

        i4 += (int)(f - (-Test.instanceCount));
        vMeth2(Test.bFld, i4);
        for (i16 = 5; 299 > i16; i16++) {
            for (i18 = 1; i18 < 6; ++i18) {
                for (i20 = 1; i20 < 2; i20++) {
                    by &= (byte)i21;
                    Test.instanceCount += (i20 | s);
                    if (true) {
                        Test.dFld = i21;
                        if (Test.bFld) break;
                        Test.bFld = true;
                        i19 <<= i18;
                    } else {
                        dArr[i16 - 1] = i19;
                        i21 >>= -17;
                    }
                    Test.bFld = Test.bFld;
                }
            }
        }
        vMeth1_check_sum += by + i4 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19 + i20 + i21 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i2, double d) {

        int i3=76, i22=1, i23=-39, i24=65059, i25=134, i26=245, i27=-42598;
        byte by2=-83;
        float f2=-31.316F;

        i3 = 1;
        while (++i3 < 207) {
            i2 += i3;
            vMeth1(by2, i3);
            i2 += i2;
            for (i22 = 1; i22 < 8; i22++) {
                i2 = -51564;
            }
        }
        for (i24 = 7; i24 < 138; ++i24) {
            i25 = by2;
            switch (((i24 % 2) * 5) + 77) {
            case 80:
                if (i2 != 0) {
                    vMeth_check_sum += i2 + Double.doubleToLongBits(d) + i3 + by2 + i22 + i23 + i24 + i25 + i26 + i27 +
                        Float.floatToIntBits(f2);
                    return;
                }
                break;
            case 86:
                i2 /= (int)(i22 | 1);
                for (i26 = 1; i26 < 12; i26++) {
                    f2 -= i3;
                    i27 = i25;
                    i2 = i3;
                }
            }
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d) + i3 + by2 + i22 + i23 + i24 + i25 + i26 + i27 +
            Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i=14, i1=9, i28=-185, i29=-27525, i30=12006, i31=-115, i32=42197, i33=14, i34=-512;
        byte by3=-96;
        boolean b1=true;
        float f3=0.730F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2223421886L);

        if (b1) {
            for (i = 13; 334 > i; i++) {
                if (Test.bFld) continue;
                vMeth(i, Test.dFld);
                for (i28 = 3; i28 < 78; ++i28) {
                    by3 += (byte)(((i28 * i) + i) - i28);
                    Test.instanceCount >>= Test.instanceCount;
                }
                Test.iArrFld[i - 1] *= (int)Test.instanceCount;
                Test.instanceCount -= (long)Test.fFld;
            }
            i29 = (int)Test.fFld;
            sFld ^= (short)i28;
        } else {
            Test.instanceCount %= 1843;
            for (f3 = 9; f3 < 278; ++f3) {
                i29 -= (int)Test.dFld;
                for (i31 = 93; i31 > 3; --i31) {
                    Test.fFld += (i31 - i31);
                    switch ((i31 % 1) + 66) {
                    case 66:
                        lArr1[i31 + 1] |= i30;
                        sFld = (short)i28;
                        break;
                    default:
                        i29 ^= i;
                        i1 &= i29;
                        i32 -= i1;
                        lArr1[(int)(f3 - 1)] /= -11899;
                    }
                    Test.iArrFld[i31 + 1] = (int)Test.instanceCount;
                    i29 *= -13667;
                    for (i33 = 1; i33 < 2; i33++) {
                        Test.iArrFld[(int)(f3 + 1)] *= (int)Test.fFld;
                        i32 += i30;
                    }
                    Test.instanceCount <<= i29;
                    if (Test.bFld) continue;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
