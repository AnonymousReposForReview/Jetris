package tests.javafuzzer2351;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:06:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1877836439L;
    public static boolean bFld=true;
    public int iFld=7;
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.dArrFld, -1.42503);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=-9324, i5=1, i6=240, i7=-37950, i8=-50859, i9=-24693;
        double d=103.46644;
        float f=46.127F;

        for (i4 = 14; i4 < 368; i4++) {
            i5 += (((i4 * i5) + i5) - Test.instanceCount);
            for (i6 = 5; i6 > 1; i6 -= 2) {
                Test.instanceCount = i6;
                for (i8 = 1; i8 < 3; ++i8) {
                    byte by=41;
                    i9 <<= 1;
                    Test.instanceCount = Test.instanceCount;
                    i9 -= (int)d;
                    Test.iArrFld[i4] <<= i6;
                    i9 -= by;
                    Test.instanceCount = i7;
                    f += i8;
                }
                i5 *= (int)Test.instanceCount;
                Test.iArrFld[i6 + 1] = (int)f;
                Test.iArrFld[i4] *= (int)f;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + Float.floatToIntBits(f);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i2=-43, i3=-250, i10=231, i11=5, i12=3, i13=20190, i14=107, i15=2, i16=-151, i17=116, iArr1[]=new int[N];
        float f1=-67.811F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -50146);
        FuzzerUtils.init(byArr, (byte)37);

        for (i2 = 1; i2 < 390; ++i2) {
            Test.instanceCount += (i2 * i2);
            iArr1[i2] = (int)lMeth();
            f1 *= i2;
        }
        for (i10 = 231; i10 > 6; i10--) {
            iArr1[i10] = i10;
            for (i12 = 1; 7 > i12; ++i12) {
                i11 -= -141;
                i3 = i10;
                for (i14 = 1; i14 < 2; i14++) {
                    if (Test.bFld) continue;
                }
                for (i16 = 1; 2 > i16; ++i16) {
                    iArr1[i16 - 1] ^= (int)Test.instanceCount;
                    if (Test.bFld) continue;
                    byArr[i16] += (byte)229;
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i) {

        int i18=-46, i19=-73, i20=7, iArr[]=new int[N];
        float f2=84.829F, fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(dArr, -2.25264);
        FuzzerUtils.init(fArr, 29.766F);

        for (int i1 : iArr) {
            iMeth();
            i18 = 1;
            do {
                for (i19 = 1; i19 < 1; ++i19) {
                    iArr = Test.iArrFld;
                    iArr[i18 + 1] >>= i1;
                    f2 += i19;
                    Test.instanceCount += i20;
                    iArr[i19] >>= i;
                    l *= i1;
                    i1 += (((i19 * Test.instanceCount) + i) - Test.instanceCount);
                    dArr[i18 + 1] = l;
                }
                Test.instanceCount -= i;
                fArr[i18 - 1] += -24;
                i += (i18 + f2);
            } while (++i18 < 4);
        }
        vMeth_check_sum += l + i + i18 + i19 + i20 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=-1331, i22=-222, i23=-63542;
        byte by1=26, byArr1[]=new byte[N];
        float f3=54.560F;

        FuzzerUtils.init(byArr1, (byte)89);

        vMeth(Test.instanceCount, iFld);
        i21 = 1;
        while (++i21 < 304) {
            iFld *= by1;
            iFld += (int)f3;
            switch ((i21 % 2) + 18) {
            case 18:
                i22 = 1;
                do {
                    f3 += Test.instanceCount;
                    Test.instanceCount = iFld;
                    Test.instanceCount *= Test.instanceCount;
                    i23 = 1;
                    do {
                        iFld = (int)11L;
                        byArr1[i22 - 1] -= (byte)-1.80212;
                        switch ((i23 % 8) + 28) {
                        case 28:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 29:
                            if (Test.bFld) continue;
                            Test.iArrFld[i23] = i21;
                            f3 += (i23 * Test.instanceCount);
                            break;
                        case 30:
                            iFld = iFld;
                            iFld = by1;
                            iFld += (int)Test.instanceCount;
                            break;
                        case 31:
                            iFld %= (int)(i22 | 1);
                            try {
                                Test.iArrFld[i22] = (-58524 % Test.iArrFld[i22]);
                                iFld = (6755 / iFld);
                                iFld = (Test.iArrFld[i21 + 1] / -11099);
                            } catch (ArithmeticException a_e) {}
                            if (true) break;
                            Test.iArrFld[i21] *= i22;
                            break;
                        case 32:
                            iFld += (((i23 * i21) + i23) - Test.instanceCount);
                            iFld += (int)Test.instanceCount;
                            iFld += (47 + (i23 * i23));
                        case 33:
                            f3 = i23;
                            iFld ^= 4;
                            break;
                        case 34:
                            iFld += (i23 * f3);
                            break;
                        case 35:
                            iFld += iFld;
                            break;
                        }
                    } while (++i23 < 1);
                } while (++i22 < 83);
                break;
            case 19:
                Test.dArrFld[i21 - 1] += i21;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
