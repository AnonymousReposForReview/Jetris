package tests.javafuzzer183;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:35:29 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=232L;
    public static float fFld=1.367F;
    public static boolean bFld=true;
    public static int iFld=5;
    public double dFld=1.23295;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.fArrFld, -2.661F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6) {

        int i7=-223, i8=-6891, i9=-14, i10=52273, i11=27802, i12=130;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -81.732F);

        i6 = i6;
        Test.bFld = Test.bFld;
        for (i7 = 376; i7 > 21; i7--) {
            fArr[i7] = Test.fFld;
            for (i9 = 1; i9 < 5; i9++) {
                for (i11 = 1; i11 < 2; ++i11) {
                    Test.fFld += i11;
                    i12 &= i11;
                    i6 += -61648;
                    Test.instanceCount *= (long)Test.fFld;
                    i10 += i11;
                    Test.fFld += i8;
                    Test.instanceCount += (i11 * i11);
                    i8 &= 23193;
                    Test.fFld %= (i12 | 1);
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, long l, long l1) {

        boolean b=false;
        double d=-73.99305;
        int i13=59388, i14=157, i15=57, i16=-36803, i17=-13752, i18=116, iArr[]=new int[N];
        short s=-17249;

        FuzzerUtils.init(iArr, 61);

        b = b;
        iArr[(i5 >>> 1) % N] -= (int)(--Test.fFld);
        iMeth(i5);
        l1 += -198;
        Test.fFld = Test.fFld;
        i5 *= (int)d;
        iArr[(i5 >>> 1) % N] >>= i5;
        for (i13 = 7; i13 < 148; i13++) {
            i5 |= i14;
            iArr[i13 - 1] = (int)Test.instanceCount;
            for (i15 = 1; 11 > i15; i15++) {
                for (i17 = 1; 2 > i17; ++i17) {
                    i14 >>= i15;
                    i5 *= i13;
                    s = (short)d;
                }
            }
        }
        vMeth1_check_sum += i5 + l + l1 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + i17 + i18
            + s + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        int i1=-10226, i2=8, i3=-53630, i4=170, i19=5, i20=-191, iArr1[]=new int[N];
        double d1=-1.39913;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-85);
        FuzzerUtils.init(lArr, -20053L);
        FuzzerUtils.init(iArr1, -92);

        for (i1 = 9; i1 < 300; ++i1) {
            for (i3 = 1; i3 < 6; i3 += 3) {
                Test.fFld *= (++i4);
                i2 *= (i2 >>= i1);
                vMeth1(i1, Test.instanceCount, Test.instanceCount);
                Test.instanceCount *= i;
                Test.instanceCount -= i3;
                i2 *= (int)Test.instanceCount;
                for (i19 = 1; i19 < 6; i19++) {
                    short s1=-20469;
                    Test.instanceCount %= (i19 | 1);
                    i4 += (((i19 * s1) + Test.instanceCount) - i);
                    switch (((i4 >>> 1) % 10) + 91) {
                    case 91:
                        s1 += (short)i19;
                        byArr[i1 - 1] = (byte)i3;
                        break;
                    case 92:
                        i |= i1;
                        break;
                    case 93:
                        Test.instanceCount += i19;
                        break;
                    case 94:
                        lArr[i1] = (long)54.490F;
                    case 95:
                        Test.fFld += i19;
                        break;
                    case 96:
                        d1 = i20;
                        break;
                    case 97:
                        i = -39327;
                    case 98:
                        i -= (int)Test.fFld;
                        break;
                    case 99:
                        try {
                            i4 = (i3 % -49346);
                            i2 = (i2 / i4);
                            i20 = (iArr1[i19] / 40513);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 100:
                        i20 = i1;
                    default:
                        i4 = i19;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i19 + i20 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        short s2=2089;
        int i21=250, i22=168, i23=57582, i24=135, i25=11, i26=5, i27=-3;
        byte by=-107;
        long l2=-8L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 968834799L);

        vMeth(Test.iFld);
        Test.fFld += Test.iFld;
        Test.iArrFld[(-15 >>> 1) % N][(Test.iFld >>> 1) % N] /= (int)(Test.instanceCount | 1);
        Test.iFld <<= s2;
        Test.iArrFld[(Test.iFld >>> 1) % N][(-7 >>> 1) % N] = Test.iFld;
        for (i21 = 9; 252 > i21; i21++) {
            Test.iFld &= Test.iFld;
            Test.fArrFld[(i21 >>> 1) % N] = Test.iFld;
            for (i23 = 5; 103 > i23; i23++) {
                Test.instanceCount *= i24;
                by = (byte)-1694053593L;
                lArr1[i21] = i23;
                Test.fFld = (float)dFld;
                Test.iArrFld[i21][i23] |= 38;
                s2 = (short)-35499;
                i24 += (i23 ^ i24);
                i24 += (int)Test.instanceCount;
                Test.iArrFld[i21 + 1][i21 + 1] -= (int)Test.fFld;
            }
            for (l2 = 1; l2 < 103; l2++) {
                dFld += 234;
                Test.instanceCount -= (long)dFld;
                Test.bFld = false;
                for (i26 = 1; i26 < 2; ++i26) {
                    i24 += (((i26 * Test.instanceCount) + i25) - l2);
                    switch ((int)((l2 % 1) + 33)) {
                    case 33:
                        Test.instanceCount += (i26 + l2);
                        Test.iArrFld[i21 - 1][i21] = (int)dFld;
                        if (Test.bFld) break;
                        break;
                    default:
                        Test.instanceCount *= (long)dFld;
                    }
                    Test.iArrFld[i26 + 1][(int)(l2)] += (int)Test.instanceCount;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
