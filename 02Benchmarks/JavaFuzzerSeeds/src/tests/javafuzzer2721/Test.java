package tests.javafuzzer2721;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:18:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4618851450227052778L;
    public static boolean bFld=false;
    public static float fFld=2.682F;
    public static double dFld=2.123535;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -177);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2) {

        int i3=6, i4=-14, i6=146, i7=-59790, i8=-6, iArr1[]=new int[N];
        double d=-68.68839, d1=106.43966;
        boolean b=true;
        byte by=30;
        float f=126.544F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 3403396268923622534L);
        FuzzerUtils.init(iArr1, 223);

        for (i3 = 16; 343 > i3; i3++) {
            short s=18148;
            d = 35690;
            lArr1[i3] >>= i4;
            if (b) continue;
            lArr1[(i3 >>> 1) % N] *= Test.instanceCount;
            i4 = s;
            i6 = 1;
            while (++i6 < 5) {
                for (i7 = 1; i7 < 1; i7++) {
                    i2 += (i7 * i7);
                    Test.instanceCount += Test.instanceCount;
                    by = by;
                }
                d1 = 1;
                do {
                    Test.instanceCount += (long)d1;
                    f += Test.instanceCount;
                    i4 *= i4;
                } while (++d1 < 1);
            }
        }
        long meth_res = i2 + i3 + i4 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i6 + i7 + i8 + by +
            Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, long l) {

        int i9=4, i10=0, i11=-22, i12=-22, iArr2[]=new int[N];
        float f1=-126.849F;
        byte by2=117;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -34684);
        FuzzerUtils.init(sArr, (short)-19701);

        i1 <<= iMeth(i1);
        i9 = 1;
        do {
            i10 = 1;
            do {
                l = (long)f1;
                iArr2[i9] = i10;
                for (i11 = 1; i11 > 1; i11--) {
                    byte by1=-57;
                    i1 -= 29545;
                    i12 &= i9;
                    l += i11;
                    iArr2[i10] += i11;
                    sArr[i10 + 1] -= (short)37077;
                    by1 = (byte)i9;
                    f1 = i10;
                    Test.instanceCount += i11;
                }
                iArr2[i9] *= by2;
            } while (++i10 < 6);
        } while (++i9 < 295);
        vMeth1_check_sum += i1 + l + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + by2 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth() {

        int i=36726, i13=14, i14=-30263, i15=-13647, i16=-34154, i17=-149, i18=-38299, iArr[][]=new int[N][N];
        double d2=64.976;
        float f2=-1.466F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -21426);
        FuzzerUtils.init(lArr, 18973L);

        i = (int)(i - ((iArr[(i >>> 1) % N][(i >>> 1) % N] -= i) - 0L));
        i ^= (int)(++lArr[(i >>> 1) % N]);
        vMeth1(i, -9L);
        d2 -= f2;
        i -= i;
        d2 = d2;
        for (i13 = 12; i13 < 271; ++i13) {
            for (i15 = 1; i15 < 6; ++i15) {
                if (Test.bFld) break;
            }
            d2 = i13;
            iArr[i13][i13 - 1] -= i16;
            i >>>= i14;
            for (i17 = 1; i17 < 6; i17++) {
                int i19=110;
                lArr = lArr;
                f2 += (((i17 * i) + i17) - i19);
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 +
            i18 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=31139, i21=-11, i22=-3, i23=-21956, i24=57373, i26=18;
        byte by3=-51;
        long l1=6716L;
        double d3=-10.52808;
        short s1=19968;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth();
        i20 = i20;
        Test.instanceCount = (long)Test.fFld;
        Test.instanceCount = by3;
        for (l1 = 1; l1 < 335; l1++) {
            i20 -= -138;
            i20 += (int)8L;
            Test.dFld *= 29470;
            for (i22 = 3; i22 < 75; ++i22) {
                Test.instanceCount -= (long)-1.111F;
                for (d3 = 1; d3 < 2; ++d3) {
                    Test.iArrFld[(int)(l1 + 1)] >>>= i24;
                    Test.instanceCount -= i21;
                    Test.dFld -= i24;
                    Test.iArrFld[(int)(d3)] -= (int)Test.fFld;
                    i20 += (int)-1.41F;
                    Test.fFld += (float)(((d3 * Test.instanceCount) + i20) - i20);
                    Test.dFld /= (i24 | 1);
                    Test.iArrFld[i22 - 1] = i22;
                }
                i20 -= i24;
            }
            switch ((((i22 >>> 1) % 10) * 5) + 20) {
            case 49:
                Test.instanceCount -= i23;
                i23 <<= i22;
                Test.instanceCount = l1;
                try {
                    i26 = (-13905 % i24);
                    i24 = (i22 / i24);
                    i20 = (i24 % i21);
                } catch (ArithmeticException a_e) {}
            case 54:
                s1 = (short)i26;
                i24 *= (int)-57L;
                Test.fFld = i22;
                break;
            case 34:
                Test.dFld = i20;
                Test.instanceCount += (((l1 * by3) + i24) - i26);
                break;
            case 48:
                i26 >>= i22;
                break;
            case 55:
                i26 = (int)Test.instanceCount;
                break;
            case 50:
                Test.fFld = Test.instanceCount;
            case 51:
                if (Test.bFld) continue;
                break;
            case 21:
                Test.instanceCount = i21;
                break;
            case 67:
                bArr = bArr;
                break;
            case 22:
                Test.dFld += s1;
                break;
            default:
                Test.iArrFld[(int)(l1)] += (int)10.309F;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
