package tests.javafuzzer3330;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:16:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=29085L;
    public short sFld=-4533;
    public static boolean bFld=true;
    public static volatile byte byFld=-114;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 66);
        FuzzerUtils.init(Test.sArrFld, (short)31251);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        int i6=-45889, i7=216, i8=53, i9=11, i10=-13, i11=5, i12=-65190, i13=-179, iArr[]=new int[N];
        double d=2.58073;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -218);

        i6 = -20;
        switch ((((i6 >>> 1) % 2) * 5) + 13) {
        case 22:
            for (i7 = 355; 3 < i7; i7--) {
                i8 <<= i7;
                f = Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                for (i9 = 5; 1 < i9; i9 -= 3) {
                    i10 -= (int)d;
                    for (i11 = 1; i11 < 5; ++i11) {
                        bArr[i7 - 1] = Test.bFld;
                        try {
                            i8 = (-82 % i10);
                            i8 = (Test.iArrFld[i7 - 1] % i7);
                            i13 = (i6 % i10);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (-74 + (i11 * i11));
                        i12 += (3 + (i11 * i11));
                        iArr = iArr;
                        if (Test.bFld) continue;
                    }
                }
            }
        case 16:
            i6 += i10;
            break;
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12
            + i13 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i5, short s) {

        float f1=66.420F, fArr[]=new float[N];
        int i14=-42409, i15=-150, i16=2, i17=22556, i18=15171, i19=-15632, i20=-53;

        FuzzerUtils.init(fArr, 1.553F);

        if (Test.bFld) {
            vMeth2(f1);
        } else if (Test.bFld) {
            for (i14 = 8; 320 > i14; i14++) {
                i5 >>>= (int)Test.instanceCount;
            }
            i16 = 1;
            do {
                i15 = (int)f1;
                Test.instanceCount = 13;
                for (i17 = 6; i17 > 1; i17 -= 3) {
                    fArr[i16 - 1] = Test.instanceCount;
                }
            } while (++i16 < 283);
        }
        for (i19 = 18; i19 < 382; ++i19) {
            switch ((((-12 >>> 1) % 2) * 5) + 62) {
            case 69:
                Test.instanceCount -= Test.byFld;
                i20 -= i5;
                i15 += (((i19 * i5) + i19) - i15);
            case 72:
                i20 += (i19 - s);
                break;
            default:
                i15 = i14;
            }
        }
        vMeth1_check_sum += i5 + s + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l) {

        int i3=-43, i4=-1, i21=-50876;
        short s1=-24039;
        long l2=6L, lArr[]=new long[N];
        float f2=-90.73F;

        FuzzerUtils.init(lArr, 2563726165L);

        for (i3 = 11; i3 < 366; i3++) {
            vMeth1(i3, s1);
            i4 = i3;
            for (l2 = 1; l2 < 5; l2++) {
                Test.instanceCount = (long)f2;
                i4 -= i3;
                if (Test.bFld) continue;
                Test.instanceCount = i4;
                Test.instanceCount += (l2 * l2);
                i21 += (int)Test.instanceCount;
                Test.instanceCount += (l2 + i4);
                Test.instanceCount <<= i3;
            }
            f2 = l;
            lArr[i3 + 1] -= Test.instanceCount;
        }
        Test.sArrFld[(14 >>> 1) % N] = (short)i4;
        vMeth_check_sum += l + i3 + i4 + s1 + l2 + i21 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i1=13, i2=-22961, i22=2922, i23=2, i24=31144, i25=93, i26=-9, i27=-8911, i28=-150;
        float f3=2.251F;
        long l3=-3006428037L;
        double d1=1.62481;

        sFld *= (short)i;
        try {
            if (false) {
                for (i1 = 11; i1 < 203; ++i1) {
                    i2 = i2;
                    vMeth(Test.instanceCount);
                    for (i22 = i1; i22 < 131; ++i22) {
                        for (i24 = i1; 1 > i24; ++i24) {
                            Test.iArrFld = Test.iArrFld;
                            i26 *= i24;
                            Test.instanceCount += sFld;
                            i = i26;
                            i2 = (int)f3;
                            i = i;
                        }
                        i25 >>= i;
                        i += i22;
                        i2 = i25;
                        Test.instanceCount = i26;
                    }
                    i2 *= (int)Test.instanceCount;
                    for (i27 = i1; i27 < 131; ++i27) {
                        i28 += i24;
                        Test.bFld = Test.bFld;
                    }
                    i28 = (int)8173062054892811933L;
                    Test.instanceCount |= i22;
                    i2 = i25;
                    l3 >>= Test.instanceCount;
                }
                l3 %= (i23 | 1);
                d1 -= l3;
            } else if (Test.bFld) {
                Test.sArrFld[(-18581 >>> 1) % N] -= (short)23978;
            } else if (true) {
                i23 -= i23;
            } else {
                Test.iArrFld[(i27 >>> 1) % N] = (int)l3;
            }
        }
        catch (NegativeArraySizeException exc1) {
            i += (int)d1;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
