package tests.javafuzzer1284;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:40:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-220L;
    public static float fFld=-24.11F;
    public static int iFld=10;
    public static short sFld=-29722;
    public volatile byte byFld=-38;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 209L);
        FuzzerUtils.init(Test.sArrFld, (short)-20764);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, long l3) {

        int i5=-44570, i6=-32312, i7=188, i8=3, i9=177, i10=-13, iArr[]=new int[N];
        float f=-41.961F;

        FuzzerUtils.init(iArr, -13);

        for (i5 = 342; i5 > 8; i5 -= 3) {
            i4 += (-39423 + (i5 * i5));
        }
        for (i7 = 136; i7 > 7; i7 -= 2) {
            iArr[i7] = (int)l3;
            for (i9 = 1; i9 < 24; ++i9) {
                l3 = i9;
                i4 += i9;
                i6 = i10;
                f = 1;
                while (++f < 2) {
                    i6 <<= i9;
                    i8 = i10;
                    i10 >>= i7;
                    Test.instanceCount += (long)f;
                    i6 = i8;
                }
                Test.instanceCount += (((i9 * Test.instanceCount) + Test.fFld) - l3);
            }
        }
        vMeth2_check_sum += i4 + l3 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l2, int i1) {

        int i2=-2, i3=-11, i11=0, i12=253, i13=-2, i14=60, i15=52;
        byte by=-6;
        double d=85.124910, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 47.113671);

        for (i2 = 9; i2 < 257; ++i2) {
            vMeth2(i1, l2);
            i1 = i2;
            by += (byte)l2;
            if (i2 != 0) {
                vMeth1_check_sum += l2 + i1 + i2 + i3 + by + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
        }
        i11 = 390;
        do {
            switch ((i11 % 1) + 29) {
            case 29:
                for (i12 = 4; i12 > 1; --i12) {
                    Test.instanceCount = l2;
                    for (i14 = i12; i14 < 2; i14++) {
                        l2 *= 46;
                        i1 = i12;
                        i15 += i14;
                        Test.lArrFld[i11 + 1] %= (i13 | 1);
                        i15 += (int)d;
                    }
                }
                break;
            default:
                dArr[i11 + 1] += i15;
            }
        } while (--i11 > 0);
        vMeth1_check_sum += l2 + i1 + i2 + i3 + by + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(long l1) {

        int i16=36670, i17=-53238, i18=9912, iArr1[]=new int[N];
        short s=24586;
        byte by1=-87;
        double dArr1[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr1, 0.36823);
        FuzzerUtils.init(fArr, -115.756F);
        FuzzerUtils.init(iArr1, -62533);

        vMeth1(l1, Test.iFld);
        dArr1[(Test.iFld >>> 1) % N] += Test.iFld;
        i16 = 388;
        while (--i16 > 0) {
            Test.iFld -= (int)-119.21104;
            Test.sArrFld = FuzzerUtils.short1array(N, (short)6666);
            Test.iFld = (int)Test.fFld;
            for (i17 = 1; i17 < 4; ++i17) {
                int i19=11;
                i18 = i17;
                fArr[i17 - 1] = s;
                iArr1[i16 - 1] = i17;
                Test.fFld = Test.instanceCount;
                i19 -= i16;
                i19 = i18;
                i19 = by1;
                try {
                    iArr1[i17] = (35322 / iArr1[i17 - 1]);
                    i19 = (48631 % i19);
                    i19 = (15244 % i19);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += l1 + i16 + i17 + i18 + s + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=4, i20=236, i21=-30809, i22=30, i23=63505, iArr2[][]=new int[N][N];
        boolean b=true;
        double d1=0.92507;

        FuzzerUtils.init(iArr2, -55168);

        i = (int)(i + Test.fFld);
        for (long l : Test.lArrFld) {
            vMeth(l);
            Test.instanceCount >>= i;
            switch (((Test.iFld >>> 1) % 1) + 113) {
            case 113:
                for (i20 = 3; i20 < 63; ++i20) {
                    i |= Test.sFld;
                    i += Test.sFld;
                    switch (((i20 % 2) * 5) + 11) {
                    case 18:
                        Test.iFld = i;
                        break;
                    case 17:
                        Test.fFld = i21;
                        Test.fFld = l;
                    }
                    if (b) break;
                    i21 += (((i20 * i21) + i21) - Test.iFld);
                    switch ((((-174 >>> 1) % 2) * 5) + 68) {
                    case 78:
                        Test.instanceCount = i22;
                        Test.fFld = i20;
                        break;
                    case 77:
                        i += (i20 * l);
                        switch ((i20 % 2) + 66) {
                        case 66:
                            i22 *= i21;
                            switch (((Test.iFld >>> 1) % 3) + 56) {
                            case 56:
                                i22 += i21;
                                break;
                            case 57:
                                i23 = 1;
                                do {
                                    try {
                                        i = (i22 / -12879);
                                        Test.iFld = (iArr2[i23][i23] / -187);
                                        i21 = (iArr2[i20][i20] / iArr2[i23 + 1][i23 - 1]);
                                    } catch (ArithmeticException a_e) {}
                                    i21 += (i23 * Test.fFld);
                                    switch ((((i >>> 1) % 5) * 5) + 56) {
                                    case 72:
                                        i22 += i23;
                                        byFld += (byte)i23;
                                        Test.iFld += (((i23 * i20) + i23) - i20);
                                    case 61:
                                        Test.instanceCount = 1L;
                                        break;
                                    case 57:
                                        Test.instanceCount *= l;
                                        break;
                                    case 69:
                                        Test.instanceCount += (((i23 * Test.instanceCount) + l) - l);
                                        break;
                                    case 76:
                                        i += 47751;
                                        break;
                                    }
                                } while (++i23 < 2);
                                break;
                            case 58:
                                if (false) break;
                            default:
                                iArr2[i20][i20 - 1] *= (int)d1;
                            }
                        case 67:
                            i22 = (int)l;
                            break;
                        default:
                            iArr2[i20][i20] += (int)Test.instanceCount;
                        }
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
