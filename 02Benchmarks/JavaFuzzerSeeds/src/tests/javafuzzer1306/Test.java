package tests.javafuzzer1306;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:52:13 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-7L;
    public static float fFld=22.475F;
    public byte byFld=64;
    public static short sFld=-9320;
    public static boolean bFld=false;
    public static int iFld=-253;
    public double dArrFld[][]=new double[N][N];
    public boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i9, int i10, double d1) {

        int i11=9, i12=164, i13=13, i14=27881, i15=-34159, i16=14, i17=-13, iArr1[][]=new int[N][N];
        double d2=-36.37281, d3=-58.19779, d4=1.99960;
        boolean b=false;

        FuzzerUtils.init(iArr1, -36437);

        i9 = i9;
        for (i11 = 9; i11 < 193; i11 += 2) {
            for (i13 = 1; i13 < 17; i13 += 3) {
                for (d2 = 1; d2 < 4; d2++) {
                    Test.instanceCount += Test.instanceCount;
                }
                for (d3 = 1; d3 < 4; d3++) {
                    if (false) continue;
                    b = b;
                }
                Test.fFld = -57040;
                for (d4 = 4; d4 > 1; --d4) {
                    i10 -= i10;
                    i15 += (int)d4;
                    iArr1 = iArr1;
                    i12 += (int)((long)d4 ^ i11);
                    i9 >>>= i17;
                }
            }
        }
        long meth_res = i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d2) +
            i15 + Double.doubleToLongBits(d3) + i16 + (b ? 1 : 0) + Double.doubleToLongBits(d4) + i17 +
            FuzzerUtils.checkSum(iArr1);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i5, int i6) {

        int i7=-7, i8=-102, i18=-2, i19=-22827, i20=5, i21=-84, iArr2[][]=new int[N][N];
        double d5=125.41855;
        short s=-8306, sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -194);
        FuzzerUtils.init(sArr, (short)-15551);

        for (i7 = 3; 242 > i7; ++i7) {
            i8 = (iMeth2(i7, i7, d5) * i8);
            Test.fFld -= Test.instanceCount;
            i8 = i6;
            Test.instanceCount *= i5;
        }
        for (i18 = 10; i18 < 343; i18++) {
            iArr2 = iArr2;
            i8 -= (int)Test.fFld;
            i19 = i7;
            for (i20 = 1; i20 < 5; i20++) {
                Test.instanceCount = 93;
                Test.fFld -= i21;
            }
            s += (short)(((i18 * Test.fFld) + Test.fFld) - i7);
            try {
                i8 = (-10947 / iArr2[i18 + 1][i18 + 1]);
                i21 = (-59167 / i8);
                iArr2[i18][i18] = (i8 % i8);
            } catch (ArithmeticException a_e) {}
            sArr = FuzzerUtils.short1array(N, (short)12441);
        }
        long meth_res = i5 + i6 + i7 + i8 + Double.doubleToLongBits(d5) + i18 + i19 + i20 + i21 + s +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i1) {

        int i2=0, i3=5, i4=61866, i22=-13, i23=-178, iArr[]=new int[N];
        double d=27.86368;
        float f1=-110.730F;
        boolean b1=true;

        FuzzerUtils.init(iArr, -9);

        for (i2 = 13; i2 < 248; i2++) {
            for (d = 1; d < 7; d += 2) {
                f1 = ((i4 + (i4 - -38)) - Test.instanceCount);
                iArr[(int)(d)] <<= i3;
                i1 = iMeth1(i4, i3);
                i22 = 1;
                do {
                    i4 += (i22 * i22);
                } while (++i22 < 3);
                i23 = 1;
                while ((i23 += 2) < 3) {
                    bArrFld = bArrFld;
                    Test.instanceCount += i4;
                    i3 += i23;
                    i3 = i23;
                    b1 = false;
                    f1 += byFld;
                    i4 += (((i23 * i3) + i1) - i22);
                }
            }
        }
        long meth_res = i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i22 + i23 + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=119.77F;
        int i=-178, i24=-2327, i25=-164, i26=-10, i27=-119, i28=-58949, i29=6, i30=-14;
        double d6=-1.83735;

        switch (((((int)(f + i)) >>> 1) % 4) + 43) {
        case 43:
            dArrFld[(i >>> 1) % N][(i >>> 1) % N] = (i - (iMeth(i) * i));
            i24 = 1;
            do {
                i = i24;
                i -= i24;
                Test.fFld -= byFld;
                i += i24;
                f = i24;
                i += i24;
                Test.sFld >>>= (short)i;
                i -= (int)2615813119L;
                d6 += 52792;
            } while (++i24 < 189);
            iArrFld[(83 >>> 1) % N] *= i24;
            iArrFld[(68 >>> 1) % N] += i24;
            break;
        case 44:
            for (i25 = 1; 189 > i25; i25++) {
                Test.instanceCount += (((i25 * i24) + Test.instanceCount) - i);
                if (Test.bFld) continue;
                i += (int)Test.instanceCount;
            }
            i27 = 270;
            do {
                f += i27;
                switch (((i26 >>> 1) % 3) + 108) {
                case 108:
                    i28 = 1;
                    do {
                        for (i29 = 1; i29 > 1; --i29) {
                            iArrFld[i28 - 1] *= i24;
                            lArrFld[i27] -= i;
                            i26 = (int)3056393649169342527L;
                            if (Test.bFld) {
                                fArrFld[i29 - 1] += i30;
                                i >>= (int)Test.instanceCount;
                            } else {
                                i = (int)Test.instanceCount;
                            }
                        }
                    } while (++i28 < 93);
                    break;
                case 109:
                case 110:
                    Test.instanceCount &= Test.iFld;
                }
            } while (--i27 > 0);
            break;
        case 45:
            lArrFld[(i29 >>> 1) % N] = 178;
        case 46:
            i26 -= i29;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
