package tests.javafuzzer2068;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:36:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-50848L;
    public static volatile int iFld=59798;
    public static double dFld=24.88583;
    public static boolean bFld=false;
    public static byte byFld=-114;
    public static long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -103182040L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, int i3) {

        int i4=1, i5=-46691, i6=6506, i7=-8, i8=9, iArr[]=new int[N];
        float f2=0.465F;
        double d=-85.82428;
        short s=-643;
        boolean b=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 52303);
        FuzzerUtils.init(byArr, (byte)-43);

        iArr[(i3 >>> 1) % N] <<= (int)Test.instanceCount;
        i4 = 1;
        while ((i4 += 2) < 197) {
            f2 -= i4;
            i2 = -61727;
            for (i5 = 1; i5 < 16; ++i5) {
                for (i7 = 1; i7 < 2; i7++) {
                    i2 = i3;
                    Test.lArrFld[i7] = (long)d;
                    iArr[(i7 >>> 1) % N] = i5;
                    Test.iFld = i4;
                    iArr[(i6 >>> 1) % N] = 8;
                    if (b) {
                        i2 = i7;
                        i2 += s;
                        Test.instanceCount -= -9;
                    } else if (true) {
                        byArr[i7 - 1] = (byte)Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f2) + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + s +
            (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i=15790, i1=9, i9=-12, i10=-3683, i11=-11, i12=-114;
        float f1=115.576F;

        i = 203;
        while ((i -= 3) > 0) {
            f1 += (((--i1) + (i + i)) + (++i1));
        }
        Test.instanceCount = (iMeth(i1, i1) * Test.iFld);
        Test.iFld -= (int)Test.instanceCount;
        Test.dFld *= -246;
        for (i9 = 3; i9 < 235; ++i9) {
            i11 = 1;
            do {
                switch ((((i11 >>> 1) % 1) * 5) + 77) {
                case 80:
                default:
                    i10 = -5;
                    i1 += (((i11 * Test.instanceCount) + Test.instanceCount) - i11);
                    i12 = 1;
                    do {
                        Test.lArrFld[i12 - 1] <<= i;
                        i10 = i1;
                        Test.iFld -= -12;
                        i1 += (214 + (i12 * i12));
                    } while ((i12 += 2) < 1);
                }
            } while (++i11 < 7);
        }
        vMeth1_check_sum += i + Float.floatToIntBits(f1) + i1 + i9 + i10 + i11 + i12;
    }

    public void vMeth(float f) {

        int i13=3, i14=10, i15=30469, i16=182, i17=11, i18=-2;
        boolean b1=false;

        vMeth1();
        Test.instanceCount = Test.iFld;
        Test.iFld >>= (int)Test.instanceCount;
        if (b1) {
            iArrFld[(-62997 >>> 1) % N][(Test.iFld >>> 1) % N] *= (int)Test.instanceCount;
        } else if (b1) {
            for (i13 = 1; 259 > i13; i13++) {
                for (i15 = 1; 6 > i15; ++i15) {
                    f += i15;
                    iArrFld[i13 - 1][i15 + 1] = i14;
                    Test.iFld *= 1;
                    for (i17 = 1; i17 < 2; i17++) {
                        i16 &= i16;
                        if (b1) continue;
                        i18 += (((i17 * i15) + i13) - Test.instanceCount);
                        f -= i13;
                    }
                }
            }
        } else if (true) {
            f *= -3053968725721709505L;
        } else {
            Test.instanceCount %= (Test.instanceCount | 1);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i19=49, i20=37036, i21=-170, i22=-20670, i23=201, i24=29221, i25=-7;
        long l=2650463766310882090L;
        short s1=902;

        vMeth(84.567F);
        for (i19 = 14; 334 > i19; ++i19) {
            i20 -= i19;
        }
        Test.lArrFld[(i19 >>> 1) % N] ^= Test.iFld;
        i20 *= i20;
        for (l = 2; l < 139; ++l) {
            i20 -= i20;
            for (i22 = 183; i22 > 4; i22 -= 2) {
                float f3=2.849F;
                Test.instanceCount += Test.instanceCount;
                f3 -= Test.instanceCount;
                for (i24 = (int)(l); i24 < 3; ++i24) {
                    iArrFld[i22 - 1] = iArrFld[(int)(l)];
                    i20 = i22;
                    i20 *= i19;
                    i25 += (i24 | i25);
                    Test.dFld *= 1072;
                    if (Test.bFld) break;
                    Test.instanceCount = (long)f3;
                    iArrFld[i22][i22 + 1] -= i23;
                }
                Test.iFld %= (int)(i19 | 1);
                iArrFld[i22 - 1][(int)(l - 1)] += i25;
                iArrFld[(int)(l - 1)][i22] = Test.byFld;
                iArrFld = iArrFld;
                i23 ^= (int)l;
            }
            Test.instanceCount += (l ^ i24);
            i23 += i23;
            Test.instanceCount = Test.instanceCount;
            Test.instanceCount -= i24;
            i21 = i25;
            s1 += (short)l;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
