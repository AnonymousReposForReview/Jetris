package tests.javafuzzer1769;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:13:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-28846L;
    public static int iFld=-9;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -69.16608);
        FuzzerUtils.init(Test.fArrFld, 1.637F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-129, i4=-116, i5=-22422, i6=49273, i7=62313, i8=184, iArr1[]=new int[N];
        short s=26381;
        double d=-34.121524;
        byte by=-113;
        float f1=0.527F;

        FuzzerUtils.init(iArr1, 48261);

        i3 = 1;
        while ((i3 += 2) < 329) {
            Test.iFld |= 53194;
            for (i4 = 1; i4 < 10; i4++) {
                Test.instanceCount *= s;
                Test.iFld *= i3;
                Test.iFld += i4;
                d = i5;
                for (i6 = 2; 1 < i6; i6 -= 2) {
                    Test.instanceCount = Test.instanceCount;
                    iArr1[i6 + 1] -= i4;
                    i7 += (int)Test.instanceCount;
                    i5 = i5;
                    Test.iFld += i7;
                    Test.iFld += Test.iFld;
                    Test.iFld += (((i6 * i8) + by) - f1);
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + s + Double.doubleToLongBits(d) + i6 + i7 + i8 + by +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(float f, long l1) {

        short s1=-12296;
        int i9=32966, i10=105, iArr2[]=new int[N];
        byte by1=-21;

        FuzzerUtils.init(iArr2, 11971);

        vMeth1();
        Test.iFld = -2;
        f *= s1;
        Test.instanceCount -= Test.iFld;
        for (i9 = 5; 284 > i9; ++i9) {
            iArr2[i9 + 1] = i10;
            Test.instanceCount += (i9 - Test.iFld);
            iArr2[i9] <<= 193;
            Test.iFld -= (int)Test.instanceCount;
            l1 -= l1;
            l1 &= s1;
            by1 = (byte)i9;
            i10 += (i9 * i9);
            Test.instanceCount += (i9 * i9);
        }
        Test.iFld = Test.iFld;
        vMeth_check_sum += Float.floatToIntBits(f) + l1 + s1 + i9 + i10 + by1 + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(long l, int i2) {

        int i11=-13, i12=-22839, i13=2, i14=178, i15=96, i16=-6, i17=0, i18=198, i19=-39016, i20=30574, i21=14,
            iArr3[]=new int[N];
        byte by2=-74, byArr[]=new byte[N];
        boolean b=true;

        FuzzerUtils.init(iArr3, -223);
        FuzzerUtils.init(byArr, (byte)37);

        vMeth(-1.721F, Test.instanceCount);
        i2 -= Test.iFld;
        for (i11 = 18; i11 < 301; ++i11) {
            for (i13 = 1; i13 < 6; i13++) {
                iArr3[i13 + 1] += by2;
                for (i15 = 1; i15 < 2; ++i15) {
                    float f2=38.657F;
                    try {
                        i16 = (Test.iFld % -2041676968);
                        i12 = (Test.iFld / 12890);
                        i12 = (28709 / i16);
                    } catch (ArithmeticException a_e) {}
                    f2 += i13;
                }
                for (i17 = i11; i17 < 2; ++i17) {
                    byArr[i11 + 1] *= (byte)Test.iFld;
                }
            }
            l <<= i18;
            for (i19 = 1; i19 < 6; ++i19) {
                try {
                    i16 = (iArr3[i11 - 1] % i21);
                    i16 = (i17 / -56);
                    i16 = (i11 / -1855328397);
                } catch (ArithmeticException a_e) {}
                b = false;
                i18 <<= i17;
            }
        }
        long meth_res = l + i2 + i11 + i12 + i13 + i14 + by2 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=37738, i1=-61107, i23=-2, iArr[]=new int[N];
        byte by3=120;
        long l2=-1841943203294369784L, lArr[]=new long[N];
        float f3=0.514F, fArr[]=new float[N];
        double d1=-96.19899;

        FuzzerUtils.init(iArr, -46048);
        FuzzerUtils.init(fArr, 110.761F);
        FuzzerUtils.init(lArr, -112L);

        Test.iFld = (int)(Test.instanceCount + Test.dArrFld[(Test.iFld >>> 1) % N]);
        Test.iFld = (--iArr[(Test.iFld >>> 1) % N]);
        for (i = 12; i < 341; ++i) {
            iMeth(Test.instanceCount, Test.iFld);
            Test.instanceCount |= by3;
            for (l2 = 2; l2 < 76; l2++) {
                Test.instanceCount += Test.instanceCount;
                f3 = (float)2.33784;
            }
            i23 >>>= i23;
            d1 = i23;
            Test.instanceCount += i;
            Test.instanceCount = Test.iFld;
        }
        Test.iFld = i23;
        for (float f4 : fArr) {
            Test.instanceCount += (long)d1;
        }
        for (long l3 : lArr) {
            Test.fArrFld[(-10089 >>> 1) % N] = i23;
        }
        sArrFld[(Test.iFld >>> 1) % N] = (short)l2;
        lArr[(i >>> 1) % N] |= i;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
