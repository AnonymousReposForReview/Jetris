package tests.javafuzzer245;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:54:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3701904388L;
    public static float fFld=92.543F;
    public byte byFld=-18;
    public static double dFld=1.16981;
    public static short sFld=-27267;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 96);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        long l=-559967913L;
        int i1=14181, i2=0, i3=0, i4=39, i5=13;
        float f=-89.817F;

        l = 1;
        do {
            i1 += (int)(l + l);
            for (i2 = (int)(l); i2 < 6; i2++) {
                Test.iArrFld[(int)(l)] = i1;
                i3 += (int)(3988L + (i2 * i2));
                for (i4 = 1; i4 < 1; i4++) {
                    Test.instanceCount += (((i4 * f) + i4) - i3);
                }
                if (false) break;
            }
        } while (++l < 282);
        i1 -= i2;
        i1 <<= -6;
        i3 += 100;
        i1 <<= (int)Test.instanceCount;
        vMeth1_check_sum += l + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f);
    }

    public static float fMeth() {

        int i6=5, i7=-3992, i8=-10, i9=-56627, i10=8437, i11=4647;
        byte by1=121;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 4462989352119366281L);

        vMeth1();
        for (i6 = 9; i6 < 163; i6++) {
            i7 = i6;
            Test.instanceCount += (((i6 * i6) + i7) - i7);
            Test.iArrFld[i6 - 1] -= (int)Test.instanceCount;
            for (i8 = 1; i8 < 10; ++i8) {
                lArr[(i9 >>> 1) % N][i6] *= Test.instanceCount;
                Test.instanceCount += i8;
                for (i10 = 2; i10 > 1; i10--) {
                    i7 -= (int)164L;
                    i11 >>= i9;
                    i11 <<= 2719;
                    i9 = i10;
                    by1 += (byte)Test.fFld;
                }
            }
            Test.iArrFld[i6] *= (int)Test.instanceCount;
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + by1 + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(byte by, int i) {

        int i12=-197, i13=45885, i14=-11, i15=-202;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -17280L);
        FuzzerUtils.init(dArr, -1.70175);

        i -= (int)(Test.instanceCount++);
        i -= (int)((fMeth() + i) - i);
        Test.iArrFld[(10 >>> 1) % N] ^= by;
        lArr1[(i >>> 1) % N] = i12;
        i12 -= i12;
        i13 = 1;
        do {
            if (i12 != 0) {
                vMeth_check_sum += by + i + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            i12 >>= i;
            Test.instanceCount += i13;
            for (i14 = 1; i14 < 10; i14++) {
                switch ((i13 % 3) + 117) {
                case 117:
                    i |= i12;
                    i = (int)Test.instanceCount;
                    Test.iArrFld[i14 - 1] += i12;
                    Test.iArrFld[i13 + 1] ^= i12;
                    break;
                case 118:
                    Test.instanceCount ^= -116;
                    break;
                case 119:
                    dArr[i14 + 1] %= (Test.instanceCount | 1);
                    break;
                default:
                    by -= (byte)-11;
                }
            }
        } while (++i13 < 157);
        vMeth_check_sum += by + i + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=8090, i17=138, i18=48, i19=190, i20=31, i22=-38489, i23=-10, i24=37354, i25=-10;
        boolean b=true;

        vMeth(byFld, i16);
        for (i17 = 7; 271 > i17; ++i17) {
            i16 += (i17 - i18);
            lArrFld[i17 + 1] %= ((long)(Test.fFld) | 1);
            i16 = (int)Test.instanceCount;
            for (i19 = 95; i19 > 5; i19--) {
                int i21=-226;
                i18 = i16;
                i21 += 3;
                switch ((i19 % 2) + 9) {
                case 9:
                    i16 *= i16;
                    Test.dFld -= i16;
                    break;
                case 10:
                    Test.instanceCount >>= i18;
                    i21 += (int)Test.dFld;
                    lArrFld[i17] = i16;
                    i18 = i16;
                default:
                    i21 *= (int)Test.instanceCount;
                    Test.dFld = i18;
                    if (b) continue;
                    i18 = i16;
                }
                Test.instanceCount += (long)1.23F;
            }
        }
        if (b) {
            Test.instanceCount = i18;
            for (i22 = 13; i22 < 294; ++i22) {
                for (i24 = 5; i24 < 89; i24++) {
                    Test.instanceCount *= Test.sFld;
                    i23 >>>= i17;
                    i23 -= (int)Test.dFld;
                    Test.instanceCount = i23;
                }
                Test.fFld += (-2 + (i22 * i22));
                i20 += i22;
            }
        } else {
            i20 >>>= i18;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
