package tests.javafuzzer3176;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:19:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static volatile short sFld=21074;
    public static byte byFld=-112;
    public static short sArrFld[]=new short[N];
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-19362);
        FuzzerUtils.init(Test.iArrFld, 1);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4, int i5) {

        boolean b=false;
        int i7=-236, i8=-9, i9=4, iArr[]=new int[N];
        long lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(lArr, 1164423765766891622L);
        FuzzerUtils.init(fArr, -121.141F);

        i5 = i5;
        if (b) {
            vMeth1_check_sum += i3 + i4 + i5 + (b ? 1 : 0) + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr) +
                FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
            return;
        } else {
            Test.instanceCount -= i4;
        }
        for (int i6 : iArr) {
            for (i7 = 4; 1 < i7; --i7) {
                i4 = i8;
            }
            fArr[(i6 >>> 1) % N][(i6 >>> 1) % N] += i8;
            Test.sArrFld[(-8344 >>> 1) % N] |= (short)14;
            i9 = 4;
            while (--i9 > 0) {
                i8 = i7;
                Test.instanceCount += i9;
                Test.instanceCount = Test.sFld;
                i5 += (int)Test.instanceCount;
                if (i5 != 0) {
                    vMeth1_check_sum += i3 + i4 + i5 + (b ? 1 : 0) + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                Test.sFld >>= (short)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + (b ? 1 : 0) + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f, double d) {

        int i1=-1, i2=-236, i10=9, i11=-50161, iArr1[]=new int[N];
        byte by=-14;

        FuzzerUtils.init(iArr1, -14);

        for (i1 = 4; i1 < 373; ++i1) {
            vMeth1(-180, i1, i1);
            Test.instanceCount <<= i2;
            i2 += i1;
            for (i10 = i1; 5 > i10; ++i10) {
                i2 *= 12;
                i11 += (((i10 * f) + Test.instanceCount) - i10);
                try {
                    i11 = (iArr1[i1 + 1] / -42);
                    i11 = (iArr1[i10 + 1] % 15153);
                    i2 = (i11 / 47983);
                } catch (ArithmeticException a_e) {}
                i2 = i11;
                i11 = i11;
            }
            by = (byte)8L;
            try {
                i2 = (59331 / iArr1[i1]);
                i2 = (i11 / 139);
                i11 = (-152 % i11);
            } catch (ArithmeticException a_e) {}
            i2 = (int)Test.instanceCount;
        }
        Test.instanceCount = i2;
        i11 *= (int)Test.instanceCount;
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i2 + i10 + i11 + by +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        double d1=0.89351;
        int i13=-212, i14=-72, i15=12, i16=67, i17=7, i18=-59219;
        boolean b1=true;
        long l1=-8441761686880705140L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2732696044L);

        vMeth(-2.935F, d1);
        for (int i12 : Test.iArrFld) {
            for (i13 = 1; 4 > i13; i13 += 3) {
                i12 -= i14;
                i14 += (int)Test.instanceCount;
                Test.iArrFld[i13 + 1] >>= Test.sFld;
                for (i15 = i13; i15 < 4; i15++) {
                    b1 = b1;
                    Test.instanceCount *= Test.instanceCount;
                    i14 += (((i15 * i13) + Test.sFld) - i14);
                }
            }
        }
        for (i17 = 6; i17 < 275; i17 += 3) {
            i14 &= 17;
            lArr1[i17 + 1] = -188;
            Test.byFld += (byte)(((i17 * i16) + Test.instanceCount) - i17);
            lArr1[i17 - 1] >>>= l1;
        }
        long meth_res = Double.doubleToLongBits(d1) + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 + l1 +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14882, i19=1, i20=-27198, i21=34981, i22=43702, i23=39164, i24=-55, i25=53540;
        float f1=-57.670F;
        boolean b2=true;
        double d2=2.25667;

        i >>>= ((--i) + iMeth());
        i = i;
        for (i19 = 16; 367 > i19; ++i19) {
            Test.instanceCount = (long)f1;
            i += i19;
            b2 = b2;
            dArrFld = dArrFld;
            switch (((i19 % 2) * 5) + 72) {
            case 76:
                switch (((i19 % 8) * 5) + 13) {
                case 31:
                    Test.instanceCount += (i19 | i);
                    d2 += i;
                    i += i;
                    break;
                case 28:
                    i += i20;
                    break;
                case 41:
                    for (i21 = 1; i21 < 72; i21++) {
                        for (i23 = 2; 1 < i23; --i23) {
                            try {
                                i24 = (i24 % 156);
                                i24 = (160 / Test.iArrFld[i21]);
                                i24 = (i19 % -3269);
                            } catch (ArithmeticException a_e) {}
                            i22 = Test.byFld;
                            i24 += i23;
                            i20 |= -12;
                            Test.instanceCount += (((i23 * Test.instanceCount) + f1) - f1);
                            lArrFld[i21 + 1] = (long)f1;
                            d2 = d2;
                            Test.instanceCount = 9252;
                        }
                        lArrFld[i19] += i21;
                        f1 -= Test.instanceCount;
                        i &= 6;
                        i24 += i21;
                        i25 = 2;
                        do {
                            Test.instanceCount -= i22;
                            if (b2) break;
                        } while (--i25 > 0);
                    }
                case 14:
                    d2 = i;
                    break;
                case 18:
                    f1 = Test.sFld;
                case 52:
                    Test.iArrFld[i19 + 1] |= (int)Test.instanceCount;
                case 15:
                    i += (int)Test.instanceCount;
                case 49:
                    Test.sFld -= (short)i25;
                }
                break;
            case 75:
                i20 *= i19;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
