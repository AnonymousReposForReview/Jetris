package tests.javafuzzer2604;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:14:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=33007L;
    public static volatile short sFld=-297;
    public static double dFld=117.69000;
    public float fFld=2.945F;
    public static byte byFld=-81;
    public int iFld=-58444;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -28.357F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l2, float f, long l3) {

        int i2=188, i3=44, i4=0, i5=40, iArr[]=new int[N];
        double d=2.97627, d1=1.89060, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -74.37065);
        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(lArr, 12449L);

        switch (((i2 >>> 1) % 1) + 19) {
        case 19:
            dArr[(i2 >>> 1) % N] = i2;
            d *= i2;
        default:
            for (float f1 : Test.fArrFld) {
                iArr[(i2 >>> 1) % N] -= (int)l3;
                i2 += 23532;
                i2 -= i2;
                lArr[(i2 >>> 1) % N] += (long)f;
            }
            i2 += Test.sFld;
            for (i3 = 13; i3 < 362; ++i3) {
                i4 += (((i3 * i2) + i3) - i3);
                for (d1 = 1; d1 < 5; ++d1) {
                    l3 += (long)(d1 * d1);
                    Test.instanceCount = i3;
                    Test.instanceCount = l3;
                }
            }
        }
        vMeth1_check_sum += l2 + Float.floatToIntBits(f) + l3 + i2 + Double.doubleToLongBits(d) + i3 + i4 +
            Double.doubleToLongBits(d1) + i5 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l1) {

        float f2=50.589F;
        int i6=-4817, i7=-196, i8=-48584, i9=50409, i10=8, i11=-69, i12=-248, iArr1[]=new int[N];
        byte by=-3;

        FuzzerUtils.init(iArr1, 2);

        vMeth1(l1, f2, l1);
        Test.fArrFld[(i6 >>> 1) % N] += l1;
        f2 -= f2;
        i6 *= Test.sFld;
        i7 = 1;
        do {
            for (i8 = 1; i8 < 6; ++i8) {
                iArr1[i7] >>= i6;
                i9 <<= (int)l1;
                Test.instanceCount = i9;
                Test.sFld = by;
            }
            i10 = 1;
            while (++i10 < 6) {
                i6 = i7;
                for (i11 = 1; i11 < 1; ++i11) {
                    Test.instanceCount -= -4451122703455343972L;
                    iArr1 = iArr1;
                }
            }
        } while (++i7 < 282);
        vMeth_check_sum += l1 + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + by + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l) {

        int i13=33377, i14=-31, i15=-5, i16=-10, i17=-63589;
        double d2=1.20527;
        boolean b=false;

        vMeth(l);
        l &= Test.instanceCount;
        for (i13 = 4; i13 < 124; ++i13) {
            for (d2 = 13; d2 > 1; d2 -= 3) {
                Test.sFld += (short)(2481356981L + (d2 * d2));
                for (i16 = i13; i16 < 4; i16++) {
                    double d3=-119.112440;
                    byte by1=66;
                    Test.fArrFld[(int)(d2 + 1)] -= i16;
                    if (true) continue;
                    switch ((((i14 >>> 1) % 4) * 5) + 1) {
                    case 12:
                        d3 += Test.sFld;
                    case 18:
                        i15 += i16;
                        by1 += (byte)l;
                        i15 += (i16 * i16);
                        break;
                    case 17:
                    case 10:
                        Test.instanceCount = 10;
                    default:
                        b = b;
                    }
                }
            }
        }
        long meth_res = l + i13 + i14 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-162, i1=41051, i18=-59578, i19=-9, i20=-202, i21=15900, i22=-163, i23=-9487, i24=-231, i25=11, i26=197,
            iArr2[]=new int[N];
        boolean b1=true;
        long l4=6L, lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -13L);
        FuzzerUtils.init(iArr2, 119);

        for (i = 8; i < 398; ++i) {
            i1 += iMeth(Test.instanceCount);
            for (i18 = 3; i18 < 65; i18++) {
                i1 = i18;
                if (b1) break;
                for (i20 = 1; i20 < 2; i20++) {
                    i19 = (int)Test.dFld;
                    Test.fArrFld[i20 + 1] += i1;
                }
                fFld += (i18 * i18);
                lArr1[i - 1][(i19 >>> 1) % N] -= Test.instanceCount;
            }
            Test.instanceCount += (i * i);
            i19 -= i1;
            for (i22 = 1; i22 < 65; ++i22) {
                float f3=-35.875F;
                for (i24 = 1; i24 < 2; i24++) {
                    i21 -= i1;
                    i23 = (int)Test.instanceCount;
                    i21 = -13;
                    i25 >>= i24;
                    i25 += i24;
                    switch ((i24 % 1) + 5) {
                    case 5:
                        i21 += Test.byFld;
                        try {
                            iArr2[i24] = (-253 / iFld);
                            iArr2[i + 1] = (60 / i19);
                            iArr2[i + 1] = (-36 % i26);
                        } catch (ArithmeticException a_e) {}
                        break;
                    default:
                        i21 += -21991;
                        l4 += i24;
                    }
                }
                i25 += (i22 ^ Test.sFld);
                fFld = -7853;
                i26 = (int)fFld;
                i1 <<= i25;
                iFld *= (int)f3;
            }
            i25 += (((i * l4) + i23) - l4);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
