package tests.javafuzzer2167;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:43:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=235L;
    public int iFld=0;
    public static byte byFld=-126;
    public double dFld=2.71890;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -62052);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public void vMeth() {

        int i=-6;

        i = (int)(++Test.instanceCount);
        vMeth_check_sum += i;
    }

    public static int iMeth(byte by) {

        int i6=11, i7=-4, i8=-9, i9=-41, i10=-209, i11=17308, i12=33;
        short s=-12318;
        float f=119.755F;
        double d=-1.36417;

        i6 >>= by;
        for (i7 = 1; 233 > i7; ++i7) {
            s = (short)f;
            Test.iArrFld[i7 - 1][i7 + 1] -= (int)Test.instanceCount;
            if (false) continue;
            switch (((i7 % 3) * 5) + 23) {
            case 38:
                for (i9 = 1; 7 > i9; i9++) {
                    i11 = 2;
                    do {
                        Test.instanceCount <<= Test.instanceCount;
                    } while (--i11 > 0);
                    i12 = 1;
                    while (++i12 < 2) {
                        f += (((i12 * Test.instanceCount) + i8) - i12);
                        Test.iArrFld[i12] = Test.iArrFld[i12 + 1];
                        i10 = (int)Test.instanceCount;
                        i6 -= (int)Test.instanceCount;
                        d -= Test.instanceCount;
                    }
                }
            case 37:
                Test.instanceCount += (-43907 + (i7 * i7));
                break;
            case 28:
                i10 += (int)Test.instanceCount;
                break;
            default:
                Test.instanceCount ^= i7;
            }
        }
        long meth_res = by + i6 + i7 + i8 + s + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        int i5=-58917, i13=-210, i14=-13, i15=40446, i16=-197;
        float f1=45.568F;
        short s1=27447, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-7252);

        i5 = 1;
        while (++i5 < 341) {
            Test.instanceCount = iMeth((byte)(69));
            i13 += (((i5 * f1) + Test.instanceCount) - s1);
            Test.instanceCount = i13;
            Test.instanceCount >>= i13;
            f1 -= Test.instanceCount;
            Test.iArrFld[i5 + 1][i5 + 1] %= (int)(i13 | 1);
            for (i14 = 1; i14 < 5; i14++) {
                i13 += (((i14 * i14) + i5) - i14);
                Test.iArrFld[i5 + 1][i14 - 1] -= (int)-8L;
            }
        }
        i15 = 187;
        i13 ^= i14;
        i16 = 1;
        do {
            sArr[i16 - 1] *= (short)i5;
            i13 -= i16;
        } while (++i16 < 145);
        vMeth2_check_sum += i5 + i13 + Float.floatToIntBits(f1) + s1 + i14 + i15 + i16 + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth1(int i1, long l, int i2) {

        int i3=43260, i4=45492, i17=-17198, i18=-6, i19=142, i20=-30;
        float f2=117.709F, fArr[]=new float[N];
        short s2=28371;

        FuzzerUtils.init(fArr, -2.798F);

        for (i3 = 19; 367 > i3; ++i3) {
            i2 += (41016 + (i3 * i3));
            vMeth2();
            iFld += (((i3 * i4) + iFld) - i3);
            i4 += (i3 | (long)f2);
            Test.iArrFld[i3][i3] = (int)Test.instanceCount;
        }
        Test.iArrFld[(i3 >>> 1) % N][(22 >>> 1) % N] = Test.byFld;
        iFld -= (int)1.13621;
        s2 >>= (short)iFld;
        l = 30101;
        for (i17 = 13; i17 < 293; i17++) {
            fArr[i17 - 1] = l;
            for (i19 = 1; i19 < 6; ++i19) {
                i1 = i17;
                i1 >>= i2;
            }
        }
        vMeth1_check_sum += i1 + l + i2 + i3 + i4 + Float.floatToIntBits(f2) + s2 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=60841, i22=107, i23=-39250, i24=247, i25=-28425, i26=3, i27=5, i28=14, i29=27640, i30=-3, i31=139;
        float f3=80.861F, fArr1[]=new float[N];
        boolean b=true;
        double d1=0.32751;
        long l1=4603495603851734806L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4271306175392140392L);
        FuzzerUtils.init(fArr1, 53.530F);

        vMeth();
        iFld += (iFld += (iFld * (--iFld)));
        vMeth();
        vMeth1(iFld, Test.instanceCount, iFld);
        lArr[(iFld >>> 1) % N] = iFld;
        for (i21 = 9; i21 < 147; ++i21) {
            for (i23 = 11; i23 < 182; ++i23) {
                Test.instanceCount += -64886;
                iFld = i21;
                for (i25 = 1; i25 < 2; i25++) {
                    fArr1[i23 - 1] = i21;
                    f3 += i24;
                }
                for (i27 = 1; i27 < 2; ++i27) {
                    i24 >>= i24;
                }
                Test.iArrFld[i23 + 1][i21 - 1] -= (int)f3;
            }
            if (b) continue;
            i22 = iFld;
            for (i29 = 10; i29 < 182; ++i29) {
                i24 += (int)Test.instanceCount;
                for (d1 = i29; d1 < 2; ++d1) {
                    i22 += (int)(((d1 * i22) + i24) - i31);
                    Test.iArrFld[(int)(d1 - 1)][i29] += i27;
                }
                l1 = 2;
                do {
                    dFld -= -2;
                    i28 = (int)Test.instanceCount;
                    Test.iArrFld[i29 - 1][i29] = -8;
                    if (b) {
                        i31 += i26;
                        i30 >>= i21;
                        i31 += 11987;
                    } else if (b) {
                        Test.iArrFld[i21 + 1][i29] = (int)-14L;
                    }
                } while ((l1 -= 2) > 0);
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth2 vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
